{"totalCount":3,"grade":"F","repositories":[{"url":"https://github.com/MTES-MCT/envergo","grade":"F","alerts":[{"number":7,"created_at":"2025-01-15T10:19:21Z","updated_at":"2025-01-20T15:56:30Z","url":"https://api.github.com/repos/MTES-MCT/envergo/code-scanning/alerts/7","html_url":"https://github.com/MTES-MCT/envergo/security/code-scanning/7","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}","category":"/language:python","state":"open","commit_sha":"39f8697519b408bcca2be57556357762fe8ffc94","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"envergo/hedges/views.py","start_line":87,"end_line":87,"start_column":33,"end_column":50},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/envergo/code-scanning/alerts/7/instances","dismissal_approved_by":null},{"number":3,"created_at":"2024-10-10T07:12:51Z","updated_at":"2024-10-10T07:12:52Z","url":"https://api.github.com/repos/MTES-MCT/envergo/code-scanning/alerts/3","html_url":"https://github.com/MTES-MCT/envergo/security/code-scanning/3","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/xss-through-dom","severity":"warning","description":"DOM text reinterpreted as HTML","name":"js/xss-through-dom","tags":["external/cwe/cwe-079","external/cwe/cwe-116","security"],"full_description":"Reinterpreting text from the DOM as HTML can lead to a cross-site scripting vulnerability.","help":"# DOM text reinterpreted as HTML\nExtracting text from a DOM node and interpreting it as HTML can lead to a cross-site scripting vulnerability.\n\nA webpage with this vulnerability reads text from the DOM, and afterwards adds the text as HTML to the DOM. Using text from the DOM as HTML effectively unescapes the text, and thereby invalidates any escaping done on the text. If an attacker is able to control the safe sanitized text, then this vulnerability can be exploited to perform a cross-site scripting attack.\n\n\n## Recommendation\nTo guard against cross-site scripting, consider using contextual output encoding/escaping before writing text to the page, or one of the other solutions that are mentioned in the References section below.\n\n\n## Example\nThe following example shows a webpage using a `data-target` attribute to select and manipulate a DOM element using the JQuery library. In the example, the `data-target` attribute is read into the `target` variable, and the `$` function is then supposed to use the `target` variable as a CSS selector to determine which element should be manipulated.\n\n\n```javascript\n$(\"button\").click(function () {\n    var target = $(this).attr(\"data-target\");\n    $(target).hide();\n});\n\n```\nHowever, if an attacker can control the `data-target` attribute, then the value of `target` can be used to cause the `$` function to execute arbitrary JavaScript.\n\nThe above vulnerability can be fixed by using `$.find` instead of `$`. The `$.find` function will only interpret `target` as a CSS selector and never as HTML, thereby preventing an XSS attack.\n\n\n```javascript\n$(\"button\").click(function () {\n    var target = $(this).attr(\"data-target\");\n\t$.find(target).hide();\n});\n\n```\n\n## References\n* OWASP: [DOM based XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html).\n* OWASP: [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html).\n* OWASP [DOM Based XSS](https://owasp.org/www-community/attacks/DOM_Based_XSS).\n* OWASP [Types of Cross-Site Scripting](https://owasp.org/www-community/Types_of_Cross-Site_Scripting).\n* Wikipedia: [Cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"39f8697519b408bcca2be57556357762fe8ffc94","message":{"text":"DOM text is reinterpreted as HTML without escaping meta-characters."},"location":{"path":"envergo/templates/admin/choice_filter.html","start_line":5,"end_line":5,"start_column":37,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/envergo/code-scanning/alerts/3/instances","dismissal_approved_by":null},{"number":2,"created_at":"2022-09-30T08:30:14Z","updated_at":"2023-05-15T08:40:14Z","url":"https://api.github.com/repos/MTES-MCT/envergo/code-scanning/alerts/2","html_url":"https://github.com/MTES-MCT/envergo/security/code-scanning/2","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"pythonsecurity:S5145","severity":"warning","description":"Logging should not be vulnerable to injection attacks","name":"pythonsecurity:S5145","tags":["cwe"],"full_description":"Logging should not be vulnerable to injection attacks","help":"<h2>Why is this an issue?</h2>\n<p>Log injection occurs when an application fails to sanitize untrusted data used for logging.</p>\n<p>An attacker can forge log content to prevent an organization from being able to trace back malicious activities.</p>\n<h3>What is the potential impact?</h3>\n<p>If an attacker can insert arbitrary data into a log file, the integrity of the chain of events being recorded can be compromised.<br> This\nfrequently occurs because attackers can inject the log entry separator of the logger framework, commonly newlines, and thus insert artificial log\nentries. <br> Other attacks could also occur requiring only field pollution, such as cross-site scripting (XSS) or code injection (for example,\nLog4Shell) if the logged data is fed to other application components, which may interpret the injected data differently.<br></p>\n<p>The focus of this rule is newline character replacement.</p>\n<h4>Log Forge</h4>\n<p>An attacker, able to create independent log entries by injecting log entry separators, inserts bogus data into a log file to conceal his malicious\nactivities. This obscures the content for an incident response team to trace the origin of the breach as the indicators of compromise (IoCs) lead to\nfake application events.</p>\n<h2>How to fix it in Flask</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to log injection as it constructs log entries using untrusted data. An attacker can leverage this to manipulate\nthe chain of events being recorded.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport logging\n\napp = Flask(__name__)\n\n@app.route('/example')\ndef log():\n    data = request.args[\"data\"]\n    app.logger.critical(\"%s\", data) # Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport logging\nimport base64\n\napp = Flask(__name__)\n\n@app.route('/example')\ndef log():\n    data = request.args[\"data\"]\n    if data.isalnum():\n        app.logger.critical(\"%s\", data)\n    else:\n        app.logger.critical(\"Invalid Input: %s\", base64.b64encode(data.encode('UTF-8')))\n</pre>\n<h3>How does this work?</h3>\n<p>Data used for logging should be content-restricted and typed. This can be done by validating the data content or sanitizing it.<br> Validation and\nsanitization mainly revolve around preventing carriage return (CR) and line feed (LF) characters. However, further actions could be required based on\nthe application context and the logged data usage.</p>\n<p>Here, the example compliant code uses the <code>isalnum</code> function to ensure the untrusted data is safe. If not, it performs Base64 encoding\nto protect from log injection.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">OWASP Top 10 2021 Category A3</a> - Injection </li>\n  <li> <a href=\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\">OWASP Top 10 2021 Category A9</a> - Security Logging and\n  Monitoring Failures </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">OWASP Top 10 2017 Category A10</a> -\n  Insufficient Logging &amp; Monitoring </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/20\">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/117\">MITRE, CWE-117</a> - Improper Output Neutralization for Logs </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"318fb436ea2ff3583a20541f16d03fbe31112a5c","message":{"text":"<!--SONAR_ISSUE_KEY:AYONhGhNnAcKouvelHBO-->Change this code to not log user-controlled data. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_envergo&issues=AYONhGhNnAcKouvelHBO&open=AYONhGhNnAcKouvelHBO\">SonarCloud</a></p>"},"location":{"path":"envergo/analytics/utils.py","start_line":40,"end_line":40,"start_column":5,"end_column":79},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/envergo/code-scanning/alerts/2/instances","dismissal_approved_by":null}]}]}