{"totalCount":30,"grade":"D","repositories":[{"url":"https://github.com/MTES-MCT/histologe","grade":"D","alerts":[{"number":117,"created_at":"2025-07-09T07:19:30Z","updated_at":"2025-07-09T07:19:30Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/117","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/117","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S905","severity":"warning","description":"Non-empty statements should change control flow or have at least one side-effect","name":"javascript:S905","tags":["cwe","unused"],"full_description":"Non-empty statements should change control flow or have at least one side-effect","help":"<p>Statements with no side effects and no change of control flow do not contribute to the functionality of the code and can indicate a programming\nerror.</p>\n<h2>Why is this an issue?</h2>\n<p>When writing code, it is important to ensure that each statement serves a purpose and contributes to the overall functionality of the program. When\nthey have no side effects or do not change the control flow, they can either indicate a programming error or be redundant:</p>\n<ol>\n  <li> The code does not behave as intended: The statements are expected to have an effect but they do not. This can be caused by mistyping,\n  copy-and-paste errors, etc. </li>\n  <li> The statements are residual after a refactoring. </li>\n</ol>\n<h3>Exceptions</h3>\n<p>The rule does not raise an issue on statements containing only a semicolon (<code>;</code>).</p>\n<h2>How to fix it</h2>\n<p>Identify statements that do not contribute to the functionality of the code and verify if they are intended to be part of the logic. If they are,\nthere is a bug to be fixed. If they are not, then they are redundant and should be removed.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result == 0; // Noncompliant: no side effect, was an assignment intended?\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nvar msg = \"Hello, \"\n  \"World!\"; // Noncompliant; have we forgotten '+' operator on previous line?\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result = 0; // Compliant\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nvar msg = \"Hello, \" +\n  \"World!\"; // Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/482\">CWE-482 Comparing instead of Assigning</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDec7f6clWJnaWqi-->Expected an assignment or function call and instead saw an expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDec7f6clWJnaWqi&open=AYHeFDec7f6clWJnaWqi\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":2,"end_line":4,"start_column":5,"end_column":120},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/117/instances","dismissal_approved_by":null},{"number":116,"created_at":"2025-07-09T07:19:30Z","updated_at":"2025-07-09T07:19:30Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/116","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/116","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S905","severity":"warning","description":"Non-empty statements should change control flow or have at least one side-effect","name":"javascript:S905","tags":["cwe","unused"],"full_description":"Non-empty statements should change control flow or have at least one side-effect","help":"<p>Statements with no side effects and no change of control flow do not contribute to the functionality of the code and can indicate a programming\nerror.</p>\n<h2>Why is this an issue?</h2>\n<p>When writing code, it is important to ensure that each statement serves a purpose and contributes to the overall functionality of the program. When\nthey have no side effects or do not change the control flow, they can either indicate a programming error or be redundant:</p>\n<ol>\n  <li> The code does not behave as intended: The statements are expected to have an effect but they do not. This can be caused by mistyping,\n  copy-and-paste errors, etc. </li>\n  <li> The statements are residual after a refactoring. </li>\n</ol>\n<h3>Exceptions</h3>\n<p>The rule does not raise an issue on statements containing only a semicolon (<code>;</code>).</p>\n<h2>How to fix it</h2>\n<p>Identify statements that do not contribute to the functionality of the code and verify if they are intended to be part of the logic. If they are,\nthere is a bug to be fixed. If they are not, then they are redundant and should be removed.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result == 0; // Noncompliant: no side effect, was an assignment intended?\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nvar msg = \"Hello, \"\n  \"World!\"; // Noncompliant; have we forgotten '+' operator on previous line?\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result = 0; // Compliant\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nvar msg = \"Hello, \" +\n  \"World!\"; // Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/482\">CWE-482 Comparing instead of Assigning</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AZL31elWwCgqW2kWlXrz-->Expected an assignment or function call and instead saw an expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AZL31elWwCgqW2kWlXrz&open=AZL31elWwCgqW2kWlXrz\">SonarQube Cloud</a></p>"},"location":{"path":"assets/scripts/vanilla/services/deprecated/data_delete.js","start_line":12,"end_line":12,"start_column":20,"end_column":83},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/116/instances","dismissal_approved_by":null},{"number":115,"created_at":"2025-07-09T07:19:30Z","updated_at":"2025-07-09T07:19:30Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/115","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/115","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S905","severity":"warning","description":"Non-empty statements should change control flow or have at least one side-effect","name":"javascript:S905","tags":["cwe","unused"],"full_description":"Non-empty statements should change control flow or have at least one side-effect","help":"<p>Statements with no side effects and no change of control flow do not contribute to the functionality of the code and can indicate a programming\nerror.</p>\n<h2>Why is this an issue?</h2>\n<p>When writing code, it is important to ensure that each statement serves a purpose and contributes to the overall functionality of the program. When\nthey have no side effects or do not change the control flow, they can either indicate a programming error or be redundant:</p>\n<ol>\n  <li> The code does not behave as intended: The statements are expected to have an effect but they do not. This can be caused by mistyping,\n  copy-and-paste errors, etc. </li>\n  <li> The statements are residual after a refactoring. </li>\n</ol>\n<h3>Exceptions</h3>\n<p>The rule does not raise an issue on statements containing only a semicolon (<code>;</code>).</p>\n<h2>How to fix it</h2>\n<p>Identify statements that do not contribute to the functionality of the code and verify if they are intended to be part of the logic. If they are,\nthere is a bug to be fixed. If they are not, then they are redundant and should be removed.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result == 0; // Noncompliant: no side effect, was an assignment intended?\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nvar msg = \"Hello, \"\n  \"World!\"; // Noncompliant; have we forgotten '+' operator on previous line?\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result = 0; // Compliant\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nvar msg = \"Hello, \" +\n  \"World!\"; // Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/482\">CWE-482 Comparing instead of Assigning</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDeg7f6clWJnaW7W-->Expected an assignment or function call and instead saw an expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDeg7f6clWJnaW7W&open=AYHeFDeg7f6clWJnaW7W\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":4708,"end_line":4708,"start_column":25,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/115/instances","dismissal_approved_by":null},{"number":114,"created_at":"2025-07-09T07:19:30Z","updated_at":"2025-07-09T07:19:30Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/114","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/114","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S905","severity":"warning","description":"Non-empty statements should change control flow or have at least one side-effect","name":"javascript:S905","tags":["cwe","unused"],"full_description":"Non-empty statements should change control flow or have at least one side-effect","help":"<p>Statements with no side effects and no change of control flow do not contribute to the functionality of the code and can indicate a programming\nerror.</p>\n<h2>Why is this an issue?</h2>\n<p>When writing code, it is important to ensure that each statement serves a purpose and contributes to the overall functionality of the program. When\nthey have no side effects or do not change the control flow, they can either indicate a programming error or be redundant:</p>\n<ol>\n  <li> The code does not behave as intended: The statements are expected to have an effect but they do not. This can be caused by mistyping,\n  copy-and-paste errors, etc. </li>\n  <li> The statements are residual after a refactoring. </li>\n</ol>\n<h3>Exceptions</h3>\n<p>The rule does not raise an issue on statements containing only a semicolon (<code>;</code>).</p>\n<h2>How to fix it</h2>\n<p>Identify statements that do not contribute to the functionality of the code and verify if they are intended to be part of the logic. If they are,\nthere is a bug to be fixed. If they are not, then they are redundant and should be removed.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result == 0; // Noncompliant: no side effect, was an assignment intended?\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nvar msg = \"Hello, \"\n  \"World!\"; // Noncompliant; have we forgotten '+' operator on previous line?\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result = 0; // Compliant\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nvar msg = \"Hello, \" +\n  \"World!\"; // Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/482\">CWE-482 Comparing instead of Assigning</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDef7f6clWJnaW1z-->Expected an assignment or function call and instead saw an expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDef7f6clWJnaW1z&open=AYHeFDef7f6clWJnaW1z\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":3123,"end_line":3123,"start_column":103,"end_column":113},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/114/instances","dismissal_approved_by":null},{"number":113,"created_at":"2025-07-09T07:19:30Z","updated_at":"2025-07-09T07:19:30Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/113","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/113","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S905","severity":"warning","description":"Non-empty statements should change control flow or have at least one side-effect","name":"javascript:S905","tags":["cwe","unused"],"full_description":"Non-empty statements should change control flow or have at least one side-effect","help":"<p>Statements with no side effects and no change of control flow do not contribute to the functionality of the code and can indicate a programming\nerror.</p>\n<h2>Why is this an issue?</h2>\n<p>When writing code, it is important to ensure that each statement serves a purpose and contributes to the overall functionality of the program. When\nthey have no side effects or do not change the control flow, they can either indicate a programming error or be redundant:</p>\n<ol>\n  <li> The code does not behave as intended: The statements are expected to have an effect but they do not. This can be caused by mistyping,\n  copy-and-paste errors, etc. </li>\n  <li> The statements are residual after a refactoring. </li>\n</ol>\n<h3>Exceptions</h3>\n<p>The rule does not raise an issue on statements containing only a semicolon (<code>;</code>).</p>\n<h2>How to fix it</h2>\n<p>Identify statements that do not contribute to the functionality of the code and verify if they are intended to be part of the logic. If they are,\nthere is a bug to be fixed. If they are not, then they are redundant and should be removed.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result == 0; // Noncompliant: no side effect, was an assignment intended?\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nvar msg = \"Hello, \"\n  \"World!\"; // Noncompliant; have we forgotten '+' operator on previous line?\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result = 0; // Compliant\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nvar msg = \"Hello, \" +\n  \"World!\"; // Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/482\">CWE-482 Comparing instead of Assigning</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDef7f6clWJnaW1x-->Expected an assignment or function call and instead saw an expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDef7f6clWJnaW1x&open=AYHeFDef7f6clWJnaW1x\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":3123,"end_line":3123,"start_column":56,"end_column":66},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/113/instances","dismissal_approved_by":null},{"number":112,"created_at":"2025-07-09T07:19:30Z","updated_at":"2025-07-09T07:19:30Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/112","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/112","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S905","severity":"warning","description":"Non-empty statements should change control flow or have at least one side-effect","name":"javascript:S905","tags":["cwe","unused"],"full_description":"Non-empty statements should change control flow or have at least one side-effect","help":"<p>Statements with no side effects and no change of control flow do not contribute to the functionality of the code and can indicate a programming\nerror.</p>\n<h2>Why is this an issue?</h2>\n<p>When writing code, it is important to ensure that each statement serves a purpose and contributes to the overall functionality of the program. When\nthey have no side effects or do not change the control flow, they can either indicate a programming error or be redundant:</p>\n<ol>\n  <li> The code does not behave as intended: The statements are expected to have an effect but they do not. This can be caused by mistyping,\n  copy-and-paste errors, etc. </li>\n  <li> The statements are residual after a refactoring. </li>\n</ol>\n<h3>Exceptions</h3>\n<p>The rule does not raise an issue on statements containing only a semicolon (<code>;</code>).</p>\n<h2>How to fix it</h2>\n<p>Identify statements that do not contribute to the functionality of the code and verify if they are intended to be part of the logic. If they are,\nthere is a bug to be fixed. If they are not, then they are redundant and should be removed.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result == 0; // Noncompliant: no side effect, was an assignment intended?\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nvar msg = \"Hello, \"\n  \"World!\"; // Noncompliant; have we forgotten '+' operator on previous line?\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result = 0; // Compliant\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nvar msg = \"Hello, \" +\n  \"World!\"; // Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/482\">CWE-482 Comparing instead of Assigning</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDef7f6clWJnaW1w-->Expected an assignment or function call and instead saw an expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDef7f6clWJnaW1w&open=AYHeFDef7f6clWJnaW1w\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":3123,"end_line":3123,"start_column":45,"end_column":55},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/112/instances","dismissal_approved_by":null},{"number":111,"created_at":"2025-07-09T07:19:30Z","updated_at":"2025-07-09T07:19:30Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/111","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/111","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S905","severity":"warning","description":"Non-empty statements should change control flow or have at least one side-effect","name":"javascript:S905","tags":["cwe","unused"],"full_description":"Non-empty statements should change control flow or have at least one side-effect","help":"<p>Statements with no side effects and no change of control flow do not contribute to the functionality of the code and can indicate a programming\nerror.</p>\n<h2>Why is this an issue?</h2>\n<p>When writing code, it is important to ensure that each statement serves a purpose and contributes to the overall functionality of the program. When\nthey have no side effects or do not change the control flow, they can either indicate a programming error or be redundant:</p>\n<ol>\n  <li> The code does not behave as intended: The statements are expected to have an effect but they do not. This can be caused by mistyping,\n  copy-and-paste errors, etc. </li>\n  <li> The statements are residual after a refactoring. </li>\n</ol>\n<h3>Exceptions</h3>\n<p>The rule does not raise an issue on statements containing only a semicolon (<code>;</code>).</p>\n<h2>How to fix it</h2>\n<p>Identify statements that do not contribute to the functionality of the code and verify if they are intended to be part of the logic. If they are,\nthere is a bug to be fixed. If they are not, then they are redundant and should be removed.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result == 0; // Noncompliant: no side effect, was an assignment intended?\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nvar msg = \"Hello, \"\n  \"World!\"; // Noncompliant; have we forgotten '+' operator on previous line?\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result = 0; // Compliant\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nvar msg = \"Hello, \" +\n  \"World!\"; // Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/482\">CWE-482 Comparing instead of Assigning</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDef7f6clWJnaW17-->Expected an assignment or function call and instead saw an expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDef7f6clWJnaW17&open=AYHeFDef7f6clWJnaW17\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":3123,"end_line":3123,"start_column":221,"end_column":232},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/111/instances","dismissal_approved_by":null},{"number":110,"created_at":"2025-07-09T07:19:30Z","updated_at":"2025-07-09T07:19:30Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/110","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/110","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S905","severity":"warning","description":"Non-empty statements should change control flow or have at least one side-effect","name":"javascript:S905","tags":["cwe","unused"],"full_description":"Non-empty statements should change control flow or have at least one side-effect","help":"<p>Statements with no side effects and no change of control flow do not contribute to the functionality of the code and can indicate a programming\nerror.</p>\n<h2>Why is this an issue?</h2>\n<p>When writing code, it is important to ensure that each statement serves a purpose and contributes to the overall functionality of the program. When\nthey have no side effects or do not change the control flow, they can either indicate a programming error or be redundant:</p>\n<ol>\n  <li> The code does not behave as intended: The statements are expected to have an effect but they do not. This can be caused by mistyping,\n  copy-and-paste errors, etc. </li>\n  <li> The statements are residual after a refactoring. </li>\n</ol>\n<h3>Exceptions</h3>\n<p>The rule does not raise an issue on statements containing only a semicolon (<code>;</code>).</p>\n<h2>How to fix it</h2>\n<p>Identify statements that do not contribute to the functionality of the code and verify if they are intended to be part of the logic. If they are,\nthere is a bug to be fixed. If they are not, then they are redundant and should be removed.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result == 0; // Noncompliant: no side effect, was an assignment intended?\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nvar msg = \"Hello, \"\n  \"World!\"; // Noncompliant; have we forgotten '+' operator on previous line?\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result = 0; // Compliant\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nvar msg = \"Hello, \" +\n  \"World!\"; // Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/482\">CWE-482 Comparing instead of Assigning</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDef7f6clWJnaW16-->Expected an assignment or function call and instead saw an expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDef7f6clWJnaW16&open=AYHeFDef7f6clWJnaW16\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":3123,"end_line":3123,"start_column":209,"end_column":220},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/110/instances","dismissal_approved_by":null},{"number":109,"created_at":"2025-07-09T07:19:30Z","updated_at":"2025-07-09T07:19:30Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/109","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/109","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S905","severity":"warning","description":"Non-empty statements should change control flow or have at least one side-effect","name":"javascript:S905","tags":["cwe","unused"],"full_description":"Non-empty statements should change control flow or have at least one side-effect","help":"<p>Statements with no side effects and no change of control flow do not contribute to the functionality of the code and can indicate a programming\nerror.</p>\n<h2>Why is this an issue?</h2>\n<p>When writing code, it is important to ensure that each statement serves a purpose and contributes to the overall functionality of the program. When\nthey have no side effects or do not change the control flow, they can either indicate a programming error or be redundant:</p>\n<ol>\n  <li> The code does not behave as intended: The statements are expected to have an effect but they do not. This can be caused by mistyping,\n  copy-and-paste errors, etc. </li>\n  <li> The statements are residual after a refactoring. </li>\n</ol>\n<h3>Exceptions</h3>\n<p>The rule does not raise an issue on statements containing only a semicolon (<code>;</code>).</p>\n<h2>How to fix it</h2>\n<p>Identify statements that do not contribute to the functionality of the code and verify if they are intended to be part of the logic. If they are,\nthere is a bug to be fixed. If they are not, then they are redundant and should be removed.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result == 0; // Noncompliant: no side effect, was an assignment intended?\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nvar msg = \"Hello, \"\n  \"World!\"; // Noncompliant; have we forgotten '+' operator on previous line?\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result = 0; // Compliant\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nvar msg = \"Hello, \" +\n  \"World!\"; // Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/482\">CWE-482 Comparing instead of Assigning</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDef7f6clWJnaW14-->Expected an assignment or function call and instead saw an expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDef7f6clWJnaW14&open=AYHeFDef7f6clWJnaW14\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":3123,"end_line":3123,"start_column":159,"end_column":170},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/109/instances","dismissal_approved_by":null},{"number":108,"created_at":"2025-07-09T07:19:30Z","updated_at":"2025-07-09T07:19:30Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/108","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/108","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S905","severity":"warning","description":"Non-empty statements should change control flow or have at least one side-effect","name":"javascript:S905","tags":["cwe","unused"],"full_description":"Non-empty statements should change control flow or have at least one side-effect","help":"<p>Statements with no side effects and no change of control flow do not contribute to the functionality of the code and can indicate a programming\nerror.</p>\n<h2>Why is this an issue?</h2>\n<p>When writing code, it is important to ensure that each statement serves a purpose and contributes to the overall functionality of the program. When\nthey have no side effects or do not change the control flow, they can either indicate a programming error or be redundant:</p>\n<ol>\n  <li> The code does not behave as intended: The statements are expected to have an effect but they do not. This can be caused by mistyping,\n  copy-and-paste errors, etc. </li>\n  <li> The statements are residual after a refactoring. </li>\n</ol>\n<h3>Exceptions</h3>\n<p>The rule does not raise an issue on statements containing only a semicolon (<code>;</code>).</p>\n<h2>How to fix it</h2>\n<p>Identify statements that do not contribute to the functionality of the code and verify if they are intended to be part of the logic. If they are,\nthere is a bug to be fixed. If they are not, then they are redundant and should be removed.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result == 0; // Noncompliant: no side effect, was an assignment intended?\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nvar msg = \"Hello, \"\n  \"World!\"; // Noncompliant; have we forgotten '+' operator on previous line?\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result = 0; // Compliant\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nvar msg = \"Hello, \" +\n  \"World!\"; // Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/482\">CWE-482 Comparing instead of Assigning</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDef7f6clWJnaW12-->Expected an assignment or function call and instead saw an expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDef7f6clWJnaW12&open=AYHeFDef7f6clWJnaW12\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":3123,"end_line":3123,"start_column":136,"end_column":146},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/108/instances","dismissal_approved_by":null},{"number":107,"created_at":"2025-07-09T07:19:30Z","updated_at":"2025-07-09T07:19:30Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/107","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/107","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S905","severity":"warning","description":"Non-empty statements should change control flow or have at least one side-effect","name":"javascript:S905","tags":["cwe","unused"],"full_description":"Non-empty statements should change control flow or have at least one side-effect","help":"<p>Statements with no side effects and no change of control flow do not contribute to the functionality of the code and can indicate a programming\nerror.</p>\n<h2>Why is this an issue?</h2>\n<p>When writing code, it is important to ensure that each statement serves a purpose and contributes to the overall functionality of the program. When\nthey have no side effects or do not change the control flow, they can either indicate a programming error or be redundant:</p>\n<ol>\n  <li> The code does not behave as intended: The statements are expected to have an effect but they do not. This can be caused by mistyping,\n  copy-and-paste errors, etc. </li>\n  <li> The statements are residual after a refactoring. </li>\n</ol>\n<h3>Exceptions</h3>\n<p>The rule does not raise an issue on statements containing only a semicolon (<code>;</code>).</p>\n<h2>How to fix it</h2>\n<p>Identify statements that do not contribute to the functionality of the code and verify if they are intended to be part of the logic. If they are,\nthere is a bug to be fixed. If they are not, then they are redundant and should be removed.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result == 0; // Noncompliant: no side effect, was an assignment intended?\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nvar msg = \"Hello, \"\n  \"World!\"; // Noncompliant; have we forgotten '+' operator on previous line?\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result = 0; // Compliant\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nvar msg = \"Hello, \" +\n  \"World!\"; // Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/482\">CWE-482 Comparing instead of Assigning</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDef7f6clWJnaW11-->Expected an assignment or function call and instead saw an expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDef7f6clWJnaW11&open=AYHeFDef7f6clWJnaW11\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":3123,"end_line":3123,"start_column":125,"end_column":135},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/107/instances","dismissal_approved_by":null},{"number":106,"created_at":"2025-07-09T07:19:30Z","updated_at":"2025-07-09T07:19:30Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/106","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/106","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S905","severity":"warning","description":"Non-empty statements should change control flow or have at least one side-effect","name":"javascript:S905","tags":["cwe","unused"],"full_description":"Non-empty statements should change control flow or have at least one side-effect","help":"<p>Statements with no side effects and no change of control flow do not contribute to the functionality of the code and can indicate a programming\nerror.</p>\n<h2>Why is this an issue?</h2>\n<p>When writing code, it is important to ensure that each statement serves a purpose and contributes to the overall functionality of the program. When\nthey have no side effects or do not change the control flow, they can either indicate a programming error or be redundant:</p>\n<ol>\n  <li> The code does not behave as intended: The statements are expected to have an effect but they do not. This can be caused by mistyping,\n  copy-and-paste errors, etc. </li>\n  <li> The statements are residual after a refactoring. </li>\n</ol>\n<h3>Exceptions</h3>\n<p>The rule does not raise an issue on statements containing only a semicolon (<code>;</code>).</p>\n<h2>How to fix it</h2>\n<p>Identify statements that do not contribute to the functionality of the code and verify if they are intended to be part of the logic. If they are,\nthere is a bug to be fixed. If they are not, then they are redundant and should be removed.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result == 0; // Noncompliant: no side effect, was an assignment intended?\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nvar msg = \"Hello, \"\n  \"World!\"; // Noncompliant; have we forgotten '+' operator on previous line?\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result = 0; // Compliant\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nvar msg = \"Hello, \" +\n  \"World!\"; // Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/482\">CWE-482 Comparing instead of Assigning</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDef7f6clWJnaW10-->Expected an assignment or function call and instead saw an expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDef7f6clWJnaW10&open=AYHeFDef7f6clWJnaW10\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":3123,"end_line":3123,"start_column":114,"end_column":124},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/106/instances","dismissal_approved_by":null},{"number":105,"created_at":"2025-07-09T07:19:30Z","updated_at":"2025-07-09T07:19:30Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/105","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/105","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S905","severity":"warning","description":"Non-empty statements should change control flow or have at least one side-effect","name":"javascript:S905","tags":["cwe","unused"],"full_description":"Non-empty statements should change control flow or have at least one side-effect","help":"<p>Statements with no side effects and no change of control flow do not contribute to the functionality of the code and can indicate a programming\nerror.</p>\n<h2>Why is this an issue?</h2>\n<p>When writing code, it is important to ensure that each statement serves a purpose and contributes to the overall functionality of the program. When\nthey have no side effects or do not change the control flow, they can either indicate a programming error or be redundant:</p>\n<ol>\n  <li> The code does not behave as intended: The statements are expected to have an effect but they do not. This can be caused by mistyping,\n  copy-and-paste errors, etc. </li>\n  <li> The statements are residual after a refactoring. </li>\n</ol>\n<h3>Exceptions</h3>\n<p>The rule does not raise an issue on statements containing only a semicolon (<code>;</code>).</p>\n<h2>How to fix it</h2>\n<p>Identify statements that do not contribute to the functionality of the code and verify if they are intended to be part of the logic. If they are,\nthere is a bug to be fixed. If they are not, then they are redundant and should be removed.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result == 0; // Noncompliant: no side effect, was an assignment intended?\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nvar msg = \"Hello, \"\n  \"World!\"; // Noncompliant; have we forgotten '+' operator on previous line?\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result = 0; // Compliant\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nvar msg = \"Hello, \" +\n  \"World!\"; // Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/482\">CWE-482 Comparing instead of Assigning</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDef7f6clWJnaW13-->Expected an assignment or function call and instead saw an expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDef7f6clWJnaW13&open=AYHeFDef7f6clWJnaW13\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":3123,"end_line":3123,"start_column":147,"end_column":158},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/105/instances","dismissal_approved_by":null},{"number":104,"created_at":"2025-07-08T10:37:21Z","updated_at":"2025-07-08T10:37:21Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/104","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/104","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S2486","severity":"warning","description":"Exceptions should not be ignored","name":"javascript:S2486","tags":["cwe","error-handling","suspicious"],"full_description":"Exceptions should not be ignored","help":"<h2>Why is this an issue?</h2>\n<p>When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nfunction f() {\n  try {\n    doSomething();\n  } catch (err) {\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nfunction f() {\n  try {\n    doSomething();\n  } catch (err) {\n    console.log(`Exception while doing something: ${err}`);\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\">Top 10 2021 Category A9 - Security Logging and\n  Monitoring Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">Top 10 2017 Category A10 -\n  Insufficient Logging &amp; Monitoring</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/390\">CWE-390 - Detection of Error Condition Without Action</a> </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AZYfG13KHGWFJqQfclBE-->Handle this exception or don't catch it at all. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AZYfG13KHGWFJqQfclBE&open=AZYfG13KHGWFJqQfclBE\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":5344,"end_line":5346,"start_column":13,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/104/instances","dismissal_approved_by":null},{"number":103,"created_at":"2025-07-08T10:37:21Z","updated_at":"2025-07-08T10:37:21Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/103","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/103","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S2486","severity":"warning","description":"Exceptions should not be ignored","name":"javascript:S2486","tags":["cwe","error-handling","suspicious"],"full_description":"Exceptions should not be ignored","help":"<h2>Why is this an issue?</h2>\n<p>When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nfunction f() {\n  try {\n    doSomething();\n  } catch (err) {\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nfunction f() {\n  try {\n    doSomething();\n  } catch (err) {\n    console.log(`Exception while doing something: ${err}`);\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\">Top 10 2021 Category A9 - Security Logging and\n  Monitoring Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">Top 10 2017 Category A10 -\n  Insufficient Logging &amp; Monitoring</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/390\">CWE-390 - Detection of Error Condition Without Action</a> </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AZYfG13KHGWFJqQfclBD-->Handle this exception or don't catch it at all. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AZYfG13KHGWFJqQfclBD&open=AZYfG13KHGWFJqQfclBD\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":5325,"end_line":5327,"start_column":13,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/103/instances","dismissal_approved_by":null},{"number":102,"created_at":"2025-07-08T10:37:21Z","updated_at":"2025-07-08T10:37:21Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/102","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/102","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S2486","severity":"warning","description":"Exceptions should not be ignored","name":"javascript:S2486","tags":["cwe","error-handling","suspicious"],"full_description":"Exceptions should not be ignored","help":"<h2>Why is this an issue?</h2>\n<p>When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nfunction f() {\n  try {\n    doSomething();\n  } catch (err) {\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nfunction f() {\n  try {\n    doSomething();\n  } catch (err) {\n    console.log(`Exception while doing something: ${err}`);\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\">Top 10 2021 Category A9 - Security Logging and\n  Monitoring Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">Top 10 2017 Category A10 -\n  Insufficient Logging &amp; Monitoring</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/390\">CWE-390 - Detection of Error Condition Without Action</a> </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AZYfG13KHGWFJqQfclBC-->Handle this exception or don't catch it at all. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AZYfG13KHGWFJqQfclBC&open=AZYfG13KHGWFJqQfclBC\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":5298,"end_line":5300,"start_column":17,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/102/instances","dismissal_approved_by":null},{"number":101,"created_at":"2025-07-08T10:37:21Z","updated_at":"2025-07-08T10:37:21Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/101","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/101","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S2486","severity":"warning","description":"Exceptions should not be ignored","name":"javascript:S2486","tags":["cwe","error-handling","suspicious"],"full_description":"Exceptions should not be ignored","help":"<h2>Why is this an issue?</h2>\n<p>When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nfunction f() {\n  try {\n    doSomething();\n  } catch (err) {\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nfunction f() {\n  try {\n    doSomething();\n  } catch (err) {\n    console.log(`Exception while doing something: ${err}`);\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\">Top 10 2021 Category A9 - Security Logging and\n  Monitoring Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">Top 10 2017 Category A10 -\n  Insufficient Logging &amp; Monitoring</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/390\">CWE-390 - Detection of Error Condition Without Action</a> </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AZYfG13KHGWFJqQfclBB-->Handle this exception or don't catch it at all. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AZYfG13KHGWFJqQfclBB&open=AZYfG13KHGWFJqQfclBB\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":4678,"end_line":4678,"start_column":13,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/101/instances","dismissal_approved_by":null},{"number":100,"created_at":"2025-07-08T10:37:21Z","updated_at":"2025-07-08T10:37:21Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/100","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/100","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S2486","severity":"warning","description":"Exceptions should not be ignored","name":"javascript:S2486","tags":["cwe","error-handling","suspicious"],"full_description":"Exceptions should not be ignored","help":"<h2>Why is this an issue?</h2>\n<p>When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nfunction f() {\n  try {\n    doSomething();\n  } catch (err) {\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nfunction f() {\n  try {\n    doSomething();\n  } catch (err) {\n    console.log(`Exception while doing something: ${err}`);\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\">Top 10 2021 Category A9 - Security Logging and\n  Monitoring Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">Top 10 2017 Category A10 -\n  Insufficient Logging &amp; Monitoring</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/390\">CWE-390 - Detection of Error Condition Without Action</a> </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AZYfG13KHGWFJqQfclBA-->Handle this exception or don't catch it at all. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AZYfG13KHGWFJqQfclBA&open=AZYfG13KHGWFJqQfclBA\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":4217,"end_line":4219,"start_column":9,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/100/instances","dismissal_approved_by":null},{"number":99,"created_at":"2025-07-08T10:37:21Z","updated_at":"2025-07-08T10:37:21Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/99","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/99","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDec7f6clWJnaWq7-->Extract the assignment of \"t\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDec7f6clWJnaWq7&open=AYHeFDec7f6clWJnaWq7\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":51,"end_line":51,"start_column":90,"end_column":91},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/99/instances","dismissal_approved_by":null},{"number":98,"created_at":"2025-07-08T10:37:21Z","updated_at":"2025-07-08T10:37:21Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/98","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/98","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDeh7f6clWJnaW_O-->Extract the assignment of \"CORNER[\"BOTTOM_LEFT\"]\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDeh7f6clWJnaW_O&open=AYHeFDeh7f6clWJnaW_O\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":5976,"end_line":5976,"start_column":38,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/98/instances","dismissal_approved_by":null},{"number":97,"created_at":"2025-07-08T10:37:21Z","updated_at":"2025-07-08T10:37:21Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/97","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/97","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDeh7f6clWJnaW_N-->Extract the assignment of \"CORNER[\"BOTTOM_RIGHT\"]\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDeh7f6clWJnaW_N&open=AYHeFDeh7f6clWJnaW_N\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":5975,"end_line":5975,"start_column":39,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/97/instances","dismissal_approved_by":null},{"number":96,"created_at":"2025-07-08T10:37:21Z","updated_at":"2025-07-08T10:37:21Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/96","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/96","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDeh7f6clWJnaW_M-->Extract the assignment of \"CORNER[\"TOP_RIGHT\"]\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDeh7f6clWJnaW_M&open=AYHeFDeh7f6clWJnaW_M\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":5974,"end_line":5974,"start_column":36,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/96/instances","dismissal_approved_by":null},{"number":95,"created_at":"2025-07-08T10:37:21Z","updated_at":"2025-07-08T10:37:21Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/95","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/95","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDeh7f6clWJnaW_L-->Extract the assignment of \"CORNER[\"TOP_LEFT\"]\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDeh7f6clWJnaW_L&open=AYHeFDeh7f6clWJnaW_L\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":5973,"end_line":5973,"start_column":35,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/95/instances","dismissal_approved_by":null},{"number":94,"created_at":"2025-07-08T10:37:21Z","updated_at":"2025-07-08T10:37:21Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/94","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/94","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDeh7f6clWJnaW-G-->Extract the assignment of \"this._cache[src]\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDeh7f6clWJnaW-G&open=AYHeFDeh7f6clWJnaW-G\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":5673,"end_line":5673,"start_column":35,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/94/instances","dismissal_approved_by":null},{"number":93,"created_at":"2025-07-08T10:37:21Z","updated_at":"2025-07-08T10:37:21Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/93","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/93","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDeh7f6clWJnaW9h-->Extract the assignment of \"PseudoElementType[\"AFTER\"]\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDeh7f6clWJnaW9h&open=AYHeFDeh7f6clWJnaW9h\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":5522,"end_line":5522,"start_column":54,"end_column":55},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/93/instances","dismissal_approved_by":null},{"number":92,"created_at":"2025-07-08T10:37:21Z","updated_at":"2025-07-08T10:37:21Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/92","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/92","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDeh7f6clWJnaW9g-->Extract the assignment of \"PseudoElementType[\"BEFORE\"]\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDeh7f6clWJnaW9g&open=AYHeFDeh7f6clWJnaW9g\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":5521,"end_line":5521,"start_column":55,"end_column":56},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/92/instances","dismissal_approved_by":null},{"number":91,"created_at":"2025-07-08T10:37:21Z","updated_at":"2025-07-08T10:37:21Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/91","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/91","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDeg7f6clWJnaW6e-->Extract the assignment of \"bk\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDeg7f6clWJnaW6e&open=AYHeFDeg7f6clWJnaW6e\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":4453,"end_line":4453,"start_column":21,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/91/instances","dismissal_approved_by":null},{"number":90,"created_at":"2025-07-08T10:37:21Z","updated_at":"2025-07-08T10:37:21Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/90","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/90","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDeg7f6clWJnaW5J-->Extract the assignment of \"bk\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDeg7f6clWJnaW5J&open=AYHeFDeg7f6clWJnaW5J\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":4145,"end_line":4145,"start_column":21,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/90/instances","dismissal_approved_by":null},{"number":89,"created_at":"2025-07-08T10:37:21Z","updated_at":"2025-07-08T10:37:21Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/89","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/89","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDec7f6clWJnaWq8-->Extract the assignment of \"t\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDec7f6clWJnaWq8&open=AYHeFDec7f6clWJnaWq8\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":51,"end_line":51,"start_column":139,"end_column":140},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/89/instances","dismissal_approved_by":null},{"number":88,"created_at":"2025-07-08T10:37:21Z","updated_at":"2025-07-08T10:37:21Z","url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/88","html_url":"https://github.com/MTES-MCT/histologe/security/code-scanning/88","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f17b219db7c5dc3bc24a51b9da425abe2ddae03a","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFDec7f6clWJnaWq0-->Extract the assignment of \"generator\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_histologe&issues=AYHeFDec7f6clWJnaWq0&open=AYHeFDec7f6clWJnaWq0\">SonarQube Cloud</a></p>"},"location":{"path":"public/js/screencapture.js","start_line":40,"end_line":40,"start_column":29,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/histologe/code-scanning/alerts/88/instances","dismissal_approved_by":null}]}]}