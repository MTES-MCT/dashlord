{"totalCount":5,"grade":"D","repositories":[{"url":"https://github.com/MTES-MCT/sparte","grade":"D","alerts":[{"number":54,"created_at":"2025-07-11T15:35:14Z","updated_at":"2025-07-15T13:53:36Z","url":"https://api.github.com/repos/MTES-MCT/sparte/code-scanning/alerts/54","html_url":"https://github.com/MTES-MCT/sparte/security/code-scanning/54","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/missing-workflow-permissions","severity":"warning","description":"Workflow does not contain permissions","name":"actions/missing-workflow-permissions","tags":["actions","external/cwe/cwe-275","maintainability","security"],"full_description":"Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.","help":"# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.1"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"5f110252810de048f8a14e80455f43fb43281314","message":{"text":"Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"},"location":{"path":".github/workflows/airflow_test.yml","start_line":11,"end_line":64,"start_column":5,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/sparte/code-scanning/alerts/54/instances","dismissal_approved_by":null},{"number":53,"created_at":"2025-06-25T11:56:13Z","updated_at":"2025-06-25T11:56:13Z","url":"https://api.github.com/repos/MTES-MCT/sparte/code-scanning/alerts/53","html_url":"https://github.com/MTES-MCT/sparte/security/code-scanning/53","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"secrets:S6698","severity":"warning","description":"PostgreSQL database passwords should not be disclosed","name":"secrets:S6698","tags":["cwe"],"full_description":"PostgreSQL database passwords should not be disclosed","help":"<p>Secret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.</p>\n<h2>Why is this an issue?</h2>\n<p>In most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.</p>\n<p>The trust issue can be more or less severe depending on the people’s role and entitlement.</p>\n<h3>What is the potential impact?</h3>\n<p>Passwords in PostgreSQL are used to authenticate users against the database engine. They are associated with user accounts that are granted\nspecific permissions over the database and its hosted data.</p>\n<p>If a PostgreSQL password leaks to an unintended audience, it can have serious consequences for the security of your database, the data stored\nwithin it, and the applications that rely on it.</p>\n<h4>Compromise of sensitive data</h4>\n<p>If the affected service is used to store or process personally identifiable information or other sensitive data, attackers knowing an\nauthentication secret could be able to access it. Depending on the type of data that is compromised, it could lead to privacy violations, identity\ntheft, financial loss, or other negative outcomes.</p>\n<p>In most cases, a company suffering a sensitive data compromise will face a reputational loss when the security issue is publicly disclosed.</p>\n<h4>Security downgrade</h4>\n<p>Applications relying on a PostgreSQL database instance can suffer a security downgrade if an access password is leaked to attackers. Depending on\nthe purposes the application uses the database for, consequences can range from low-severity issues, like defacement, to complete compromise.</p>\n<p>For example, if the PostgreSQL instance is used as part of the authentication process of an application, attackers with access to the database will\nlikely be able to bypass this security mechanism.</p>\n<h2>How to fix it</h2>\n<p><strong>Revoke the secret</strong></p>\n<p>Revoke any leaked secrets and remove them from the application source code.</p>\n<p>Before revoking the secret, ensure that no other applications or processes are using it. Other usages of the secret will also be impacted when the\nsecret is revoked.</p>\n<p><strong>Analyze recent secret use</strong></p>\n<p>When available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.</p>\n<p>This operation should be part of a global incident response process.</p>\n<p>By default, no connection information is logged by PostgreSQL server. The <code>log_connections</code> parameter must be set to <code>true</code>\nin the server configuration for this to happen.</p>\n<p><strong>Use a secret vault</strong></p>\n<p>A secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.</p>\n<p>Depending on the development platform and the leaked secret type, multiple solutions are currently available.</p>\n<p><strong>Never hard-code secrets, not even the default values</strong></p>\n<p>It is important that you do not hard-code secrets, even default values.</p>\n<p>First, hard-coded default secrets are often short and can be easily compromised even by attackers who do not have access to the code base.</p>\n<p>Second, hard-coded default secrets can cause problems if they need to be changed or replaced.</p>\n<p>And most importantly, there is always the possibility to accidentally set default secrets for production services, which can lead to security\nvulnerabilities and make production insecure by default.</p>\n<p>To minimize these risks, it is recommended to apply the above strategies, even for the default settings.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nuri = \"postgres://foouser:foopass@example.com/testdb\"\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport os\n\nuser = os.environ[\"PG_USER\"]\npassword = os.environ[\"PG_PASSWORD\"]\nuri = f\"postgres://{user}:{password}@example.com/testdb\"\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/798\">CWE-798 - Use of Hard-coded Credentials</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/259\">CWE-259 - Use of Hard-coded Password</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222642\">Application Security and\n  Development: V-222642</a> - The application must not contain embedded authentication data. </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> PostgreSQL Documentation - <a href=\"https://www.postgresql.org/docs/15/client-authentication.html\">Client Authentication</a> </li>\n  <li> PostgreSQL Documentation - <a href=\"https://www.postgresql.org/docs/current/runtime-config-logging.html\">Error Reporting and Logging</a> </li>\n</ul>","security_severity_level":"high"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"5f110252810de048f8a14e80455f43fb43281314","message":{"text":"<!--SONAR_ISSUE_KEY:AZehkmnvuoxmfkKApD-s-->Make sure this PostgreSQL database password gets changed and removed from the code. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_sparte&issues=AZehkmnvuoxmfkKApD-s&open=AZehkmnvuoxmfkKApD-s\">SonarQube Cloud</a></p>"},"location":{"path":".vscode/tasks.json","start_line":12,"end_line":12,"start_column":49,"end_column":57},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/sparte/code-scanning/alerts/53/instances","dismissal_approved_by":null},{"number":51,"created_at":"2025-05-19T13:46:06Z","updated_at":"2025-05-19T13:46:06Z","url":"https://api.github.com/repos/MTES-MCT/sparte/code-scanning/alerts/51","html_url":"https://github.com/MTES-MCT/sparte/security/code-scanning/51","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/missing-workflow-permissions","severity":"warning","description":"Workflow does not contain permissions","name":"actions/missing-workflow-permissions","tags":["actions","external/cwe/cwe-275","maintainability","security"],"full_description":"Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.","help":"# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.1"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"5f110252810de048f8a14e80455f43fb43281314","message":{"text":"Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"},"location":{"path":".github/workflows/pr.yml","start_line":44,"end_line":63,"start_column":5,"end_column":64},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/sparte/code-scanning/alerts/51/instances","dismissal_approved_by":null},{"number":50,"created_at":"2025-05-19T13:46:06Z","updated_at":"2025-05-19T13:46:06Z","url":"https://api.github.com/repos/MTES-MCT/sparte/code-scanning/alerts/50","html_url":"https://github.com/MTES-MCT/sparte/security/code-scanning/50","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/missing-workflow-permissions","severity":"warning","description":"Workflow does not contain permissions","name":"actions/missing-workflow-permissions","tags":["actions","external/cwe/cwe-275","maintainability","security"],"full_description":"Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.","help":"# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.1"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"5f110252810de048f8a14e80455f43fb43281314","message":{"text":"Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"},"location":{"path":".github/workflows/pr.yml","start_line":37,"end_line":43,"start_column":5,"end_column":3},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/sparte/code-scanning/alerts/50/instances","dismissal_approved_by":null},{"number":49,"created_at":"2025-05-19T13:46:06Z","updated_at":"2025-05-19T13:46:06Z","url":"https://api.github.com/repos/MTES-MCT/sparte/code-scanning/alerts/49","html_url":"https://github.com/MTES-MCT/sparte/security/code-scanning/49","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/missing-workflow-permissions","severity":"warning","description":"Workflow does not contain permissions","name":"actions/missing-workflow-permissions","tags":["actions","external/cwe/cwe-275","maintainability","security"],"full_description":"Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.","help":"# Actions Job and Workflow Permissions are not set\n\n## Description\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendations\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task:\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs)\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.1"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"5f110252810de048f8a14e80455f43fb43281314","message":{"text":"Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}"},"location":{"path":".github/workflows/deploy_airflow.yml","start_line":9,"end_line":27,"start_column":5,"end_column":90},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/sparte/code-scanning/alerts/49/instances","dismissal_approved_by":null}]}]}