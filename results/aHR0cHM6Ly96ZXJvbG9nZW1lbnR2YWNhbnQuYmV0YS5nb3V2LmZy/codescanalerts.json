{"totalCount":6,"grade":"D","repositories":[{"url":"https://github.com/MTES-MCT/zero-logement-vacant","grade":"D","alerts":[{"number":288,"created_at":"2025-07-22T13:48:17Z","updated_at":"2025-07-30T13:17:52Z","url":"https://api.github.com/repos/MTES-MCT/zero-logement-vacant/code-scanning/alerts/288","html_url":"https://github.com/MTES-MCT/zero-logement-vacant/security/code-scanning/288","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.3"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{\"language\":\"typescript\"}","category":".github/workflows/codeql-analysis.yml:analyze/language:typescript","state":"open","commit_sha":"02fea75229582cd493af52f5fc471d5ecee4dbf4","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"frontend/test/fixtures.ts","start_line":166,"end_line":166,"start_column":17,"end_column":29},"classifications":["test"]},"instances_url":"https://api.github.com/repos/MTES-MCT/zero-logement-vacant/code-scanning/alerts/288/instances","dismissal_approved_by":null},{"number":114,"created_at":"2025-07-15T00:07:57Z","updated_at":"2025-07-15T00:07:57Z","url":"https://api.github.com/repos/MTES-MCT/zero-logement-vacant/code-scanning/alerts/114","html_url":"https://github.com/MTES-MCT/zero-logement-vacant/security/code-scanning/114","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"docker:S6437","severity":"warning","description":"Credentials should not be hard-coded","name":"docker:S6437","tags":["cwe"],"full_description":"Credentials should not be hard-coded","help":"<p>Secret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.</p>\n<h2>Why is this an issue?</h2>\n<p>In most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.</p>\n<p>The trust issue can be more or less severe depending on the people’s role and entitlement.</p>\n<p>In Dockerfiles, hard-coded secrets and secrets passed through as variables or created at build-time will cause security risks. The secret\ninformation can be exposed either via the container environment, the image metadata, or the build environment logs.</p>\n<h3>What is the potential impact?</h3>\n<p>The consequences vary greatly depending on the situation and the secret-exposed audience. Still, two main scenarios should be considered.</p>\n<h4>Financial loss</h4>\n<p>Financial losses can occur when a secret is used to access a paid third-party-provided service and is disclosed as part of the source code of\nclient applications. Having the secret, each user of the application will be able to use it without limit to use the third party service to their own\nneed, including in a way that was not expected.</p>\n<p>This additional use of the secret will lead to added costs with the service provider.</p>\n<p>Moreover, when rate or volume limiting is set up on the provider side, this additional use can prevent the regular operation of the affected\napplication. This might result in a partial denial of service for all the application’s users.</p>\n<h4>Application’s security downgrade</h4>\n<p>A downgrade can happen when the disclosed secret is used to protect security-sensitive assets or features of the application. Depending on the\naffected asset or feature, the practical impact can range from a sensitive information leak to a complete takeover of the application, its hosting\nserver or another linked component.</p>\n<p>For example, an application that would disclose a secret used to sign user authentication tokens would be at risk of user identity impersonation.\nAn attacker accessing the leaked secret could sign session tokens for arbitrary users and take over their privileges and entitlements.</p>\n<h3>Exceptions</h3>\n<p>In multi-stage builds, the rule only scans instructions that are part of the final image.</p>\n<h2>How to fix it</h2>\n<p>Best practices recommend using a secret vault for all secrets that must be accessed at container runtime. This will ensure the secret’s security\nand prevent any further unexpected disclosure. Depending on the development platform and the leaked secret type, multiple solutions are currently\navailable.</p>\n<p>For all secrets that must be accessed at image build time, it is recommended to rely on Docker Buildkit’s secret mount options. This will prevent\nsecrets from being disclosed in image’s metadata and build logs.</p>\n<p>Additionally, investigations and remediation actions should be conducted to ensure the current and future security of the infrastructure.</p>\n<p><strong>Revoke the secret</strong></p>\n<p>Revoke any leaked secrets and remove them from the application source code.</p>\n<p>Before revoking the secret, ensure that no other applications or processes are using it. Other usages of the secret will also be impacted when the\nsecret is revoked.</p>\n<p><strong>Analyze recent secret use</strong></p>\n<p>When available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.</p>\n<p>This operation should be part of a global incident response process.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>The following code sample generates a new SSH private key that will be stored in the generated image. This key should be considered as compromised.\nMoreover, the SSH key encryption passphrase is also hardcoded.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nFROM example\n\n# Noncompliant\nRUN ssh-keygen -N \"passphrase\" -t rsa -b 2048 -f /etc/ssh/rsa_key\n\nRUN /example.sh --ssh /etc/ssh/rsa_key\n</pre>\n<p>The following code sample uses a seemingly hidden password which is actually leaked in the image metadata after the build.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nFROM example\nARG PASSWORD\n\n# Noncompliant\nRUN wget --user=guest --password=\"$PASSWORD\" https://example.com\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nFROM example\n\nRUN --mount=type=secret,id=ssh,target=/etc/ssh/rsa_key \\\n    /example.sh --ssh /etc/ssh/rsa_key\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nFROM example\n\nRUN --mount=type=secret,id=wget,target=/home/user/.wgetrc \\\n    wget --user=guest https://example.com\n</pre>\n<p>For runtime secrets, best practices recommend relying on a vault service to pass secret information to the containers. Docker environment provides\nSwarm services that implement such a feature.</p>\n<p>If such an option can not be considered, store the runtime secrets in an <a href=\"https://docs.docker.com/compose/env-file/\">environment file</a>\nsuch as <code>.env</code> and then start the container with the <a\nhref=\"https://docs.docker.com/engine/reference/commandline/run/#env\"><code>--env-file</code></a> argument:</p>\n<pre>\ndocker run --env-file .env myImage\n</pre>\n<p>It is then important to ensure that the environment files are securely stored and generated.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> AWS Documentation - <a href=\"https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html\">What is AWS Secrets Manager</a> </li>\n  <li> Azure Documentation - <a href=\"https://learn.microsoft.com/en-us/azure/key-vault/\">Azure Key Vault</a> </li>\n  <li> Google Cloud - <a href=\"https://cloud.google.com/secret-manager/docs\">Secret Manager documentation</a> </li>\n  <li> HashiCorp Developer - <a href=\"https://developer.hashicorp.com/vault/docs\">Vault Documentation</a> </li>\n  <li> Docker Documentation - <a href=\"https://docs.docker.com/engine/swarm/secrets/\">Manage sensitive data with Docker secrets</a> </li>\n  <li> Docker Documentation - <a href=\"https://docs.docker.com/engine/reference/builder/#run---mounttypesecret\">RUN command secrets mount points</a>\n  </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/522\">CWE-522 - Insufficiently Protected Credentials</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/798\">CWE-798 - Use of Hard-coded Credentials</a> </li>\n</ul>","security_severity_level":"high"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"02fea75229582cd493af52f5fc471d5ecee4dbf4","message":{"text":"<!--SONAR_ISSUE_KEY:AZgLaLiFf1xaVfjBZ8-v-->Change this code not to store a secret in the image. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_zero-logement-vacant&issues=AZgLaLiFf1xaVfjBZ8-v&open=AZgLaLiFf1xaVfjBZ8-v\">SonarQube Cloud</a></p>"},"location":{"path":".docker/dagster/Dockerfile","start_line":42,"end_line":42,"start_column":5,"end_column":76},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/zero-logement-vacant/code-scanning/alerts/114/instances","dismissal_approved_by":null},{"number":100,"created_at":"2025-03-19T15:07:34Z","updated_at":"2025-03-19T15:07:35Z","url":"https://api.github.com/repos/MTES-MCT/zero-logement-vacant/code-scanning/alerts/100","html_url":"https://github.com/MTES-MCT/zero-logement-vacant/security/code-scanning/100","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"secrets:S6698","severity":"warning","description":"PostgreSQL database passwords should not be disclosed","name":"secrets:S6698","tags":["cwe"],"full_description":"PostgreSQL database passwords should not be disclosed","help":"<p>Secret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.</p>\n<h2>Why is this an issue?</h2>\n<p>In most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.</p>\n<p>The trust issue can be more or less severe depending on the people’s role and entitlement.</p>\n<h3>What is the potential impact?</h3>\n<p>Passwords in PostgreSQL are used to authenticate users against the database engine. They are associated with user accounts that are granted\nspecific permissions over the database and its hosted data.</p>\n<p>If a PostgreSQL password leaks to an unintended audience, it can have serious consequences for the security of your database, the data stored\nwithin it, and the applications that rely on it.</p>\n<h4>Compromise of sensitive data</h4>\n<p>If the affected service is used to store or process personally identifiable information or other sensitive data, attackers knowing an\nauthentication secret could be able to access it. Depending on the type of data that is compromised, it could lead to privacy violations, identity\ntheft, financial loss, or other negative outcomes.</p>\n<p>In most cases, a company suffering a sensitive data compromise will face a reputational loss when the security issue is publicly disclosed.</p>\n<h4>Security downgrade</h4>\n<p>Applications relying on a PostgreSQL database instance can suffer a security downgrade if an access password is leaked to attackers. Depending on\nthe purposes the application uses the database for, consequences can range from low-severity issues, like defacement, to complete compromise.</p>\n<p>For example, if the PostgreSQL instance is used as part of the authentication process of an application, attackers with access to the database will\nlikely be able to bypass this security mechanism.</p>\n<h2>How to fix it</h2>\n<p><strong>Revoke the secret</strong></p>\n<p>Revoke any leaked secrets and remove them from the application source code.</p>\n<p>Before revoking the secret, ensure that no other applications or processes are using it. Other usages of the secret will also be impacted when the\nsecret is revoked.</p>\n<p><strong>Analyze recent secret use</strong></p>\n<p>When available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.</p>\n<p>This operation should be part of a global incident response process.</p>\n<p>By default, no connection information is logged by PostgreSQL server. The <code>log_connections</code> parameter must be set to <code>true</code>\nin the server configuration for this to happen.</p>\n<p><strong>Use a secret vault</strong></p>\n<p>A secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.</p>\n<p>Depending on the development platform and the leaked secret type, multiple solutions are currently available.</p>\n<p><strong>Never hard-code secrets, not even the default values</strong></p>\n<p>It is important that you do not hard-code secrets, even default values.</p>\n<p>First, hard-coded default secrets are often short and can be easily compromised even by attackers who do not have access to the code base.</p>\n<p>Second, hard-coded default secrets can cause problems if they need to be changed or replaced.</p>\n<p>And most importantly, there is always the possibility to accidentally set default secrets for production services, which can lead to security\nvulnerabilities and make production insecure by default.</p>\n<p>To minimize these risks, it is recommended to apply the above strategies, even for the default settings.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nuri = \"postgres://foouser:foopass@example.com/testdb\"\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport os\n\nuser = os.environ[\"PG_USER\"]\npassword = os.environ[\"PG_PASSWORD\"]\nuri = f\"postgres://{user}:{password}@example.com/testdb\"\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/798\">CWE-798 - Use of Hard-coded Credentials</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/259\">CWE-259 - Use of Hard-coded Password</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222642\">Application Security and\n  Development: V-222642</a> - The application must not contain embedded authentication data. </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> PostgreSQL Documentation - <a href=\"https://www.postgresql.org/docs/15/client-authentication.html\">Client Authentication</a> </li>\n  <li> PostgreSQL Documentation - <a href=\"https://www.postgresql.org/docs/current/runtime-config-logging.html\">Error Reporting and Logging</a> </li>\n</ul>","security_severity_level":"high"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"02fea75229582cd493af52f5fc471d5ecee4dbf4","message":{"text":"<!--SONAR_ISSUE_KEY:AZWu8YjUmO92-uPJCGu5-->Make sure this PostgreSQL database password gets changed and removed from the code. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_zero-logement-vacant&issues=AZWu8YjUmO92-uPJCGu5&open=AZWu8YjUmO92-uPJCGu5\">SonarQube Cloud</a></p>"},"location":{"path":"queue/src/config.ts","start_line":88,"end_line":88,"start_column":34,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/zero-logement-vacant/code-scanning/alerts/100/instances","dismissal_approved_by":null},{"number":99,"created_at":"2025-03-19T15:07:34Z","updated_at":"2025-03-19T15:07:35Z","url":"https://api.github.com/repos/MTES-MCT/zero-logement-vacant/code-scanning/alerts/99","html_url":"https://github.com/MTES-MCT/zero-logement-vacant/security/code-scanning/99","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"secrets:S6698","severity":"warning","description":"PostgreSQL database passwords should not be disclosed","name":"secrets:S6698","tags":["cwe"],"full_description":"PostgreSQL database passwords should not be disclosed","help":"<p>Secret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.</p>\n<h2>Why is this an issue?</h2>\n<p>In most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.</p>\n<p>The trust issue can be more or less severe depending on the people’s role and entitlement.</p>\n<h3>What is the potential impact?</h3>\n<p>Passwords in PostgreSQL are used to authenticate users against the database engine. They are associated with user accounts that are granted\nspecific permissions over the database and its hosted data.</p>\n<p>If a PostgreSQL password leaks to an unintended audience, it can have serious consequences for the security of your database, the data stored\nwithin it, and the applications that rely on it.</p>\n<h4>Compromise of sensitive data</h4>\n<p>If the affected service is used to store or process personally identifiable information or other sensitive data, attackers knowing an\nauthentication secret could be able to access it. Depending on the type of data that is compromised, it could lead to privacy violations, identity\ntheft, financial loss, or other negative outcomes.</p>\n<p>In most cases, a company suffering a sensitive data compromise will face a reputational loss when the security issue is publicly disclosed.</p>\n<h4>Security downgrade</h4>\n<p>Applications relying on a PostgreSQL database instance can suffer a security downgrade if an access password is leaked to attackers. Depending on\nthe purposes the application uses the database for, consequences can range from low-severity issues, like defacement, to complete compromise.</p>\n<p>For example, if the PostgreSQL instance is used as part of the authentication process of an application, attackers with access to the database will\nlikely be able to bypass this security mechanism.</p>\n<h2>How to fix it</h2>\n<p><strong>Revoke the secret</strong></p>\n<p>Revoke any leaked secrets and remove them from the application source code.</p>\n<p>Before revoking the secret, ensure that no other applications or processes are using it. Other usages of the secret will also be impacted when the\nsecret is revoked.</p>\n<p><strong>Analyze recent secret use</strong></p>\n<p>When available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.</p>\n<p>This operation should be part of a global incident response process.</p>\n<p>By default, no connection information is logged by PostgreSQL server. The <code>log_connections</code> parameter must be set to <code>true</code>\nin the server configuration for this to happen.</p>\n<p><strong>Use a secret vault</strong></p>\n<p>A secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.</p>\n<p>Depending on the development platform and the leaked secret type, multiple solutions are currently available.</p>\n<p><strong>Never hard-code secrets, not even the default values</strong></p>\n<p>It is important that you do not hard-code secrets, even default values.</p>\n<p>First, hard-coded default secrets are often short and can be easily compromised even by attackers who do not have access to the code base.</p>\n<p>Second, hard-coded default secrets can cause problems if they need to be changed or replaced.</p>\n<p>And most importantly, there is always the possibility to accidentally set default secrets for production services, which can lead to security\nvulnerabilities and make production insecure by default.</p>\n<p>To minimize these risks, it is recommended to apply the above strategies, even for the default settings.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nuri = \"postgres://foouser:foopass@example.com/testdb\"\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport os\n\nuser = os.environ[\"PG_USER\"]\npassword = os.environ[\"PG_PASSWORD\"]\nuri = f\"postgres://{user}:{password}@example.com/testdb\"\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/798\">CWE-798 - Use of Hard-coded Credentials</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/259\">CWE-259 - Use of Hard-coded Password</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222642\">Application Security and\n  Development: V-222642</a> - The application must not contain embedded authentication data. </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> PostgreSQL Documentation - <a href=\"https://www.postgresql.org/docs/15/client-authentication.html\">Client Authentication</a> </li>\n  <li> PostgreSQL Documentation - <a href=\"https://www.postgresql.org/docs/current/runtime-config-logging.html\">Error Reporting and Logging</a> </li>\n</ul>","security_severity_level":"high"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"02fea75229582cd493af52f5fc471d5ecee4dbf4","message":{"text":"<!--SONAR_ISSUE_KEY:AZWu8YJ_mO92-uPJCGpM-->Make sure this PostgreSQL database password gets changed and removed from the code. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_zero-logement-vacant&issues=AZWu8YJ_mO92-uPJCGpM&open=AZWu8YJ_mO92-uPJCGpM\">SonarQube Cloud</a></p>"},"location":{"path":"server/src/infra/config.ts","start_line":251,"end_line":251,"start_column":34,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/zero-logement-vacant/code-scanning/alerts/99/instances","dismissal_approved_by":null},{"number":98,"created_at":"2025-03-19T15:07:34Z","updated_at":"2025-03-19T15:07:35Z","url":"https://api.github.com/repos/MTES-MCT/zero-logement-vacant/code-scanning/alerts/98","html_url":"https://github.com/MTES-MCT/zero-logement-vacant/security/code-scanning/98","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"docker:S6437","severity":"warning","description":"Credentials should not be hard-coded","name":"docker:S6437","tags":["cwe"],"full_description":"Credentials should not be hard-coded","help":"<p>Secret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.</p>\n<h2>Why is this an issue?</h2>\n<p>In most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.</p>\n<p>The trust issue can be more or less severe depending on the people’s role and entitlement.</p>\n<p>In Dockerfiles, hard-coded secrets and secrets passed through as variables or created at build-time will cause security risks. The secret\ninformation can be exposed either via the container environment, the image metadata, or the build environment logs.</p>\n<h3>What is the potential impact?</h3>\n<p>The consequences vary greatly depending on the situation and the secret-exposed audience. Still, two main scenarios should be considered.</p>\n<h4>Financial loss</h4>\n<p>Financial losses can occur when a secret is used to access a paid third-party-provided service and is disclosed as part of the source code of\nclient applications. Having the secret, each user of the application will be able to use it without limit to use the third party service to their own\nneed, including in a way that was not expected.</p>\n<p>This additional use of the secret will lead to added costs with the service provider.</p>\n<p>Moreover, when rate or volume limiting is set up on the provider side, this additional use can prevent the regular operation of the affected\napplication. This might result in a partial denial of service for all the application’s users.</p>\n<h4>Application’s security downgrade</h4>\n<p>A downgrade can happen when the disclosed secret is used to protect security-sensitive assets or features of the application. Depending on the\naffected asset or feature, the practical impact can range from a sensitive information leak to a complete takeover of the application, its hosting\nserver or another linked component.</p>\n<p>For example, an application that would disclose a secret used to sign user authentication tokens would be at risk of user identity impersonation.\nAn attacker accessing the leaked secret could sign session tokens for arbitrary users and take over their privileges and entitlements.</p>\n<h3>Exceptions</h3>\n<p>In multi-stage builds, the rule only scans instructions that are part of the final image.</p>\n<h2>How to fix it</h2>\n<p>Best practices recommend using a secret vault for all secrets that must be accessed at container runtime. This will ensure the secret’s security\nand prevent any further unexpected disclosure. Depending on the development platform and the leaked secret type, multiple solutions are currently\navailable.</p>\n<p>For all secrets that must be accessed at image build time, it is recommended to rely on Docker Buildkit’s secret mount options. This will prevent\nsecrets from being disclosed in image’s metadata and build logs.</p>\n<p>Additionally, investigations and remediation actions should be conducted to ensure the current and future security of the infrastructure.</p>\n<p><strong>Revoke the secret</strong></p>\n<p>Revoke any leaked secrets and remove them from the application source code.</p>\n<p>Before revoking the secret, ensure that no other applications or processes are using it. Other usages of the secret will also be impacted when the\nsecret is revoked.</p>\n<p><strong>Analyze recent secret use</strong></p>\n<p>When available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.</p>\n<p>This operation should be part of a global incident response process.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>The following code sample generates a new SSH private key that will be stored in the generated image. This key should be considered as compromised.\nMoreover, the SSH key encryption passphrase is also hardcoded.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nFROM example\n\n# Noncompliant\nRUN ssh-keygen -N \"passphrase\" -t rsa -b 2048 -f /etc/ssh/rsa_key\n\nRUN /example.sh --ssh /etc/ssh/rsa_key\n</pre>\n<p>The following code sample uses a seemingly hidden password which is actually leaked in the image metadata after the build.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nFROM example\nARG PASSWORD\n\n# Noncompliant\nRUN wget --user=guest --password=\"$PASSWORD\" https://example.com\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nFROM example\n\nRUN --mount=type=secret,id=ssh,target=/etc/ssh/rsa_key \\\n    /example.sh --ssh /etc/ssh/rsa_key\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nFROM example\n\nRUN --mount=type=secret,id=wget,target=/home/user/.wgetrc \\\n    wget --user=guest https://example.com\n</pre>\n<p>For runtime secrets, best practices recommend relying on a vault service to pass secret information to the containers. Docker environment provides\nSwarm services that implement such a feature.</p>\n<p>If such an option can not be considered, store the runtime secrets in an <a href=\"https://docs.docker.com/compose/env-file/\">environment file</a>\nsuch as <code>.env</code> and then start the container with the <a\nhref=\"https://docs.docker.com/engine/reference/commandline/run/#env\"><code>--env-file</code></a> argument:</p>\n<pre>\ndocker run --env-file .env myImage\n</pre>\n<p>It is then important to ensure that the environment files are securely stored and generated.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> AWS Documentation - <a href=\"https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html\">What is AWS Secrets Manager</a> </li>\n  <li> Azure Documentation - <a href=\"https://learn.microsoft.com/en-us/azure/key-vault/\">Azure Key Vault</a> </li>\n  <li> Google Cloud - <a href=\"https://cloud.google.com/secret-manager/docs\">Secret Manager documentation</a> </li>\n  <li> HashiCorp Developer - <a href=\"https://developer.hashicorp.com/vault/docs\">Vault Documentation</a> </li>\n  <li> Docker Documentation - <a href=\"https://docs.docker.com/engine/swarm/secrets/\">Manage sensitive data with Docker secrets</a> </li>\n  <li> Docker Documentation - <a href=\"https://docs.docker.com/engine/reference/builder/#run---mounttypesecret\">RUN command secrets mount points</a>\n  </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/522\">CWE-522 - Insufficiently Protected Credentials</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/798\">CWE-798 - Use of Hard-coded Credentials</a> </li>\n</ul>","security_severity_level":"high"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"02fea75229582cd493af52f5fc471d5ecee4dbf4","message":{"text":"<!--SONAR_ISSUE_KEY:AZWu8YeXmO92-uPJCGuR-->Change this code not to store a secret in the image. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_zero-logement-vacant&issues=AZWu8YeXmO92-uPJCGuR&open=AZWu8YeXmO92-uPJCGuR\">SonarQube Cloud</a></p>"},"location":{"path":"analytics/dagster/Dockerfile","start_line":39,"end_line":39,"start_column":5,"end_column":76},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/zero-logement-vacant/code-scanning/alerts/98/instances","dismissal_approved_by":null},{"number":97,"created_at":"2025-03-19T15:07:34Z","updated_at":"2025-03-19T15:07:35Z","url":"https://api.github.com/repos/MTES-MCT/zero-logement-vacant/code-scanning/alerts/97","html_url":"https://github.com/MTES-MCT/zero-logement-vacant/security/code-scanning/97","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"secrets:S6698","severity":"warning","description":"PostgreSQL database passwords should not be disclosed","name":"secrets:S6698","tags":["cwe"],"full_description":"PostgreSQL database passwords should not be disclosed","help":"<p>Secret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.</p>\n<h2>Why is this an issue?</h2>\n<p>In most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.</p>\n<p>The trust issue can be more or less severe depending on the people’s role and entitlement.</p>\n<h3>What is the potential impact?</h3>\n<p>Passwords in PostgreSQL are used to authenticate users against the database engine. They are associated with user accounts that are granted\nspecific permissions over the database and its hosted data.</p>\n<p>If a PostgreSQL password leaks to an unintended audience, it can have serious consequences for the security of your database, the data stored\nwithin it, and the applications that rely on it.</p>\n<h4>Compromise of sensitive data</h4>\n<p>If the affected service is used to store or process personally identifiable information or other sensitive data, attackers knowing an\nauthentication secret could be able to access it. Depending on the type of data that is compromised, it could lead to privacy violations, identity\ntheft, financial loss, or other negative outcomes.</p>\n<p>In most cases, a company suffering a sensitive data compromise will face a reputational loss when the security issue is publicly disclosed.</p>\n<h4>Security downgrade</h4>\n<p>Applications relying on a PostgreSQL database instance can suffer a security downgrade if an access password is leaked to attackers. Depending on\nthe purposes the application uses the database for, consequences can range from low-severity issues, like defacement, to complete compromise.</p>\n<p>For example, if the PostgreSQL instance is used as part of the authentication process of an application, attackers with access to the database will\nlikely be able to bypass this security mechanism.</p>\n<h2>How to fix it</h2>\n<p><strong>Revoke the secret</strong></p>\n<p>Revoke any leaked secrets and remove them from the application source code.</p>\n<p>Before revoking the secret, ensure that no other applications or processes are using it. Other usages of the secret will also be impacted when the\nsecret is revoked.</p>\n<p><strong>Analyze recent secret use</strong></p>\n<p>When available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.</p>\n<p>This operation should be part of a global incident response process.</p>\n<p>By default, no connection information is logged by PostgreSQL server. The <code>log_connections</code> parameter must be set to <code>true</code>\nin the server configuration for this to happen.</p>\n<p><strong>Use a secret vault</strong></p>\n<p>A secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.</p>\n<p>Depending on the development platform and the leaked secret type, multiple solutions are currently available.</p>\n<p><strong>Never hard-code secrets, not even the default values</strong></p>\n<p>It is important that you do not hard-code secrets, even default values.</p>\n<p>First, hard-coded default secrets are often short and can be easily compromised even by attackers who do not have access to the code base.</p>\n<p>Second, hard-coded default secrets can cause problems if they need to be changed or replaced.</p>\n<p>And most importantly, there is always the possibility to accidentally set default secrets for production services, which can lead to security\nvulnerabilities and make production insecure by default.</p>\n<p>To minimize these risks, it is recommended to apply the above strategies, even for the default settings.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nuri = \"postgres://foouser:foopass@example.com/testdb\"\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport os\n\nuser = os.environ[\"PG_USER\"]\npassword = os.environ[\"PG_PASSWORD\"]\nuri = f\"postgres://{user}:{password}@example.com/testdb\"\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/798\">CWE-798 - Use of Hard-coded Credentials</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/259\">CWE-259 - Use of Hard-coded Password</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222642\">Application Security and\n  Development: V-222642</a> - The application must not contain embedded authentication data. </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> PostgreSQL Documentation - <a href=\"https://www.postgresql.org/docs/15/client-authentication.html\">Client Authentication</a> </li>\n  <li> PostgreSQL Documentation - <a href=\"https://www.postgresql.org/docs/current/runtime-config-logging.html\">Error Reporting and Logging</a> </li>\n</ul>","security_severity_level":"high"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"02fea75229582cd493af52f5fc471d5ecee4dbf4","message":{"text":"<!--SONAR_ISSUE_KEY:AZWu8Ye7mO92-uPJCGud-->Make sure this PostgreSQL database password gets changed and removed from the code. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_zero-logement-vacant&issues=AZWu8Ye7mO92-uPJCGud&open=AZWu8Ye7mO92-uPJCGud\">SonarQube Cloud</a></p>"},"location":{"path":"packages/api-sdk/src/sdk.ts","start_line":45,"end_line":45,"start_column":44,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/zero-logement-vacant/code-scanning/alerts/97/instances","dismissal_approved_by":null}]}]}