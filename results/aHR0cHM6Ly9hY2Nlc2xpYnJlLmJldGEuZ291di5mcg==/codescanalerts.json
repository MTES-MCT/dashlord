{"totalCount":1,"grade":"F","repositories":[{"url":"https://github.com/MTES-MCT/acceslibre","grade":"F","alerts":[{"number":61,"created_at":"2025-04-07T17:15:22Z","updated_at":"2025-04-09T19:14:10Z","url":"https://api.github.com/repos/MTES-MCT/acceslibre/code-scanning/alerts/61","html_url":"https://github.com/MTES-MCT/acceslibre/security/code-scanning/61","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/clear-text-storage-of-sensitive-data","severity":"error","description":"Clear text storage of sensitive information","name":"js/clear-text-storage-of-sensitive-data","tags":["external/cwe/cwe-312","external/cwe/cwe-315","external/cwe/cwe-359","security"],"full_description":"Sensitive information stored without encryption or hashing can expose it to an attacker.","help":"# Clear text storage of sensitive information\nSensitive information that is stored unencrypted is accessible to an attacker who gains access to the storage. This is particularly important for cookies, which are stored on the machine of the end-user.\n\n\n## Recommendation\nEnsure that sensitive information is always encrypted before being stored. If possible, avoid placing sensitive information in cookies altogether. Instead, prefer storing, in the cookie, a key that can be used to look up the sensitive information.\n\nIn general, decrypt sensitive information only at the point where it is necessary for it to be used in cleartext.\n\nBe aware that external processes often store the `standard out` and `standard error` streams of the application, causing logged sensitive information to be stored as well.\n\n\n## Example\nThe following example code stores user credentials (in this case, their password) in a cookie in plain text:\n\n\n```javascript\nvar express = require('express');\n\nvar app = express();\napp.get('/remember-password', function (req, res) {\n  let pw = req.param(\"current_password\");\n  // BAD: Setting a cookie value with cleartext sensitive data.\n  res.cookie(\"password\", pw);\n});\n\n```\nInstead, the credentials should be encrypted, for instance by using the Node.js `crypto` module:\n\n\n```javascript\nvar express = require('express');\nvar crypto = require('crypto'),\n    password = getPassword();\n\nfunction encrypt(text){\n  var cipher = crypto.createCipher('aes-256-ctr', password);\n  return cipher.update(text, 'utf8', 'hex') + cipher.final('hex');\n}\n\nvar app = express();\napp.get('/remember-password', function (req, res) {\n  let pw = req.param(\"current_password\");\n  // GOOD: Encoding the value before setting it.\n  res.cookie(\"password\", encrypt(pw));\n});\n\n```\n\n## References\n* M. Dowd, J. McDonald and J. Schuhm, *The Art of Software Security Assessment*, 1st Edition, Chapter 2 - 'Common Vulnerabilities of Encryption', p. 43. Addison Wesley, 2006.\n* M. Howard and D. LeBlanc, *Writing Secure Code*, 2nd Edition, Chapter 9 - 'Protecting Secret Data', p. 299. Microsoft, 2002.\n* Common Weakness Enumeration: [CWE-312](https://cwe.mitre.org/data/definitions/312.html).\n* Common Weakness Enumeration: [CWE-315](https://cwe.mitre.org/data/definitions/315.html).\n* Common Weakness Enumeration: [CWE-359](https://cwe.mitre.org/data/definitions/359.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.21.1"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":".github/workflows/codeql-analysis.yml:analyze","environment":"{}","category":".github/workflows/codeql-analysis.yml:analyze","state":"open","commit_sha":"40bdee42f7ac599a79407e9655c6412d2df0533c","message":{"text":"This stores sensitive data returned by an access to latitude as clear text.\nThis stores sensitive data returned by an access to longitude as clear text."},"location":{"path":"static/js/api.js","start_line":88,"end_line":88,"start_column":31,"end_column":50},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/acceslibre/code-scanning/alerts/61/instances","dismissal_approved_by":null}]}]}