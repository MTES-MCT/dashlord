{"totalCount":10,"grade":"F","repositories":[{"url":"https://github.com/MTES-MCT/mobilic","grade":"A","alerts":[]},{"url":"https://github.com/MTES-MCT/mobilic-api","grade":"F","alerts":[{"number":146,"created_at":"2025-08-21T15:08:18Z","updated_at":"2025-08-21T15:08:18Z","url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/146","html_url":"https://github.com/MTES-MCT/mobilic-api/security/code-scanning/146","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"python:S7608","severity":"warning","description":"S3 operations should verify bucket ownership using ExpectedBucketOwner parameter","name":"python:S7608","tags":["aws","s3"],"full_description":"S3 operations should verify bucket ownership using ExpectedBucketOwner parameter","help":"<p>This rule raises an issue when S3 operations are performed without verifying bucket ownership using the <code>ExpectedBucketOwner</code>\nparameter.</p>\n<h2>Why is this an issue?</h2>\n<p>When working with S3 buckets in AWS applications, it’s essential to verify that you’re accessing the correct bucket owned by the expected AWS\naccount. Without proper bucket owner verification, applications may inadvertently interact with unintended S3 buckets due to configuration errors,\nnaming conflicts, or security misconfigurations. This is particularly critical in multi-account AWS environments where bucket names might be similar\nacross different accounts, or when bucket names are dynamically constructed based on configuration values. The <code>ExpectedBucketOwner</code>\nparameter provides a safety mechanism that ensures operations only proceed when the bucket is owned by the specified AWS account ID.</p>\n<h3>What is the potential impact?</h3>\n<p>Failing to verify bucket ownership exposes systems to security threats. Applications may process data in unintended locations, including test\nenvironments or malicious buckets.</p>\n<p>Data integrity suffers when operations target wrong buckets. Sensitive information could be exposed or corrupted without proper verification.</p>\n<h2>How to fix it in Boto3</h2>\n<p>Add the <code>ExpectedBucketOwner</code> parameter to your S3 operations to verify the bucket owner before performing any operations. This\nparameter should contain the AWS account ID that owns the bucket you expect to access.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport boto3\n\ns3_client = boto3.client('s3')\n\ndef lambda_handler(event, context):\n    bucket_name = 'my-production-bucket'\n\n    response = s3_client.get_object(  # Noncompliant\n        Bucket=bucket_name,\n        Key='data.json'\n    )\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport boto3\n\ns3_client = boto3.client('s3')\n\ndef lambda_handler(event, context):\n    bucket_name = 'my-production-bucket'\n    expected_owner = '123456789012'\n\n    response = s3_client.get_object(\n        Bucket=bucket_name,\n        Key='data.json',\n        ExpectedBucketOwner=expected_owner  # Compliant\n    )\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> boto3 Documentation - <a\n  href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.get_object\">get_object</a> </li>\n  <li> AWS Documentation - <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-owner-condition.html\">Verifying bucket ownership with\n  bucket owner condition</a> </li>\n</ul>","security_severity_level":"high"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"ed799a0c8aa78cf8b538d6431f7dadf43bdf451a","message":{"text":"<!--SONAR_ISSUE_KEY:AZjM8g6k-1DnqWXn7bRg-->Add the 'ExpectedBucketOwner' parameter to verify S3 bucket ownership. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_mobilic-api&issues=AZjM8g6k-1DnqWXn7bRg&open=AZjM8g6k-1DnqWXn7bRg\">SonarQube Cloud</a></p>"},"location":{"path":"app/helpers/s3.py","start_line":107,"end_line":107,"start_column":9,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/146/instances","dismissal_approved_by":null},{"number":145,"created_at":"2025-08-21T15:08:18Z","updated_at":"2025-08-21T15:08:18Z","url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/145","html_url":"https://github.com/MTES-MCT/mobilic-api/security/code-scanning/145","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"python:S7608","severity":"warning","description":"S3 operations should verify bucket ownership using ExpectedBucketOwner parameter","name":"python:S7608","tags":["aws","s3"],"full_description":"S3 operations should verify bucket ownership using ExpectedBucketOwner parameter","help":"<p>This rule raises an issue when S3 operations are performed without verifying bucket ownership using the <code>ExpectedBucketOwner</code>\nparameter.</p>\n<h2>Why is this an issue?</h2>\n<p>When working with S3 buckets in AWS applications, it’s essential to verify that you’re accessing the correct bucket owned by the expected AWS\naccount. Without proper bucket owner verification, applications may inadvertently interact with unintended S3 buckets due to configuration errors,\nnaming conflicts, or security misconfigurations. This is particularly critical in multi-account AWS environments where bucket names might be similar\nacross different accounts, or when bucket names are dynamically constructed based on configuration values. The <code>ExpectedBucketOwner</code>\nparameter provides a safety mechanism that ensures operations only proceed when the bucket is owned by the specified AWS account ID.</p>\n<h3>What is the potential impact?</h3>\n<p>Failing to verify bucket ownership exposes systems to security threats. Applications may process data in unintended locations, including test\nenvironments or malicious buckets.</p>\n<p>Data integrity suffers when operations target wrong buckets. Sensitive information could be exposed or corrupted without proper verification.</p>\n<h2>How to fix it in Boto3</h2>\n<p>Add the <code>ExpectedBucketOwner</code> parameter to your S3 operations to verify the bucket owner before performing any operations. This\nparameter should contain the AWS account ID that owns the bucket you expect to access.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport boto3\n\ns3_client = boto3.client('s3')\n\ndef lambda_handler(event, context):\n    bucket_name = 'my-production-bucket'\n\n    response = s3_client.get_object(  # Noncompliant\n        Bucket=bucket_name,\n        Key='data.json'\n    )\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport boto3\n\ns3_client = boto3.client('s3')\n\ndef lambda_handler(event, context):\n    bucket_name = 'my-production-bucket'\n    expected_owner = '123456789012'\n\n    response = s3_client.get_object(\n        Bucket=bucket_name,\n        Key='data.json',\n        ExpectedBucketOwner=expected_owner  # Compliant\n    )\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> boto3 Documentation - <a\n  href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.get_object\">get_object</a> </li>\n  <li> AWS Documentation - <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-owner-condition.html\">Verifying bucket ownership with\n  bucket owner condition</a> </li>\n</ul>","security_severity_level":"high"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"ed799a0c8aa78cf8b538d6431f7dadf43bdf451a","message":{"text":"<!--SONAR_ISSUE_KEY:AZjM8g6k-1DnqWXn7bRe-->Add the 'ExpectedBucketOwner' parameter to verify S3 bucket ownership. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_mobilic-api&issues=AZjM8g6k-1DnqWXn7bRe&open=AZjM8g6k-1DnqWXn7bRe\">SonarQube Cloud</a></p>"},"location":{"path":"app/helpers/s3.py","start_line":29,"end_line":29,"start_column":20,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/145/instances","dismissal_approved_by":null},{"number":107,"created_at":"2024-10-10T07:05:40Z","updated_at":"2024-10-10T07:05:42Z","url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/107","html_url":"https://github.com/MTES-MCT/mobilic-api/security/code-scanning/107","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/stack-trace-exposure","severity":"error","description":"Information exposure through an exception","name":"py/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through an exception\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of class names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is handled in two different ways. In the first version, labeled BAD, the exception is sent back to the remote user by returning it from the function. As such, the user is able to see a detailed stack trace, which may contain sensitive information. In the second version, the error message is logged only on the server, and a generic error message is displayed to the user. That way, the developers can still access and use the error log, but remote users will not see the information.\n\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n# BAD\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()\n\n# GOOD\n@app.route('/good')\ndef server_good():\n    try:\n        do_computation()\n    except Exception as e:\n        log(traceback.format_exc())\n        return \"An internal error has occurred!\"\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:python","state":"open","commit_sha":"ed799a0c8aa78cf8b538d6431f7dadf43bdf451a","message":{"text":"Stack trace information flows to this location and may be exposed to an external user."},"location":{"path":"app/controllers/company.py","start_line":795,"end_line":795,"start_column":42,"end_column":59},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/107/instances","dismissal_approved_by":null},{"number":106,"created_at":"2024-10-10T07:05:40Z","updated_at":"2024-10-10T07:05:42Z","url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/106","html_url":"https://github.com/MTES-MCT/mobilic-api/security/code-scanning/106","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/weak-sensitive-data-hashing","severity":"warning","description":"Use of a broken or weak cryptographic hashing algorithm on sensitive data","name":"py/weak-sensitive-data-hashing","tags":["external/cwe/cwe-327","external/cwe/cwe-328","external/cwe/cwe-916","security"],"full_description":"Using broken or weak cryptographic hashing algorithms can compromise security.","help":"# Use of a broken or weak cryptographic hashing algorithm on sensitive data\nUsing a broken or weak cryptographic hash function can leave data vulnerable, and should not be used in security related code.\n\nA strong cryptographic hash function should be resistant to:\n\n* pre-image attacks: if you know a hash value `h(x)`, you should not be able to easily find the input `x`.\n* collision attacks: if you know a hash value `h(x)`, you should not be able to easily find a different input `y` with the same hash value `h(x) = h(y)`.\nIn cases with a limited input space, such as for passwords, the hash function also needs to be computationally expensive to be resistant to brute-force attacks. Passwords should also have an unique salt applied before hashing, but that is not considered by this query.\n\nAs an example, both MD5 and SHA-1 are known to be vulnerable to collision attacks.\n\nSince it's OK to use a weak cryptographic hash function in a non-security context, this query only alerts when these are used to hash sensitive data (such as passwords, certificates, usernames).\n\nUse of broken or weak cryptographic algorithms that are not hashing algorithms, is handled by the `py/weak-cryptographic-algorithm` query.\n\n\n## Recommendation\nEnsure that you use a strong, modern cryptographic hash function:\n\n* such as Argon2, scrypt, bcrypt, or PBKDF2 for passwords and other data with limited input space.\n* such as SHA-2, or SHA-3 in other cases.\n\n## Example\nThe following example shows two functions for checking whether the hash of a certificate matches a known value -- to prevent tampering. The first function uses MD5 that is known to be vulnerable to collision attacks. The second function uses SHA-256 that is a strong cryptographic hashing function.\n\n\n```python\nimport hashlib\n\ndef certificate_matches_known_hash_bad(certificate, known_hash):\n    hash = hashlib.md5(certificate).hexdigest() # BAD\n    return hash == known_hash\n\ndef certificate_matches_known_hash_good(certificate, known_hash):\n    hash = hashlib.sha256(certificate).hexdigest() # GOOD\n    return hash == known_hash\n\n```\n\n## Example\nThe following example shows two functions for hashing passwords. The first function uses SHA-256 to hash passwords. Although SHA-256 is a strong cryptographic hash function, it is not suitable for password hashing since it is not computationally expensive.\n\n\n```python\nimport hashlib\n\ndef get_password_hash(password: str, salt: str):\n    return hashlib.sha256(password + salt).hexdigest() # BAD\n\n```\nThe second function uses Argon2 (through the `argon2-cffi` PyPI package), which is a strong password hashing algorithm (and includes a per-password salt by default).\n\n\n```python\nfrom argon2 import PasswordHasher\n\ndef get_initial_hash(password: str):\n    ph = PasswordHasher()\n    return ph.hash(password) # GOOD\n\ndef check_password(password: str, known_hash):\n    ph = PasswordHasher()\n    return ph.verify(known_hash, password) # GOOD\n\n```\n\n## References\n* OWASP: [Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n* Common Weakness Enumeration: [CWE-327](https://cwe.mitre.org/data/definitions/327.html).\n* Common Weakness Enumeration: [CWE-328](https://cwe.mitre.org/data/definitions/328.html).\n* Common Weakness Enumeration: [CWE-916](https://cwe.mitre.org/data/definitions/916.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:python","state":"open","commit_sha":"ed799a0c8aa78cf8b538d6431f7dadf43bdf451a","message":{"text":"Sensitive data (certificate) is used in a hashing algorithm (SHA1) that is insecure.\nSensitive data (certificate) is used in a hashing algorithm (SHA1) that is insecure.\nSensitive data (certificate) is used in a hashing algorithm (SHA1) that is insecure.\nSensitive data (certificate) is used in a hashing algorithm (SHA1) that is insecure."},"location":{"path":"app/helpers/tachograph/signature.py","start_line":60,"end_line":60,"start_column":13,"end_column":34},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/106/instances","dismissal_approved_by":null},{"number":105,"created_at":"2024-10-10T07:05:40Z","updated_at":"2024-10-10T07:05:42Z","url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/105","html_url":"https://github.com/MTES-MCT/mobilic-api/security/code-scanning/105","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/weak-sensitive-data-hashing","severity":"warning","description":"Use of a broken or weak cryptographic hashing algorithm on sensitive data","name":"py/weak-sensitive-data-hashing","tags":["external/cwe/cwe-327","external/cwe/cwe-328","external/cwe/cwe-916","security"],"full_description":"Using broken or weak cryptographic hashing algorithms can compromise security.","help":"# Use of a broken or weak cryptographic hashing algorithm on sensitive data\nUsing a broken or weak cryptographic hash function can leave data vulnerable, and should not be used in security related code.\n\nA strong cryptographic hash function should be resistant to:\n\n* pre-image attacks: if you know a hash value `h(x)`, you should not be able to easily find the input `x`.\n* collision attacks: if you know a hash value `h(x)`, you should not be able to easily find a different input `y` with the same hash value `h(x) = h(y)`.\nIn cases with a limited input space, such as for passwords, the hash function also needs to be computationally expensive to be resistant to brute-force attacks. Passwords should also have an unique salt applied before hashing, but that is not considered by this query.\n\nAs an example, both MD5 and SHA-1 are known to be vulnerable to collision attacks.\n\nSince it's OK to use a weak cryptographic hash function in a non-security context, this query only alerts when these are used to hash sensitive data (such as passwords, certificates, usernames).\n\nUse of broken or weak cryptographic algorithms that are not hashing algorithms, is handled by the `py/weak-cryptographic-algorithm` query.\n\n\n## Recommendation\nEnsure that you use a strong, modern cryptographic hash function:\n\n* such as Argon2, scrypt, bcrypt, or PBKDF2 for passwords and other data with limited input space.\n* such as SHA-2, or SHA-3 in other cases.\n\n## Example\nThe following example shows two functions for checking whether the hash of a certificate matches a known value -- to prevent tampering. The first function uses MD5 that is known to be vulnerable to collision attacks. The second function uses SHA-256 that is a strong cryptographic hashing function.\n\n\n```python\nimport hashlib\n\ndef certificate_matches_known_hash_bad(certificate, known_hash):\n    hash = hashlib.md5(certificate).hexdigest() # BAD\n    return hash == known_hash\n\ndef certificate_matches_known_hash_good(certificate, known_hash):\n    hash = hashlib.sha256(certificate).hexdigest() # GOOD\n    return hash == known_hash\n\n```\n\n## Example\nThe following example shows two functions for hashing passwords. The first function uses SHA-256 to hash passwords. Although SHA-256 is a strong cryptographic hash function, it is not suitable for password hashing since it is not computationally expensive.\n\n\n```python\nimport hashlib\n\ndef get_password_hash(password: str, salt: str):\n    return hashlib.sha256(password + salt).hexdigest() # BAD\n\n```\nThe second function uses Argon2 (through the `argon2-cffi` PyPI package), which is a strong password hashing algorithm (and includes a per-password salt by default).\n\n\n```python\nfrom argon2 import PasswordHasher\n\ndef get_initial_hash(password: str):\n    ph = PasswordHasher()\n    return ph.hash(password) # GOOD\n\ndef check_password(password: str, known_hash):\n    ph = PasswordHasher()\n    return ph.verify(known_hash, password) # GOOD\n\n```\n\n## References\n* OWASP: [Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\n* Common Weakness Enumeration: [CWE-327](https://cwe.mitre.org/data/definitions/327.html).\n* Common Weakness Enumeration: [CWE-328](https://cwe.mitre.org/data/definitions/328.html).\n* Common Weakness Enumeration: [CWE-916](https://cwe.mitre.org/data/definitions/916.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:python","state":"open","commit_sha":"ed799a0c8aa78cf8b538d6431f7dadf43bdf451a","message":{"text":"Sensitive data (certificate) is used in a hashing algorithm (SHA1) that is insecure."},"location":{"path":"app/helpers/tachograph/rsa_keys.py","start_line":189,"end_line":189,"start_column":33,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/105/instances","dismissal_approved_by":null},{"number":104,"created_at":"2024-10-10T07:05:40Z","updated_at":"2024-10-10T07:05:42Z","url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/104","html_url":"https://github.com/MTES-MCT/mobilic-api/security/code-scanning/104","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/url-redirection","severity":"error","description":"URL redirection from remote source","name":"py/url-redirection","tags":["external/cwe/cwe-601","security"],"full_description":"URL redirection based on unvalidated user input may cause redirection to malicious web sites.","help":"# URL redirection from remote source\nDirectly incorporating user input into a URL redirect request without validating the input can facilitate phishing attacks. In these attacks, unsuspecting users can be redirected to a malicious site that looks very similar to the real site they intend to visit, but which is controlled by the attacker.\n\n\n## Recommendation\nTo guard against untrusted URL redirection, it is advisable to avoid putting user input directly into a redirect URL. Instead, maintain a list of authorized redirects on the server; then choose from that list based on the user input provided.\n\nIf this is not possible, then the user input should be validated in some other way, for example, by verifying that the target URL does not include an explicit host name.\n\n\n## Example\nThe following example shows an HTTP request parameter being used directly in a URL redirect without validating the input, which facilitates phishing attacks:\n\n\n```python\nfrom flask import Flask, request, redirect\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    target = request.args.get('target', '')\n    return redirect(target, code=302)\n\n```\nIf you know the set of valid redirect targets, you can maintain a list of them on the server and check that the user input is in that list:\n\n\n```python\nfrom flask import Flask, request, redirect\n\nVALID_REDIRECT = \"http://cwe.mitre.org/data/definitions/601.html\"\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    target = request.args.get('target', '')\n    if target == VALID_REDIRECT:\n        return redirect(target, code=302)\n    else:\n        # ignore the target and redirect to the home page\n        return redirect('/', code=302)\n\n```\nOften this is not possible, so an alternative is to check that the target URL does not specify an explicit host name. For example, you can use the `urlparse` function from the Python standard library to parse the URL and check that the `netloc` attribute is empty.\n\nNote, however, that some cases are not handled as we desire out-of-the-box by `urlparse`, so we need to adjust two things, as shown in the example below:\n\n* Many browsers accept backslash characters (`\\`) as equivalent to forward slash characters (`/`) in URLs, but the `urlparse` function does not.\n* Mistyped URLs such as `https:/example.com` or `https:///example.com` are parsed as having an empty `netloc` attribute, while browsers will still redirect to the correct site.\n\n```python\nfrom flask import Flask, request, redirect\nfrom urllib.parse import urlparse\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    target = request.args.get('target', '')\n    target = target.replace('\\\\', '')\n    if not urlparse(target).netloc and not urlparse(target).scheme:\n        # relative path, safe to redirect\n        return redirect(target, code=302)\n    # ignore the target and redirect to the home page\n    return redirect('/', code=302)\n\n```\nFor Django application, you can use the function `url_has_allowed_host_and_scheme` to check that a URL is safe to redirect to, as shown in the following example:\n\n\n```python\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import url_has_allowed_host_and_scheme\nfrom django.views import View\n\nclass RedirectView(View):\n    def get(self, request, *args, **kwargs):\n        target = request.GET.get('target', '')\n        if url_has_allowed_host_and_scheme(target, allowed_hosts=None):\n            return HttpResponseRedirect(target)\n        else:\n            # ignore the target and redirect to the home page\n            return redirect('/')\n```\nNote that `url_has_allowed_host_and_scheme` handles backslashes correctly, so no additional processing is required.\n\n\n## References\n* OWASP: [ XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Python standard library: [ urllib.parse](https://docs.python.org/3/library/urllib.parse.html).\n* Common Weakness Enumeration: [CWE-601](https://cwe.mitre.org/data/definitions/601.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:python","state":"open","commit_sha":"ed799a0c8aa78cf8b538d6431f7dadf43bdf451a","message":{"text":"Untrusted URL redirection depends on a user-provided value."},"location":{"path":"app/controllers/controller.py","start_line":95,"end_line":95,"start_column":9,"end_column":123},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/104/instances","dismissal_approved_by":null},{"number":103,"created_at":"2024-10-10T07:05:40Z","updated_at":"2024-10-10T07:05:42Z","url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/103","html_url":"https://github.com/MTES-MCT/mobilic-api/security/code-scanning/103","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"py/url-redirection","severity":"error","description":"URL redirection from remote source","name":"py/url-redirection","tags":["external/cwe/cwe-601","security"],"full_description":"URL redirection based on unvalidated user input may cause redirection to malicious web sites.","help":"# URL redirection from remote source\nDirectly incorporating user input into a URL redirect request without validating the input can facilitate phishing attacks. In these attacks, unsuspecting users can be redirected to a malicious site that looks very similar to the real site they intend to visit, but which is controlled by the attacker.\n\n\n## Recommendation\nTo guard against untrusted URL redirection, it is advisable to avoid putting user input directly into a redirect URL. Instead, maintain a list of authorized redirects on the server; then choose from that list based on the user input provided.\n\nIf this is not possible, then the user input should be validated in some other way, for example, by verifying that the target URL does not include an explicit host name.\n\n\n## Example\nThe following example shows an HTTP request parameter being used directly in a URL redirect without validating the input, which facilitates phishing attacks:\n\n\n```python\nfrom flask import Flask, request, redirect\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    target = request.args.get('target', '')\n    return redirect(target, code=302)\n\n```\nIf you know the set of valid redirect targets, you can maintain a list of them on the server and check that the user input is in that list:\n\n\n```python\nfrom flask import Flask, request, redirect\n\nVALID_REDIRECT = \"http://cwe.mitre.org/data/definitions/601.html\"\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    target = request.args.get('target', '')\n    if target == VALID_REDIRECT:\n        return redirect(target, code=302)\n    else:\n        # ignore the target and redirect to the home page\n        return redirect('/', code=302)\n\n```\nOften this is not possible, so an alternative is to check that the target URL does not specify an explicit host name. For example, you can use the `urlparse` function from the Python standard library to parse the URL and check that the `netloc` attribute is empty.\n\nNote, however, that some cases are not handled as we desire out-of-the-box by `urlparse`, so we need to adjust two things, as shown in the example below:\n\n* Many browsers accept backslash characters (`\\`) as equivalent to forward slash characters (`/`) in URLs, but the `urlparse` function does not.\n* Mistyped URLs such as `https:/example.com` or `https:///example.com` are parsed as having an empty `netloc` attribute, while browsers will still redirect to the correct site.\n\n```python\nfrom flask import Flask, request, redirect\nfrom urllib.parse import urlparse\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    target = request.args.get('target', '')\n    target = target.replace('\\\\', '')\n    if not urlparse(target).netloc and not urlparse(target).scheme:\n        # relative path, safe to redirect\n        return redirect(target, code=302)\n    # ignore the target and redirect to the home page\n    return redirect('/', code=302)\n\n```\nFor Django application, you can use the function `url_has_allowed_host_and_scheme` to check that a URL is safe to redirect to, as shown in the following example:\n\n\n```python\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import redirect\nfrom django.utils.http import url_has_allowed_host_and_scheme\nfrom django.views import View\n\nclass RedirectView(View):\n    def get(self, request, *args, **kwargs):\n        target = request.GET.get('target', '')\n        if url_has_allowed_host_and_scheme(target, allowed_hosts=None):\n            return HttpResponseRedirect(target)\n        else:\n            # ignore the target and redirect to the home page\n            return redirect('/')\n```\nNote that `url_has_allowed_host_and_scheme` handles backslashes correctly, so no additional processing is required.\n\n\n## References\n* OWASP: [ XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Python standard library: [ urllib.parse](https://docs.python.org/3/library/urllib.parse.html).\n* Common Weakness Enumeration: [CWE-601](https://cwe.mitre.org/data/definitions/601.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.2"},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:python\",\"language\":\"python\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:python","state":"open","commit_sha":"ed799a0c8aa78cf8b538d6431f7dadf43bdf451a","message":{"text":"Untrusted URL redirection depends on a user-provided value."},"location":{"path":"app/controllers/controller.py","start_line":72,"end_line":72,"start_column":9,"end_column":126},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/103/instances","dismissal_approved_by":null},{"number":16,"created_at":"2023-12-21T11:00:39Z","updated_at":"2023-12-21T11:00:41Z","url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/16","html_url":"https://github.com/MTES-MCT/mobilic-api/security/code-scanning/16","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"python:S6786","severity":"warning","description":"GraphQL introspection should be disabled in production","name":"python:S6786","tags":["cwe","graphql"],"full_description":"GraphQL introspection should be disabled in production","help":"<p>This vulnerability exposes information about all the APIs available on a GraphQL API server. This information can be used to discover weaknesses in\nthe API that can be exploited.</p>\n<h2>Why is this an issue?</h2>\n<p>GraphQL introspection is a feature that allows client applications to query the schema of a GraphQL API at runtime. It provides a way for\ndevelopers to explore and understand the available data and operations supported by the API.</p>\n<p>This feature is a diagnostic tool that should only be used in the development phase as its presence also creates risks.</p>\n<p>Clear documentation and API references should be considered better discoverability tools for a public GraphQL API.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker can use introspection to identify all of the operations and data types supported by the server. This information can then be used to\nidentify potential targets for attacks.</p>\n<h4>Exploitation of private APIs</h4>\n<p>Even when a GraphQL API server is open to access by third-party applications, it may contain APIs that are intended only for private use.\nIntrospection allows these private APIs to be discovered.</p>\n<p>Private APIs often do not receive the same level of security rigor as public APIs. For example, they may skip input validation because the API is\nonly expected to be called from trusted applications. This can create avenues for attack that are not present on public APIs.</p>\n<h4>Exposure of sensitive data</h4>\n<p>GraphQL allows for multiple related objects to be retrieved using a single API call. This provides an efficient method of obtaining data for use in\na client application.</p>\n<p>An attacker may be able to use these relationships between objects to traverse the data structure. They may be able to find a link to sensitive\ndata that the developer did not intentionally make available.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom graphql_server.flask import GraphQLView\n\napp.add_url_rule(\"/api\",\n    view_func=GraphQLView.as_view(  # Noncompliant\n        name=\"api\",\n        schema=schema,\n    )\n)\n</pre>\n<h4>Compliant solution</h4>\n<p>Make sure that introspection is disabled in production environments. You can use the following code sample as a reference, in conjunction with your\nown methods for distinguishing between production and non-production environments.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom graphql_server.flask import GraphQLView\n\n# Only one of the following needs to be used\nfrom graphql.validation import NoSchemaIntrospectionCustomRule # graphql-core v3\nfrom graphene.validation import DisableIntrospection           # graphene v3\n\n\napp.add_url_rule(\"/api\",\n    view_func=GraphQLView.as_view(\n        name=\"api\",\n        schema=schema,\n        validation_rules=[\n            NoSchemaIntrospectionCustomRule,\n            DisableIntrospection,\n        ]\n    )\n)\n</pre>\n<h3>How does this work?</h3>\n<h4>Disabling introspection</h4>\n<p>The GraphQL server framework should be instructed to disable introspection in production environments. This prevents any attacker attempt to\nretrieve schema information from the server at runtime.</p>\n<p>Each GraphQL framework will have a different method of doing this, possibly including:</p>\n<ul>\n  <li> Changing a simple boolean setting. </li>\n  <li> Adding a middleware module to the request processing chain. </li>\n  <li> Adding a GraphQL validator that rejects introspection keywords. </li>\n</ul>\n<p>If introspection is required, it should only be made available to the smallest possible audience. This could include development environments,\nusers with a specific right, or requests from a specific set of IP addresses.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> OWASP Web Security Testing Guide - <a\n  href=\"https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/12-API_Testing/01-Testing_GraphQL#introspection-queries\">Testing GraphQL</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"ed799a0c8aa78cf8b538d6431f7dadf43bdf451a","message":{"text":"<!--SONAR_ISSUE_KEY:AYxnwlzEzDN-BIKbuQ8s-->Disable introspection on this \"GraphQL\" server endpoint. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_mobilic-api&issues=AYxnwlzEzDN-BIKbuQ8s&open=AYxnwlzEzDN-BIKbuQ8s\">SonarQube Cloud</a></p>"},"location":{"path":"app/__init__.py","start_line":107,"end_line":107,"start_column":15,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/16/instances","dismissal_approved_by":null},{"number":15,"created_at":"2023-12-21T11:00:39Z","updated_at":"2023-12-21T11:00:41Z","url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/15","html_url":"https://github.com/MTES-MCT/mobilic-api/security/code-scanning/15","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"python:S6786","severity":"warning","description":"GraphQL introspection should be disabled in production","name":"python:S6786","tags":["cwe","graphql"],"full_description":"GraphQL introspection should be disabled in production","help":"<p>This vulnerability exposes information about all the APIs available on a GraphQL API server. This information can be used to discover weaknesses in\nthe API that can be exploited.</p>\n<h2>Why is this an issue?</h2>\n<p>GraphQL introspection is a feature that allows client applications to query the schema of a GraphQL API at runtime. It provides a way for\ndevelopers to explore and understand the available data and operations supported by the API.</p>\n<p>This feature is a diagnostic tool that should only be used in the development phase as its presence also creates risks.</p>\n<p>Clear documentation and API references should be considered better discoverability tools for a public GraphQL API.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker can use introspection to identify all of the operations and data types supported by the server. This information can then be used to\nidentify potential targets for attacks.</p>\n<h4>Exploitation of private APIs</h4>\n<p>Even when a GraphQL API server is open to access by third-party applications, it may contain APIs that are intended only for private use.\nIntrospection allows these private APIs to be discovered.</p>\n<p>Private APIs often do not receive the same level of security rigor as public APIs. For example, they may skip input validation because the API is\nonly expected to be called from trusted applications. This can create avenues for attack that are not present on public APIs.</p>\n<h4>Exposure of sensitive data</h4>\n<p>GraphQL allows for multiple related objects to be retrieved using a single API call. This provides an efficient method of obtaining data for use in\na client application.</p>\n<p>An attacker may be able to use these relationships between objects to traverse the data structure. They may be able to find a link to sensitive\ndata that the developer did not intentionally make available.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom graphql_server.flask import GraphQLView\n\napp.add_url_rule(\"/api\",\n    view_func=GraphQLView.as_view(  # Noncompliant\n        name=\"api\",\n        schema=schema,\n    )\n)\n</pre>\n<h4>Compliant solution</h4>\n<p>Make sure that introspection is disabled in production environments. You can use the following code sample as a reference, in conjunction with your\nown methods for distinguishing between production and non-production environments.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom graphql_server.flask import GraphQLView\n\n# Only one of the following needs to be used\nfrom graphql.validation import NoSchemaIntrospectionCustomRule # graphql-core v3\nfrom graphene.validation import DisableIntrospection           # graphene v3\n\n\napp.add_url_rule(\"/api\",\n    view_func=GraphQLView.as_view(\n        name=\"api\",\n        schema=schema,\n        validation_rules=[\n            NoSchemaIntrospectionCustomRule,\n            DisableIntrospection,\n        ]\n    )\n)\n</pre>\n<h3>How does this work?</h3>\n<h4>Disabling introspection</h4>\n<p>The GraphQL server framework should be instructed to disable introspection in production environments. This prevents any attacker attempt to\nretrieve schema information from the server at runtime.</p>\n<p>Each GraphQL framework will have a different method of doing this, possibly including:</p>\n<ul>\n  <li> Changing a simple boolean setting. </li>\n  <li> Adding a middleware module to the request processing chain. </li>\n  <li> Adding a GraphQL validator that rejects introspection keywords. </li>\n</ul>\n<p>If introspection is required, it should only be made available to the smallest possible audience. This could include development environments,\nusers with a specific right, or requests from a specific set of IP addresses.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> OWASP Web Security Testing Guide - <a\n  href=\"https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/12-API_Testing/01-Testing_GraphQL#introspection-queries\">Testing GraphQL</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"ed799a0c8aa78cf8b538d6431f7dadf43bdf451a","message":{"text":"<!--SONAR_ISSUE_KEY:AYxnwlzEzDN-BIKbuQ8r-->Disable introspection on this \"GraphQL\" server endpoint. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_mobilic-api&issues=AYxnwlzEzDN-BIKbuQ8r&open=AYxnwlzEzDN-BIKbuQ8r\">SonarQube Cloud</a></p>"},"location":{"path":"app/__init__.py","start_line":100,"end_line":100,"start_column":15,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/15/instances","dismissal_approved_by":null},{"number":14,"created_at":"2023-12-21T11:00:39Z","updated_at":"2023-12-21T11:00:41Z","url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/14","html_url":"https://github.com/MTES-MCT/mobilic-api/security/code-scanning/14","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"python:S6786","severity":"warning","description":"GraphQL introspection should be disabled in production","name":"python:S6786","tags":["cwe","graphql"],"full_description":"GraphQL introspection should be disabled in production","help":"<p>This vulnerability exposes information about all the APIs available on a GraphQL API server. This information can be used to discover weaknesses in\nthe API that can be exploited.</p>\n<h2>Why is this an issue?</h2>\n<p>GraphQL introspection is a feature that allows client applications to query the schema of a GraphQL API at runtime. It provides a way for\ndevelopers to explore and understand the available data and operations supported by the API.</p>\n<p>This feature is a diagnostic tool that should only be used in the development phase as its presence also creates risks.</p>\n<p>Clear documentation and API references should be considered better discoverability tools for a public GraphQL API.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker can use introspection to identify all of the operations and data types supported by the server. This information can then be used to\nidentify potential targets for attacks.</p>\n<h4>Exploitation of private APIs</h4>\n<p>Even when a GraphQL API server is open to access by third-party applications, it may contain APIs that are intended only for private use.\nIntrospection allows these private APIs to be discovered.</p>\n<p>Private APIs often do not receive the same level of security rigor as public APIs. For example, they may skip input validation because the API is\nonly expected to be called from trusted applications. This can create avenues for attack that are not present on public APIs.</p>\n<h4>Exposure of sensitive data</h4>\n<p>GraphQL allows for multiple related objects to be retrieved using a single API call. This provides an efficient method of obtaining data for use in\na client application.</p>\n<p>An attacker may be able to use these relationships between objects to traverse the data structure. They may be able to find a link to sensitive\ndata that the developer did not intentionally make available.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfrom graphql_server.flask import GraphQLView\n\napp.add_url_rule(\"/api\",\n    view_func=GraphQLView.as_view(  # Noncompliant\n        name=\"api\",\n        schema=schema,\n    )\n)\n</pre>\n<h4>Compliant solution</h4>\n<p>Make sure that introspection is disabled in production environments. You can use the following code sample as a reference, in conjunction with your\nown methods for distinguishing between production and non-production environments.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfrom graphql_server.flask import GraphQLView\n\n# Only one of the following needs to be used\nfrom graphql.validation import NoSchemaIntrospectionCustomRule # graphql-core v3\nfrom graphene.validation import DisableIntrospection           # graphene v3\n\n\napp.add_url_rule(\"/api\",\n    view_func=GraphQLView.as_view(\n        name=\"api\",\n        schema=schema,\n        validation_rules=[\n            NoSchemaIntrospectionCustomRule,\n            DisableIntrospection,\n        ]\n    )\n)\n</pre>\n<h3>How does this work?</h3>\n<h4>Disabling introspection</h4>\n<p>The GraphQL server framework should be instructed to disable introspection in production environments. This prevents any attacker attempt to\nretrieve schema information from the server at runtime.</p>\n<p>Each GraphQL framework will have a different method of doing this, possibly including:</p>\n<ul>\n  <li> Changing a simple boolean setting. </li>\n  <li> Adding a middleware module to the request processing chain. </li>\n  <li> Adding a GraphQL validator that rejects introspection keywords. </li>\n</ul>\n<p>If introspection is required, it should only be made available to the smallest possible audience. This could include development environments,\nusers with a specific right, or requests from a specific set of IP addresses.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> OWASP Web Security Testing Guide - <a\n  href=\"https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/12-API_Testing/01-Testing_GraphQL#introspection-queries\">Testing GraphQL</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/master","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"ed799a0c8aa78cf8b538d6431f7dadf43bdf451a","message":{"text":"<!--SONAR_ISSUE_KEY:AYxnwlzEzDN-BIKbuQ8q-->Disable introspection on this \"GraphQL\" server endpoint. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_mobilic-api&issues=AYxnwlzEzDN-BIKbuQ8q&open=AYxnwlzEzDN-BIKbuQ8q\">SonarQube Cloud</a></p>"},"location":{"path":"app/__init__.py","start_line":114,"end_line":114,"start_column":15,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/mobilic-api/code-scanning/alerts/14/instances","dismissal_approved_by":null}]}]}