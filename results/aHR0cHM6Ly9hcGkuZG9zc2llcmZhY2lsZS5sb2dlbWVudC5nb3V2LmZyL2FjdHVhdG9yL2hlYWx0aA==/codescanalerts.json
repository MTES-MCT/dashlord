{"totalCount":30,"grade":"D","repositories":[{"url":"https://github.com/MTES-MCT/Dossier-Facile-API","grade":"D","alerts":[{"number":79,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/79","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/79","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"java:S2184","severity":"warning","description":"Math operands should be cast before assignment","name":"java:S2184","tags":["cert","cwe","overflow"],"full_description":"Math operands should be cast before assignment","help":"<h2>Why is this an issue?</h2>\n<p>When arithmetic is performed on integers, the result will always be an integer. You can assign that result to a <code>long</code>,\n<code>double</code>, or <code>float</code> with automatic type conversion, but having started as an <code>int</code> or <code>long</code>, the result\nwill likely not be what you expect.</p>\n<p>For instance, if the result of <code>int</code> division is assigned to a floating-point variable, precision will have been lost before the\nassignment. Likewise, if the result of multiplication is assigned to a <code>long</code>, it may have already overflowed before the assignment.</p>\n<p>In either case, the result will not be what was expected. Instead, at least one operand should be cast or promoted to the final type before the\noperation takes place.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nfloat twoThirds = 2/3; // Noncompliant; int division. Yields 0.0\nlong millisInYear = 1_000*3_600*24*365; // Noncompliant; int multiplication. Yields 1471228928\nlong bigNum = Integer.MAX_VALUE + 2; // Noncompliant. Yields -2147483647\nlong bigNegNum =  Integer.MIN_VALUE-1; //Noncompliant, gives a positive result instead of a negative one.\nDate myDate = new Date(seconds * 1_000); //Noncompliant, won't produce the expected result if seconds &gt; 2_147_483\n...\npublic long compute(int factor){\n  return factor * 10_000;  //Noncompliant, won't produce the expected result if factor &gt; 214_748\n}\n\npublic float compute2(long factor){\n  return factor / 123;  //Noncompliant, will be rounded to closest long integer\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nfloat twoThirds = 2f/3; // 2 promoted to float. Yields 0.6666667\nlong millisInYear = 1_000L*3_600*24*365; // 1000 promoted to long. Yields 31_536_000_000\nlong bigNum = Integer.MAX_VALUE + 2L; // 2 promoted to long. Yields 2_147_483_649\nlong bigNegNum =  Integer.MIN_VALUE-1L; // Yields -2_147_483_649\nDate myDate = new Date(seconds * 1_000L);\n...\npublic long compute(int factor){\n  return factor * 10_000L;\n}\n\npublic float compute2(long factor){\n  return factor / 123f;\n}\n</pre>\n<p>or</p>\n<pre>\nfloat twoThirds = (float)2/3; // 2 cast to float\nlong millisInYear = (long)1_000*3_600*24*365; // 1_000 cast to long\nlong bigNum = (long)Integer.MAX_VALUE + 2;\nlong bigNegNum =  (long)Integer.MIN_VALUE-1;\nDate myDate = new Date((long)seconds * 1_000);\n...\npublic long compute(long factor){\n  return factor * 10_000;\n}\n\npublic float compute2(float factor){\n  return factor / 123;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/190\">CWE-190 - Integer Overflow or Wraparound</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/AjdGBQ\">CERT, NUM50-J.</a> - Convert integers to floating point for floating-point operations\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/I9cxBQ\">CERT, INT18-C.</a> - Evaluate integer expressions in a larger size before comparing or\n  assigning to that size </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222612\">Application Security and\n  Development: V-222612</a> - The application must not be vulnerable to overflow attacks. </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AY3Qp7hjjXlEqjErx4Wn-->Cast one of the operands of this subtraction operation to a \"long\". <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY3Qp7hjjXlEqjErx4Wn&open=AY3Qp7hjjXlEqjErx4Wn\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-process-file/src/main/java/fr/dossierfacile/process/file/util/PersonNameComparator.java","start_line":51,"end_line":51,"start_column":78,"end_column":79},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/79/instances","dismissal_approved_by":null},{"number":78,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/78","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/78","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"java:S2184","severity":"warning","description":"Math operands should be cast before assignment","name":"java:S2184","tags":["cert","cwe","overflow"],"full_description":"Math operands should be cast before assignment","help":"<h2>Why is this an issue?</h2>\n<p>When arithmetic is performed on integers, the result will always be an integer. You can assign that result to a <code>long</code>,\n<code>double</code>, or <code>float</code> with automatic type conversion, but having started as an <code>int</code> or <code>long</code>, the result\nwill likely not be what you expect.</p>\n<p>For instance, if the result of <code>int</code> division is assigned to a floating-point variable, precision will have been lost before the\nassignment. Likewise, if the result of multiplication is assigned to a <code>long</code>, it may have already overflowed before the assignment.</p>\n<p>In either case, the result will not be what was expected. Instead, at least one operand should be cast or promoted to the final type before the\noperation takes place.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nfloat twoThirds = 2/3; // Noncompliant; int division. Yields 0.0\nlong millisInYear = 1_000*3_600*24*365; // Noncompliant; int multiplication. Yields 1471228928\nlong bigNum = Integer.MAX_VALUE + 2; // Noncompliant. Yields -2147483647\nlong bigNegNum =  Integer.MIN_VALUE-1; //Noncompliant, gives a positive result instead of a negative one.\nDate myDate = new Date(seconds * 1_000); //Noncompliant, won't produce the expected result if seconds &gt; 2_147_483\n...\npublic long compute(int factor){\n  return factor * 10_000;  //Noncompliant, won't produce the expected result if factor &gt; 214_748\n}\n\npublic float compute2(long factor){\n  return factor / 123;  //Noncompliant, will be rounded to closest long integer\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nfloat twoThirds = 2f/3; // 2 promoted to float. Yields 0.6666667\nlong millisInYear = 1_000L*3_600*24*365; // 1000 promoted to long. Yields 31_536_000_000\nlong bigNum = Integer.MAX_VALUE + 2L; // 2 promoted to long. Yields 2_147_483_649\nlong bigNegNum =  Integer.MIN_VALUE-1L; // Yields -2_147_483_649\nDate myDate = new Date(seconds * 1_000L);\n...\npublic long compute(int factor){\n  return factor * 10_000L;\n}\n\npublic float compute2(long factor){\n  return factor / 123f;\n}\n</pre>\n<p>or</p>\n<pre>\nfloat twoThirds = (float)2/3; // 2 cast to float\nlong millisInYear = (long)1_000*3_600*24*365; // 1_000 cast to long\nlong bigNum = (long)Integer.MAX_VALUE + 2;\nlong bigNegNum =  (long)Integer.MIN_VALUE-1;\nDate myDate = new Date((long)seconds * 1_000);\n...\npublic long compute(long factor){\n  return factor * 10_000;\n}\n\npublic float compute2(float factor){\n  return factor / 123;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/190\">CWE-190 - Integer Overflow or Wraparound</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/AjdGBQ\">CERT, NUM50-J.</a> - Convert integers to floating point for floating-point operations\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/I9cxBQ\">CERT, INT18-C.</a> - Evaluate integer expressions in a larger size before comparing or\n  assigning to that size </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222612\">Application Security and\n  Development: V-222612</a> - The application must not be vulnerable to overflow attacks. </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AYqo9_TuYgBRKObefWvf-->Cast one of the operands of this addition operation to a \"double\". <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AYqo9_TuYgBRKObefWvf&open=AYqo9_TuYgBRKObefWvf\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-pdf-generator/src/main/java/fr/dossierfacile/api/pdfgenerator/service/templates/BOPdfDocumentTemplate.java","start_line":245,"end_line":245,"start_column":76,"end_column":77},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/78/instances","dismissal_approved_by":null},{"number":77,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/77","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/77","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"java:S2184","severity":"warning","description":"Math operands should be cast before assignment","name":"java:S2184","tags":["cert","cwe","overflow"],"full_description":"Math operands should be cast before assignment","help":"<h2>Why is this an issue?</h2>\n<p>When arithmetic is performed on integers, the result will always be an integer. You can assign that result to a <code>long</code>,\n<code>double</code>, or <code>float</code> with automatic type conversion, but having started as an <code>int</code> or <code>long</code>, the result\nwill likely not be what you expect.</p>\n<p>For instance, if the result of <code>int</code> division is assigned to a floating-point variable, precision will have been lost before the\nassignment. Likewise, if the result of multiplication is assigned to a <code>long</code>, it may have already overflowed before the assignment.</p>\n<p>In either case, the result will not be what was expected. Instead, at least one operand should be cast or promoted to the final type before the\noperation takes place.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nfloat twoThirds = 2/3; // Noncompliant; int division. Yields 0.0\nlong millisInYear = 1_000*3_600*24*365; // Noncompliant; int multiplication. Yields 1471228928\nlong bigNum = Integer.MAX_VALUE + 2; // Noncompliant. Yields -2147483647\nlong bigNegNum =  Integer.MIN_VALUE-1; //Noncompliant, gives a positive result instead of a negative one.\nDate myDate = new Date(seconds * 1_000); //Noncompliant, won't produce the expected result if seconds &gt; 2_147_483\n...\npublic long compute(int factor){\n  return factor * 10_000;  //Noncompliant, won't produce the expected result if factor &gt; 214_748\n}\n\npublic float compute2(long factor){\n  return factor / 123;  //Noncompliant, will be rounded to closest long integer\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nfloat twoThirds = 2f/3; // 2 promoted to float. Yields 0.6666667\nlong millisInYear = 1_000L*3_600*24*365; // 1000 promoted to long. Yields 31_536_000_000\nlong bigNum = Integer.MAX_VALUE + 2L; // 2 promoted to long. Yields 2_147_483_649\nlong bigNegNum =  Integer.MIN_VALUE-1L; // Yields -2_147_483_649\nDate myDate = new Date(seconds * 1_000L);\n...\npublic long compute(int factor){\n  return factor * 10_000L;\n}\n\npublic float compute2(long factor){\n  return factor / 123f;\n}\n</pre>\n<p>or</p>\n<pre>\nfloat twoThirds = (float)2/3; // 2 cast to float\nlong millisInYear = (long)1_000*3_600*24*365; // 1_000 cast to long\nlong bigNum = (long)Integer.MAX_VALUE + 2;\nlong bigNegNum =  (long)Integer.MIN_VALUE-1;\nDate myDate = new Date((long)seconds * 1_000);\n...\npublic long compute(long factor){\n  return factor * 10_000;\n}\n\npublic float compute2(float factor){\n  return factor / 123;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/190\">CWE-190 - Integer Overflow or Wraparound</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/AjdGBQ\">CERT, NUM50-J.</a> - Convert integers to floating point for floating-point operations\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/I9cxBQ\">CERT, INT18-C.</a> - Evaluate integer expressions in a larger size before comparing or\n  assigning to that size </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222612\">Application Security and\n  Development: V-222612</a> - The application must not be vulnerable to overflow attacks. </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AYms0FENAIfSPaNemV7K-->Cast one of the operands of this multiplication operation to a \"float\". <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AYms0FENAIfSPaNemV7K&open=AYms0FENAIfSPaNemV7K\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-pdf-generator/src/main/java/fr/dossierfacile/api/pdfgenerator/service/templates/BOPdfDocumentTemplate.java","start_line":96,"end_line":96,"start_column":32,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/77/instances","dismissal_approved_by":null},{"number":76,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/76","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/76","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLag87omYAXogUoI-->Extract the assignment of \"this.#treeDom\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLag87omYAXogUoI&open=AY-HmLag87omYAXogUoI\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":11212,"end_line":11212,"start_column":26,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/76/instances","dismissal_approved_by":null},{"number":75,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/75","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/75","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLag87omYAXogUns-->Extract the assignment of \"this.#containerTopLeft\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLag87omYAXogUns&open=AY-HmLag87omYAXogUns\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":10006,"end_line":10006,"start_column":35,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/75/instances","dismissal_approved_by":null},{"number":74,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/74","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/74","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLag87omYAXogUnq-->Extract the assignment of \"yArray\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLag87omYAXogUnq&open=AY-HmLag87omYAXogUnq\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":9844,"end_line":9844,"start_column":40,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/74/instances","dismissal_approved_by":null},{"number":73,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/73","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/73","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLaf87omYAXogUnR-->Extract the assignment of \"this.#outerContainerWidth\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLaf87omYAXogUnR&open=AY-HmLaf87omYAXogUnR\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":7968,"end_line":7968,"start_column":38,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/73/instances","dismissal_approved_by":null},{"number":72,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/72","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/72","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLaf87omYAXogUmB-->Extract the assignment of \"externalListeners\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLaf87omYAXogUmB&open=AY-HmLaf87omYAXogUmB\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":3342,"end_line":3342,"start_column":28,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/72/instances","dismissal_approved_by":null},{"number":71,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/71","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/71","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLaf87omYAXogUlW-->Extract the assignment of \"this.store\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLaf87omYAXogUlW&open=AY-HmLaf87omYAXogUlW\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":954,"end_line":954,"start_column":39,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/71/instances","dismissal_approved_by":null},{"number":70,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/70","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/70","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1854","severity":"warning","description":"Unused assignments should be removed","name":"javascript:S1854","tags":["cwe","unused"],"full_description":"Unused assignments should be removed","help":"<h2>Why is this an issue?</h2>\n<p>Dead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and don’t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program’s correctness, they are - at best - a waste\nof computing resources.</p>\n<h3>Exceptions</h3>\n<p>The rule ignores</p>\n<ul>\n  <li> Initializations to <code>-1</code>, <code>0</code>, <code>1</code>, <code>undefined</code>, <code>[]</code>, <code>{}</code>,\n  <code>true</code>, <code>false</code> and <code>\"\"</code>. </li>\n  <li> Variables that start with an underscore (e.g. <code>_unused</code>) are ignored. </li>\n  <li> Assignment of <code>null</code> is ignored because it is sometimes used to help garbage collection </li>\n  <li> Increment and decrement expressions are ignored because they are often used idiomatically instead of <code>x+1</code> </li>\n  <li> This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object) </li>\n</ul>\n<pre>\nlet {a, b, ...rest} = obj;  // 'a' and 'b' are compliant\ndoSomething(rest);\n\nlet [x1, x2, x3] = arr;     // 'x1' is noncompliant, as omitting syntax can be used: \"let [, x2, x3] = arr;\"\ndoSomething(x2, x3);\n</pre>\n<h2>How to fix it</h2>\n<p>Remove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction foo(y) {\n  let x = 100; // Noncompliant: dead store\n  x = 150;     // Noncompliant: dead store\n  x = 200;\n  return x + y;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction foo(y) {\n  let x = 200; // Compliant: no unnecessary assignment\n  return x + y;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/563\">CWE-563 - Assignment to Variable without Use ('Unused Variable')</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:javascript:S1763} - All code should be reachable </li>\n  <li> {rule:javascript:S2589} - Boolean expressions should not be gratuitous </li>\n  <li> {rule:javascript:S3516} - Function returns should not be invariant </li>\n  <li> {rule:javascript:S3626} - Jump statements should not be redundant </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AZMLvUd13VE_dL7GhXh7-->Remove this useless assignment to variable \"id1\". <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AZMLvUd13VE_dL7GhXh7&open=AZMLvUd13VE_dL7GhXh7\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/js/main.js","start_line":207,"end_line":207,"start_column":25,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/70/instances","dismissal_approved_by":null},{"number":69,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/69","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/69","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1854","severity":"warning","description":"Unused assignments should be removed","name":"javascript:S1854","tags":["cwe","unused"],"full_description":"Unused assignments should be removed","help":"<h2>Why is this an issue?</h2>\n<p>Dead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and don’t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program’s correctness, they are - at best - a waste\nof computing resources.</p>\n<h3>Exceptions</h3>\n<p>The rule ignores</p>\n<ul>\n  <li> Initializations to <code>-1</code>, <code>0</code>, <code>1</code>, <code>undefined</code>, <code>[]</code>, <code>{}</code>,\n  <code>true</code>, <code>false</code> and <code>\"\"</code>. </li>\n  <li> Variables that start with an underscore (e.g. <code>_unused</code>) are ignored. </li>\n  <li> Assignment of <code>null</code> is ignored because it is sometimes used to help garbage collection </li>\n  <li> Increment and decrement expressions are ignored because they are often used idiomatically instead of <code>x+1</code> </li>\n  <li> This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object) </li>\n</ul>\n<pre>\nlet {a, b, ...rest} = obj;  // 'a' and 'b' are compliant\ndoSomething(rest);\n\nlet [x1, x2, x3] = arr;     // 'x1' is noncompliant, as omitting syntax can be used: \"let [, x2, x3] = arr;\"\ndoSomething(x2, x3);\n</pre>\n<h2>How to fix it</h2>\n<p>Remove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction foo(y) {\n  let x = 100; // Noncompliant: dead store\n  x = 150;     // Noncompliant: dead store\n  x = 200;\n  return x + y;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction foo(y) {\n  let x = 200; // Compliant: no unnecessary assignment\n  return x + y;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/563\">CWE-563 - Assignment to Variable without Use ('Unused Variable')</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:javascript:S1763} - All code should be reachable </li>\n  <li> {rule:javascript:S2589} - Boolean expressions should not be gratuitous </li>\n  <li> {rule:javascript:S3516} - Function returns should not be invariant </li>\n  <li> {rule:javascript:S3626} - Jump statements should not be redundant </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFmqhQZ29vSfPRR1S-->Remove this useless assignment to variable \"file5\". <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AYHeFmqhQZ29vSfPRR1S&open=AYHeFmqhQZ29vSfPRR1S\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/js/main.js","start_line":315,"end_line":315,"start_column":13,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/69/instances","dismissal_approved_by":null},{"number":68,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/68","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/68","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1854","severity":"warning","description":"Unused assignments should be removed","name":"javascript:S1854","tags":["cwe","unused"],"full_description":"Unused assignments should be removed","help":"<h2>Why is this an issue?</h2>\n<p>Dead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and don’t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program’s correctness, they are - at best - a waste\nof computing resources.</p>\n<h3>Exceptions</h3>\n<p>The rule ignores</p>\n<ul>\n  <li> Initializations to <code>-1</code>, <code>0</code>, <code>1</code>, <code>undefined</code>, <code>[]</code>, <code>{}</code>,\n  <code>true</code>, <code>false</code> and <code>\"\"</code>. </li>\n  <li> Variables that start with an underscore (e.g. <code>_unused</code>) are ignored. </li>\n  <li> Assignment of <code>null</code> is ignored because it is sometimes used to help garbage collection </li>\n  <li> Increment and decrement expressions are ignored because they are often used idiomatically instead of <code>x+1</code> </li>\n  <li> This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object) </li>\n</ul>\n<pre>\nlet {a, b, ...rest} = obj;  // 'a' and 'b' are compliant\ndoSomething(rest);\n\nlet [x1, x2, x3] = arr;     // 'x1' is noncompliant, as omitting syntax can be used: \"let [, x2, x3] = arr;\"\ndoSomething(x2, x3);\n</pre>\n<h2>How to fix it</h2>\n<p>Remove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction foo(y) {\n  let x = 100; // Noncompliant: dead store\n  x = 150;     // Noncompliant: dead store\n  x = 200;\n  return x + y;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction foo(y) {\n  let x = 200; // Compliant: no unnecessary assignment\n  return x + y;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/563\">CWE-563 - Assignment to Variable without Use ('Unused Variable')</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:javascript:S1763} - All code should be reachable </li>\n  <li> {rule:javascript:S2589} - Boolean expressions should not be gratuitous </li>\n  <li> {rule:javascript:S3516} - Function returns should not be invariant </li>\n  <li> {rule:javascript:S3626} - Jump statements should not be redundant </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFmqhQZ29vSfPRR1R-->Remove this useless assignment to variable \"file5\". <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AYHeFmqhQZ29vSfPRR1R&open=AYHeFmqhQZ29vSfPRR1R\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/js/main.js","start_line":312,"end_line":312,"start_column":13,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/68/instances","dismissal_approved_by":null},{"number":67,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/67","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/67","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1854","severity":"warning","description":"Unused assignments should be removed","name":"javascript:S1854","tags":["cwe","unused"],"full_description":"Unused assignments should be removed","help":"<h2>Why is this an issue?</h2>\n<p>Dead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and don’t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program’s correctness, they are - at best - a waste\nof computing resources.</p>\n<h3>Exceptions</h3>\n<p>The rule ignores</p>\n<ul>\n  <li> Initializations to <code>-1</code>, <code>0</code>, <code>1</code>, <code>undefined</code>, <code>[]</code>, <code>{}</code>,\n  <code>true</code>, <code>false</code> and <code>\"\"</code>. </li>\n  <li> Variables that start with an underscore (e.g. <code>_unused</code>) are ignored. </li>\n  <li> Assignment of <code>null</code> is ignored because it is sometimes used to help garbage collection </li>\n  <li> Increment and decrement expressions are ignored because they are often used idiomatically instead of <code>x+1</code> </li>\n  <li> This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object) </li>\n</ul>\n<pre>\nlet {a, b, ...rest} = obj;  // 'a' and 'b' are compliant\ndoSomething(rest);\n\nlet [x1, x2, x3] = arr;     // 'x1' is noncompliant, as omitting syntax can be used: \"let [, x2, x3] = arr;\"\ndoSomething(x2, x3);\n</pre>\n<h2>How to fix it</h2>\n<p>Remove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction foo(y) {\n  let x = 100; // Noncompliant: dead store\n  x = 150;     // Noncompliant: dead store\n  x = 200;\n  return x + y;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction foo(y) {\n  let x = 200; // Compliant: no unnecessary assignment\n  return x + y;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/563\">CWE-563 - Assignment to Variable without Use ('Unused Variable')</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:javascript:S1763} - All code should be reachable </li>\n  <li> {rule:javascript:S2589} - Boolean expressions should not be gratuitous </li>\n  <li> {rule:javascript:S3516} - Function returns should not be invariant </li>\n  <li> {rule:javascript:S3626} - Jump statements should not be redundant </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFmqhQZ29vSfPRR1j-->Remove this useless assignment to variable \"id\". <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AYHeFmqhQZ29vSfPRR1j&open=AYHeFmqhQZ29vSfPRR1j\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/js/main.js","start_line":441,"end_line":441,"start_column":17,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/67/instances","dismissal_approved_by":null},{"number":66,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/66","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/66","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1854","severity":"warning","description":"Unused assignments should be removed","name":"javascript:S1854","tags":["cwe","unused"],"full_description":"Unused assignments should be removed","help":"<h2>Why is this an issue?</h2>\n<p>Dead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and don’t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program’s correctness, they are - at best - a waste\nof computing resources.</p>\n<h3>Exceptions</h3>\n<p>The rule ignores</p>\n<ul>\n  <li> Initializations to <code>-1</code>, <code>0</code>, <code>1</code>, <code>undefined</code>, <code>[]</code>, <code>{}</code>,\n  <code>true</code>, <code>false</code> and <code>\"\"</code>. </li>\n  <li> Variables that start with an underscore (e.g. <code>_unused</code>) are ignored. </li>\n  <li> Assignment of <code>null</code> is ignored because it is sometimes used to help garbage collection </li>\n  <li> Increment and decrement expressions are ignored because they are often used idiomatically instead of <code>x+1</code> </li>\n  <li> This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object) </li>\n</ul>\n<pre>\nlet {a, b, ...rest} = obj;  // 'a' and 'b' are compliant\ndoSomething(rest);\n\nlet [x1, x2, x3] = arr;     // 'x1' is noncompliant, as omitting syntax can be used: \"let [, x2, x3] = arr;\"\ndoSomething(x2, x3);\n</pre>\n<h2>How to fix it</h2>\n<p>Remove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction foo(y) {\n  let x = 100; // Noncompliant: dead store\n  x = 150;     // Noncompliant: dead store\n  x = 200;\n  return x + y;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction foo(y) {\n  let x = 200; // Compliant: no unnecessary assignment\n  return x + y;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/563\">CWE-563 - Assignment to Variable without Use ('Unused Variable')</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:javascript:S1763} - All code should be reachable </li>\n  <li> {rule:javascript:S2589} - Boolean expressions should not be gratuitous </li>\n  <li> {rule:javascript:S3516} - Function returns should not be invariant </li>\n  <li> {rule:javascript:S3626} - Jump statements should not be redundant </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFmqgQZ29vSfPRR0y-->Remove this useless assignment to variable \"idApt\". <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AYHeFmqgQZ29vSfPRR0y&open=AYHeFmqgQZ29vSfPRR0y\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/js/main.js","start_line":178,"end_line":178,"start_column":13,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/66/instances","dismissal_approved_by":null},{"number":65,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/65","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/65","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1854","severity":"warning","description":"Unused assignments should be removed","name":"javascript:S1854","tags":["cwe","unused"],"full_description":"Unused assignments should be removed","help":"<h2>Why is this an issue?</h2>\n<p>Dead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and don’t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program’s correctness, they are - at best - a waste\nof computing resources.</p>\n<h3>Exceptions</h3>\n<p>The rule ignores</p>\n<ul>\n  <li> Initializations to <code>-1</code>, <code>0</code>, <code>1</code>, <code>undefined</code>, <code>[]</code>, <code>{}</code>,\n  <code>true</code>, <code>false</code> and <code>\"\"</code>. </li>\n  <li> Variables that start with an underscore (e.g. <code>_unused</code>) are ignored. </li>\n  <li> Assignment of <code>null</code> is ignored because it is sometimes used to help garbage collection </li>\n  <li> Increment and decrement expressions are ignored because they are often used idiomatically instead of <code>x+1</code> </li>\n  <li> This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object) </li>\n</ul>\n<pre>\nlet {a, b, ...rest} = obj;  // 'a' and 'b' are compliant\ndoSomething(rest);\n\nlet [x1, x2, x3] = arr;     // 'x1' is noncompliant, as omitting syntax can be used: \"let [, x2, x3] = arr;\"\ndoSomething(x2, x3);\n</pre>\n<h2>How to fix it</h2>\n<p>Remove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction foo(y) {\n  let x = 100; // Noncompliant: dead store\n  x = 150;     // Noncompliant: dead store\n  x = 200;\n  return x + y;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction foo(y) {\n  let x = 200; // Compliant: no unnecessary assignment\n  return x + y;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/563\">CWE-563 - Assignment to Variable without Use ('Unused Variable')</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:javascript:S1763} - All code should be reachable </li>\n  <li> {rule:javascript:S2589} - Boolean expressions should not be gratuitous </li>\n  <li> {rule:javascript:S3516} - Function returns should not be invariant </li>\n  <li> {rule:javascript:S3626} - Jump statements should not be redundant </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFmqgQZ29vSfPRR04-->Remove this useless assignment to variable \"idApt\". <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AYHeFmqgQZ29vSfPRR04&open=AYHeFmqgQZ29vSfPRR04\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/js/main.js","start_line":188,"end_line":188,"start_column":13,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/65/instances","dismissal_approved_by":null},{"number":64,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/64","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/64","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"java:S1181","severity":"warning","description":"Throwable and Error should not be caught","name":"java:S1181","tags":["bad-practice","cert","cwe","error-handling"],"full_description":"Throwable and Error should not be caught","help":"<h2>Why is this an issue?</h2>\n<p><code>Throwable</code> is the superclass of all errors and exceptions in Java. <code>Error</code> is the superclass of all errors, which are not\nmeant to be caught by applications.</p>\n<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from\nwhich an application should not attempt to recover.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ntry { /* ... */ } catch (Throwable t) { /* ... */ }\ntry { /* ... */ } catch (Error e) { /* ... */ }\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ntry { /* ... */ } catch (RuntimeException e) { /* ... */ }\ntry { /* ... */ } catch (MyException e) { /* ... */ }\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/396\">CWE-396 - Declaration of Catch for Generic Exception</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/ERR08-J.+Do+not+catch+NullPointerException+or+any+of+its+ancestors\">CERT,\n  ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AZJYSZ7Ib-e6idjEVYjy-->Catch Exception instead of Throwable. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AZJYSZ7Ib-e6idjEVYjy&open=AZJYSZ7Ib-e6idjEVYjy\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-api-tenant/src/main/java/fr/dossierfacile/api/front/security/CustomMethodSecurityExpressionRoot.java","start_line":27,"end_line":27,"start_column":18,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/64/instances","dismissal_approved_by":null},{"number":63,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/63","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/63","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"java:S1181","severity":"warning","description":"Throwable and Error should not be caught","name":"java:S1181","tags":["bad-practice","cert","cwe","error-handling"],"full_description":"Throwable and Error should not be caught","help":"<h2>Why is this an issue?</h2>\n<p><code>Throwable</code> is the superclass of all errors and exceptions in Java. <code>Error</code> is the superclass of all errors, which are not\nmeant to be caught by applications.</p>\n<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from\nwhich an application should not attempt to recover.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ntry { /* ... */ } catch (Throwable t) { /* ... */ }\ntry { /* ... */ } catch (Error e) { /* ... */ }\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ntry { /* ... */ } catch (RuntimeException e) { /* ... */ }\ntry { /* ... */ } catch (MyException e) { /* ... */ }\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/396\">CWE-396 - Declaration of Catch for Generic Exception</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/ERR08-J.+Do+not+catch+NullPointerException+or+any+of+its+ancestors\">CERT,\n  ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AZJYSZ6Vb-e6idjEVYjw-->Catch Exception instead of Throwable. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AZJYSZ6Vb-e6idjEVYjw&open=AZJYSZ6Vb-e6idjEVYjw\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-api-tenant/src/main/java/fr/dossierfacile/api/front/security/ClientAuthenticationFacadeImpl.java","start_line":28,"end_line":28,"start_column":18,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/63/instances","dismissal_approved_by":null},{"number":62,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/62","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/62","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"java:S1181","severity":"warning","description":"Throwable and Error should not be caught","name":"java:S1181","tags":["bad-practice","cert","cwe","error-handling"],"full_description":"Throwable and Error should not be caught","help":"<h2>Why is this an issue?</h2>\n<p><code>Throwable</code> is the superclass of all errors and exceptions in Java. <code>Error</code> is the superclass of all errors, which are not\nmeant to be caught by applications.</p>\n<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from\nwhich an application should not attempt to recover.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ntry { /* ... */ } catch (Throwable t) { /* ... */ }\ntry { /* ... */ } catch (Error e) { /* ... */ }\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ntry { /* ... */ } catch (RuntimeException e) { /* ... */ }\ntry { /* ... */ } catch (MyException e) { /* ... */ }\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/396\">CWE-396 - Declaration of Catch for Generic Exception</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/ERR08-J.+Do+not+catch+NullPointerException+or+any+of+its+ancestors\">CERT,\n  ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AZJYSZ66b-e6idjEVYjx-->Catch Exception instead of Throwable. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AZJYSZ66b-e6idjEVYjx&open=AZJYSZ66b-e6idjEVYjx\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-api-tenant/src/main/java/fr/dossierfacile/api/front/security/PartnerAuthorizationManager.java","start_line":25,"end_line":25,"start_column":18,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/62/instances","dismissal_approved_by":null},{"number":61,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/61","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/61","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"java:S112","severity":"warning","description":"Generic exceptions should never be thrown","name":"java:S112","tags":["cert","cwe","error-handling"],"full_description":"Generic exceptions should never be thrown","help":"<p>This rule raises an issue when a generic exception (such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, or\n<code>Exception</code>) is thrown.</p>\n<h2>Why is this an issue?</h2>\n<p>Throwing generic exceptions such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> will have\na negative impact on any code trying to catch these exceptions.</p>\n<p>From a consumer perspective, it is generally a best practice to only catch exceptions you intend to handle. Other exceptions should ideally be let\nto propagate up the stack trace so that they can be dealt with appropriately. When a generic exception is thrown, it forces consumers to catch\nexceptions they do not intend to handle, which they then have to re-throw.</p>\n<p>Besides, when working with a generic type of exception, the only way to distinguish between multiple exceptions is to check their message, which is\nerror-prone and difficult to maintain. Legitimate exceptions may be unintentionally silenced and errors may be hidden.</p>\n<p>For instance, when a <code>Throwable</code> is caught and not re-thrown, it may mask errors such as <code>OutOfMemoryError</code> and prevent the\nprogram from terminating gracefully.</p>\n<p>When throwing an exception, it is therefore recommended to throw the most specific exception possible so that it can be handled intentionally by\nconsumers.</p>\n<h3>Exceptions</h3>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because an overriding method has to follow the signature of the throw\ndeclaration in the superclass. The issue will be raised on superclass declaration of the method (or won’t be raised at all if superclass is not part\nof the analysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod() throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to throw specific exceptions that are relevant to the context in which they arise. It is recommended to either:</p>\n<ul>\n  <li> Raise a specific exception from the Java standard library when one matches. For example an <code>IllegalArgumentException</code> should be\n  thrown when a method receives an invalid argument. </li>\n  <li> Create a custom exception class deriving from <code>Exception</code> or one of its subclasses. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid checkValue(int value) throws Throwable { // Noncompliant: signature is too broad\n    if (value == 42) {\n        throw new RuntimeException(\"Value is 42\"); // Noncompliant: This will be difficult for consumers to handle\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid checkValue(int value) {\n    if (value == 42) {\n        throw new IllegalArgumentException(\"Value is 42\"); // Compliant\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/397\">CWE-397 Declaration of Throws for Generic Exception</a> </li>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/x/_DdGBQ\">ERR07-J. Do not throw RuntimeException, Exception, or Throwable</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S1181} - Generic exceptions should not be caught </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AY1GRyBuZnNFa-dP5YDB-->Define and throw a dedicated exception instead of using a generic one. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY1GRyBuZnNFa-dP5YDB&open=AY1GRyBuZnNFa-dP5YDB\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-process-file/src/main/java/fr/dossierfacile/process/file/service/parsers/PublicPayslipParser.java","start_line":84,"end_line":84,"start_column":23,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/61/instances","dismissal_approved_by":null},{"number":60,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/60","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/60","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"java:S112","severity":"warning","description":"Generic exceptions should never be thrown","name":"java:S112","tags":["cert","cwe","error-handling"],"full_description":"Generic exceptions should never be thrown","help":"<p>This rule raises an issue when a generic exception (such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, or\n<code>Exception</code>) is thrown.</p>\n<h2>Why is this an issue?</h2>\n<p>Throwing generic exceptions such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> will have\na negative impact on any code trying to catch these exceptions.</p>\n<p>From a consumer perspective, it is generally a best practice to only catch exceptions you intend to handle. Other exceptions should ideally be let\nto propagate up the stack trace so that they can be dealt with appropriately. When a generic exception is thrown, it forces consumers to catch\nexceptions they do not intend to handle, which they then have to re-throw.</p>\n<p>Besides, when working with a generic type of exception, the only way to distinguish between multiple exceptions is to check their message, which is\nerror-prone and difficult to maintain. Legitimate exceptions may be unintentionally silenced and errors may be hidden.</p>\n<p>For instance, when a <code>Throwable</code> is caught and not re-thrown, it may mask errors such as <code>OutOfMemoryError</code> and prevent the\nprogram from terminating gracefully.</p>\n<p>When throwing an exception, it is therefore recommended to throw the most specific exception possible so that it can be handled intentionally by\nconsumers.</p>\n<h3>Exceptions</h3>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because an overriding method has to follow the signature of the throw\ndeclaration in the superclass. The issue will be raised on superclass declaration of the method (or won’t be raised at all if superclass is not part\nof the analysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod() throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to throw specific exceptions that are relevant to the context in which they arise. It is recommended to either:</p>\n<ul>\n  <li> Raise a specific exception from the Java standard library when one matches. For example an <code>IllegalArgumentException</code> should be\n  thrown when a method receives an invalid argument. </li>\n  <li> Create a custom exception class deriving from <code>Exception</code> or one of its subclasses. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid checkValue(int value) throws Throwable { // Noncompliant: signature is too broad\n    if (value == 42) {\n        throw new RuntimeException(\"Value is 42\"); // Noncompliant: This will be difficult for consumers to handle\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid checkValue(int value) {\n    if (value == 42) {\n        throw new IllegalArgumentException(\"Value is 42\"); // Compliant\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/397\">CWE-397 Declaration of Throws for Generic Exception</a> </li>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/x/_DdGBQ\">ERR07-J. Do not throw RuntimeException, Exception, or Throwable</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S1181} - Generic exceptions should not be caught </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AY6fkhIWmUF979M15k5Y-->Define and throw a dedicated exception instead of using a generic one. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY6fkhIWmUF979M15k5Y&open=AY6fkhIWmUF979M15k5Y\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-common-library/src/main/java/fr/dossierfacile/common/converter/ListToJsonConverter.java","start_line":39,"end_line":39,"start_column":23,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/60/instances","dismissal_approved_by":null},{"number":59,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/59","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/59","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"java:S112","severity":"warning","description":"Generic exceptions should never be thrown","name":"java:S112","tags":["cert","cwe","error-handling"],"full_description":"Generic exceptions should never be thrown","help":"<p>This rule raises an issue when a generic exception (such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, or\n<code>Exception</code>) is thrown.</p>\n<h2>Why is this an issue?</h2>\n<p>Throwing generic exceptions such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> will have\na negative impact on any code trying to catch these exceptions.</p>\n<p>From a consumer perspective, it is generally a best practice to only catch exceptions you intend to handle. Other exceptions should ideally be let\nto propagate up the stack trace so that they can be dealt with appropriately. When a generic exception is thrown, it forces consumers to catch\nexceptions they do not intend to handle, which they then have to re-throw.</p>\n<p>Besides, when working with a generic type of exception, the only way to distinguish between multiple exceptions is to check their message, which is\nerror-prone and difficult to maintain. Legitimate exceptions may be unintentionally silenced and errors may be hidden.</p>\n<p>For instance, when a <code>Throwable</code> is caught and not re-thrown, it may mask errors such as <code>OutOfMemoryError</code> and prevent the\nprogram from terminating gracefully.</p>\n<p>When throwing an exception, it is therefore recommended to throw the most specific exception possible so that it can be handled intentionally by\nconsumers.</p>\n<h3>Exceptions</h3>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because an overriding method has to follow the signature of the throw\ndeclaration in the superclass. The issue will be raised on superclass declaration of the method (or won’t be raised at all if superclass is not part\nof the analysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod() throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to throw specific exceptions that are relevant to the context in which they arise. It is recommended to either:</p>\n<ul>\n  <li> Raise a specific exception from the Java standard library when one matches. For example an <code>IllegalArgumentException</code> should be\n  thrown when a method receives an invalid argument. </li>\n  <li> Create a custom exception class deriving from <code>Exception</code> or one of its subclasses. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid checkValue(int value) throws Throwable { // Noncompliant: signature is too broad\n    if (value == 42) {\n        throw new RuntimeException(\"Value is 42\"); // Noncompliant: This will be difficult for consumers to handle\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid checkValue(int value) {\n    if (value == 42) {\n        throw new IllegalArgumentException(\"Value is 42\"); // Compliant\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/397\">CWE-397 Declaration of Throws for Generic Exception</a> </li>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/x/_DdGBQ\">ERR07-J. Do not throw RuntimeException, Exception, or Throwable</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S1181} - Generic exceptions should not be caught </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AY6fkhIWmUF979M15k5X-->Define and throw a dedicated exception instead of using a generic one. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY6fkhIWmUF979M15k5X&open=AY6fkhIWmUF979M15k5X\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-common-library/src/main/java/fr/dossierfacile/common/converter/ListToJsonConverter.java","start_line":26,"end_line":26,"start_column":23,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/59/instances","dismissal_approved_by":null},{"number":58,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/58","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/58","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"java:S112","severity":"warning","description":"Generic exceptions should never be thrown","name":"java:S112","tags":["cert","cwe","error-handling"],"full_description":"Generic exceptions should never be thrown","help":"<p>This rule raises an issue when a generic exception (such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, or\n<code>Exception</code>) is thrown.</p>\n<h2>Why is this an issue?</h2>\n<p>Throwing generic exceptions such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> will have\na negative impact on any code trying to catch these exceptions.</p>\n<p>From a consumer perspective, it is generally a best practice to only catch exceptions you intend to handle. Other exceptions should ideally be let\nto propagate up the stack trace so that they can be dealt with appropriately. When a generic exception is thrown, it forces consumers to catch\nexceptions they do not intend to handle, which they then have to re-throw.</p>\n<p>Besides, when working with a generic type of exception, the only way to distinguish between multiple exceptions is to check their message, which is\nerror-prone and difficult to maintain. Legitimate exceptions may be unintentionally silenced and errors may be hidden.</p>\n<p>For instance, when a <code>Throwable</code> is caught and not re-thrown, it may mask errors such as <code>OutOfMemoryError</code> and prevent the\nprogram from terminating gracefully.</p>\n<p>When throwing an exception, it is therefore recommended to throw the most specific exception possible so that it can be handled intentionally by\nconsumers.</p>\n<h3>Exceptions</h3>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because an overriding method has to follow the signature of the throw\ndeclaration in the superclass. The issue will be raised on superclass declaration of the method (or won’t be raised at all if superclass is not part\nof the analysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod() throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to throw specific exceptions that are relevant to the context in which they arise. It is recommended to either:</p>\n<ul>\n  <li> Raise a specific exception from the Java standard library when one matches. For example an <code>IllegalArgumentException</code> should be\n  thrown when a method receives an invalid argument. </li>\n  <li> Create a custom exception class deriving from <code>Exception</code> or one of its subclasses. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid checkValue(int value) throws Throwable { // Noncompliant: signature is too broad\n    if (value == 42) {\n        throw new RuntimeException(\"Value is 42\"); // Noncompliant: This will be difficult for consumers to handle\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid checkValue(int value) {\n    if (value == 42) {\n        throw new IllegalArgumentException(\"Value is 42\"); // Compliant\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/397\">CWE-397 Declaration of Throws for Generic Exception</a> </li>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/x/_DdGBQ\">ERR07-J. Do not throw RuntimeException, Exception, or Throwable</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S1181} - Generic exceptions should not be caught </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AZM_ckyZh8OiFt9rEHmY-->Define and throw a dedicated exception instead of using a generic one. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AZM_ckyZh8OiFt9rEHmY&open=AZM_ckyZh8OiFt9rEHmY\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/java/fr/gouv/bo/dto/DisplayableBarCodeFileAnalysis.java","start_line":87,"end_line":87,"start_column":27,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/58/instances","dismissal_approved_by":null},{"number":57,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/57","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/57","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"java:S112","severity":"warning","description":"Generic exceptions should never be thrown","name":"java:S112","tags":["cert","cwe","error-handling"],"full_description":"Generic exceptions should never be thrown","help":"<p>This rule raises an issue when a generic exception (such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, or\n<code>Exception</code>) is thrown.</p>\n<h2>Why is this an issue?</h2>\n<p>Throwing generic exceptions such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> will have\na negative impact on any code trying to catch these exceptions.</p>\n<p>From a consumer perspective, it is generally a best practice to only catch exceptions you intend to handle. Other exceptions should ideally be let\nto propagate up the stack trace so that they can be dealt with appropriately. When a generic exception is thrown, it forces consumers to catch\nexceptions they do not intend to handle, which they then have to re-throw.</p>\n<p>Besides, when working with a generic type of exception, the only way to distinguish between multiple exceptions is to check their message, which is\nerror-prone and difficult to maintain. Legitimate exceptions may be unintentionally silenced and errors may be hidden.</p>\n<p>For instance, when a <code>Throwable</code> is caught and not re-thrown, it may mask errors such as <code>OutOfMemoryError</code> and prevent the\nprogram from terminating gracefully.</p>\n<p>When throwing an exception, it is therefore recommended to throw the most specific exception possible so that it can be handled intentionally by\nconsumers.</p>\n<h3>Exceptions</h3>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because an overriding method has to follow the signature of the throw\ndeclaration in the superclass. The issue will be raised on superclass declaration of the method (or won’t be raised at all if superclass is not part\nof the analysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod() throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to throw specific exceptions that are relevant to the context in which they arise. It is recommended to either:</p>\n<ul>\n  <li> Raise a specific exception from the Java standard library when one matches. For example an <code>IllegalArgumentException</code> should be\n  thrown when a method receives an invalid argument. </li>\n  <li> Create a custom exception class deriving from <code>Exception</code> or one of its subclasses. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid checkValue(int value) throws Throwable { // Noncompliant: signature is too broad\n    if (value == 42) {\n        throw new RuntimeException(\"Value is 42\"); // Noncompliant: This will be difficult for consumers to handle\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid checkValue(int value) {\n    if (value == 42) {\n        throw new IllegalArgumentException(\"Value is 42\"); // Compliant\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/397\">CWE-397 Declaration of Throws for Generic Exception</a> </li>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/x/_DdGBQ\">ERR07-J. Do not throw RuntimeException, Exception, or Throwable</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S1181} - Generic exceptions should not be caught </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AY3Qp7YRjXlEqjErx4WE-->Define and throw a dedicated exception instead of using a generic one. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY3Qp7YRjXlEqjErx4WE&open=AY3Qp7YRjXlEqjErx4WE\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-process-file/src/main/java/fr/dossierfacile/process/file/barcode/twoddoc/parsing/TwoDDocSignature.java","start_line":27,"end_line":27,"start_column":23,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/57/instances","dismissal_approved_by":null},{"number":56,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/56","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/56","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"java:S112","severity":"warning","description":"Generic exceptions should never be thrown","name":"java:S112","tags":["cert","cwe","error-handling"],"full_description":"Generic exceptions should never be thrown","help":"<p>This rule raises an issue when a generic exception (such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, or\n<code>Exception</code>) is thrown.</p>\n<h2>Why is this an issue?</h2>\n<p>Throwing generic exceptions such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> will have\na negative impact on any code trying to catch these exceptions.</p>\n<p>From a consumer perspective, it is generally a best practice to only catch exceptions you intend to handle. Other exceptions should ideally be let\nto propagate up the stack trace so that they can be dealt with appropriately. When a generic exception is thrown, it forces consumers to catch\nexceptions they do not intend to handle, which they then have to re-throw.</p>\n<p>Besides, when working with a generic type of exception, the only way to distinguish between multiple exceptions is to check their message, which is\nerror-prone and difficult to maintain. Legitimate exceptions may be unintentionally silenced and errors may be hidden.</p>\n<p>For instance, when a <code>Throwable</code> is caught and not re-thrown, it may mask errors such as <code>OutOfMemoryError</code> and prevent the\nprogram from terminating gracefully.</p>\n<p>When throwing an exception, it is therefore recommended to throw the most specific exception possible so that it can be handled intentionally by\nconsumers.</p>\n<h3>Exceptions</h3>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because an overriding method has to follow the signature of the throw\ndeclaration in the superclass. The issue will be raised on superclass declaration of the method (or won’t be raised at all if superclass is not part\nof the analysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod() throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to throw specific exceptions that are relevant to the context in which they arise. It is recommended to either:</p>\n<ul>\n  <li> Raise a specific exception from the Java standard library when one matches. For example an <code>IllegalArgumentException</code> should be\n  thrown when a method receives an invalid argument. </li>\n  <li> Create a custom exception class deriving from <code>Exception</code> or one of its subclasses. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid checkValue(int value) throws Throwable { // Noncompliant: signature is too broad\n    if (value == 42) {\n        throw new RuntimeException(\"Value is 42\"); // Noncompliant: This will be difficult for consumers to handle\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid checkValue(int value) {\n    if (value == 42) {\n        throw new IllegalArgumentException(\"Value is 42\"); // Compliant\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/397\">CWE-397 Declaration of Throws for Generic Exception</a> </li>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/x/_DdGBQ\">ERR07-J. Do not throw RuntimeException, Exception, or Throwable</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S1181} - Generic exceptions should not be caught </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AYi_HVNGfvrOdnvX9LsM-->Define and throw a dedicated exception instead of using a generic one. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AYi_HVNGfvrOdnvX9LsM&open=AYi_HVNGfvrOdnvX9LsM\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-process-file/src/main/java/fr/dossierfacile/process/file/barcode/twoddoc/validation/SignatureAlgorithm.java","start_line":23,"end_line":23,"start_column":23,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/56/instances","dismissal_approved_by":null},{"number":55,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/55","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/55","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"java:S112","severity":"warning","description":"Generic exceptions should never be thrown","name":"java:S112","tags":["cert","cwe","error-handling"],"full_description":"Generic exceptions should never be thrown","help":"<p>This rule raises an issue when a generic exception (such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, or\n<code>Exception</code>) is thrown.</p>\n<h2>Why is this an issue?</h2>\n<p>Throwing generic exceptions such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> will have\na negative impact on any code trying to catch these exceptions.</p>\n<p>From a consumer perspective, it is generally a best practice to only catch exceptions you intend to handle. Other exceptions should ideally be let\nto propagate up the stack trace so that they can be dealt with appropriately. When a generic exception is thrown, it forces consumers to catch\nexceptions they do not intend to handle, which they then have to re-throw.</p>\n<p>Besides, when working with a generic type of exception, the only way to distinguish between multiple exceptions is to check their message, which is\nerror-prone and difficult to maintain. Legitimate exceptions may be unintentionally silenced and errors may be hidden.</p>\n<p>For instance, when a <code>Throwable</code> is caught and not re-thrown, it may mask errors such as <code>OutOfMemoryError</code> and prevent the\nprogram from terminating gracefully.</p>\n<p>When throwing an exception, it is therefore recommended to throw the most specific exception possible so that it can be handled intentionally by\nconsumers.</p>\n<h3>Exceptions</h3>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because an overriding method has to follow the signature of the throw\ndeclaration in the superclass. The issue will be raised on superclass declaration of the method (or won’t be raised at all if superclass is not part\nof the analysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod() throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to throw specific exceptions that are relevant to the context in which they arise. It is recommended to either:</p>\n<ul>\n  <li> Raise a specific exception from the Java standard library when one matches. For example an <code>IllegalArgumentException</code> should be\n  thrown when a method receives an invalid argument. </li>\n  <li> Create a custom exception class deriving from <code>Exception</code> or one of its subclasses. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid checkValue(int value) throws Throwable { // Noncompliant: signature is too broad\n    if (value == 42) {\n        throw new RuntimeException(\"Value is 42\"); // Noncompliant: This will be difficult for consumers to handle\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid checkValue(int value) {\n    if (value == 42) {\n        throw new IllegalArgumentException(\"Value is 42\"); // Compliant\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/397\">CWE-397 Declaration of Throws for Generic Exception</a> </li>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/x/_DdGBQ\">ERR07-J. Do not throw RuntimeException, Exception, or Throwable</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S1181} - Generic exceptions should not be caught </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AZASgcwF4TLtN4_xUw-p-->Define and throw a dedicated exception instead of using a generic one. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AZASgcwF4TLtN4_xUw-p&open=AZASgcwF4TLtN4_xUw-p\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-pdf-generator/src/main/java/fr/dossierfacile/api/pdfgenerator/service/PdfGeneratorServiceImpl.java","start_line":162,"end_line":162,"start_column":23,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/55/instances","dismissal_approved_by":null},{"number":54,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/54","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/54","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"java:S112","severity":"warning","description":"Generic exceptions should never be thrown","name":"java:S112","tags":["cert","cwe","error-handling"],"full_description":"Generic exceptions should never be thrown","help":"<p>This rule raises an issue when a generic exception (such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, or\n<code>Exception</code>) is thrown.</p>\n<h2>Why is this an issue?</h2>\n<p>Throwing generic exceptions such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> will have\na negative impact on any code trying to catch these exceptions.</p>\n<p>From a consumer perspective, it is generally a best practice to only catch exceptions you intend to handle. Other exceptions should ideally be let\nto propagate up the stack trace so that they can be dealt with appropriately. When a generic exception is thrown, it forces consumers to catch\nexceptions they do not intend to handle, which they then have to re-throw.</p>\n<p>Besides, when working with a generic type of exception, the only way to distinguish between multiple exceptions is to check their message, which is\nerror-prone and difficult to maintain. Legitimate exceptions may be unintentionally silenced and errors may be hidden.</p>\n<p>For instance, when a <code>Throwable</code> is caught and not re-thrown, it may mask errors such as <code>OutOfMemoryError</code> and prevent the\nprogram from terminating gracefully.</p>\n<p>When throwing an exception, it is therefore recommended to throw the most specific exception possible so that it can be handled intentionally by\nconsumers.</p>\n<h3>Exceptions</h3>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because an overriding method has to follow the signature of the throw\ndeclaration in the superclass. The issue will be raised on superclass declaration of the method (or won’t be raised at all if superclass is not part\nof the analysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod() throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to throw specific exceptions that are relevant to the context in which they arise. It is recommended to either:</p>\n<ul>\n  <li> Raise a specific exception from the Java standard library when one matches. For example an <code>IllegalArgumentException</code> should be\n  thrown when a method receives an invalid argument. </li>\n  <li> Create a custom exception class deriving from <code>Exception</code> or one of its subclasses. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid checkValue(int value) throws Throwable { // Noncompliant: signature is too broad\n    if (value == 42) {\n        throw new RuntimeException(\"Value is 42\"); // Noncompliant: This will be difficult for consumers to handle\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid checkValue(int value) {\n    if (value == 42) {\n        throw new IllegalArgumentException(\"Value is 42\"); // Compliant\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/397\">CWE-397 Declaration of Throws for Generic Exception</a> </li>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/x/_DdGBQ\">ERR07-J. Do not throw RuntimeException, Exception, or Throwable</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S1181} - Generic exceptions should not be caught </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AZBabJoMDAf6dPz1Zbb_-->Define and throw a dedicated exception instead of using a generic one. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AZBabJoMDAf6dPz1Zbb_&open=AZBabJoMDAf6dPz1Zbb_\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-pdf-generator/src/main/java/fr/dossierfacile/api/pdfgenerator/service/PdfGeneratorServiceImpl.java","start_line":132,"end_line":132,"start_column":39,"end_column":55},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/54/instances","dismissal_approved_by":null},{"number":53,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/53","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/53","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"java:S112","severity":"warning","description":"Generic exceptions should never be thrown","name":"java:S112","tags":["cert","cwe","error-handling"],"full_description":"Generic exceptions should never be thrown","help":"<p>This rule raises an issue when a generic exception (such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, or\n<code>Exception</code>) is thrown.</p>\n<h2>Why is this an issue?</h2>\n<p>Throwing generic exceptions such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> will have\na negative impact on any code trying to catch these exceptions.</p>\n<p>From a consumer perspective, it is generally a best practice to only catch exceptions you intend to handle. Other exceptions should ideally be let\nto propagate up the stack trace so that they can be dealt with appropriately. When a generic exception is thrown, it forces consumers to catch\nexceptions they do not intend to handle, which they then have to re-throw.</p>\n<p>Besides, when working with a generic type of exception, the only way to distinguish between multiple exceptions is to check their message, which is\nerror-prone and difficult to maintain. Legitimate exceptions may be unintentionally silenced and errors may be hidden.</p>\n<p>For instance, when a <code>Throwable</code> is caught and not re-thrown, it may mask errors such as <code>OutOfMemoryError</code> and prevent the\nprogram from terminating gracefully.</p>\n<p>When throwing an exception, it is therefore recommended to throw the most specific exception possible so that it can be handled intentionally by\nconsumers.</p>\n<h3>Exceptions</h3>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because an overriding method has to follow the signature of the throw\ndeclaration in the superclass. The issue will be raised on superclass declaration of the method (or won’t be raised at all if superclass is not part\nof the analysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod() throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to throw specific exceptions that are relevant to the context in which they arise. It is recommended to either:</p>\n<ul>\n  <li> Raise a specific exception from the Java standard library when one matches. For example an <code>IllegalArgumentException</code> should be\n  thrown when a method receives an invalid argument. </li>\n  <li> Create a custom exception class deriving from <code>Exception</code> or one of its subclasses. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid checkValue(int value) throws Throwable { // Noncompliant: signature is too broad\n    if (value == 42) {\n        throw new RuntimeException(\"Value is 42\"); // Noncompliant: This will be difficult for consumers to handle\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid checkValue(int value) {\n    if (value == 42) {\n        throw new IllegalArgumentException(\"Value is 42\"); // Compliant\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/397\">CWE-397 Declaration of Throws for Generic Exception</a> </li>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/x/_DdGBQ\">ERR07-J. Do not throw RuntimeException, Exception, or Throwable</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S1181} - Generic exceptions should not be caught </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AZM-kadAOPbsk1GxQJhr-->Define and throw a dedicated exception instead of using a generic one. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AZM-kadAOPbsk1GxQJhr&open=AZM-kadAOPbsk1GxQJhr\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-pdf-generator/src/main/java/fr/dossierfacile/api/pdfgenerator/service/PdfSignatureServiceImpl.java","start_line":92,"end_line":92,"start_column":115,"end_column":124},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/53/instances","dismissal_approved_by":null},{"number":52,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/52","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/52","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"java:S112","severity":"warning","description":"Generic exceptions should never be thrown","name":"java:S112","tags":["cert","cwe","error-handling"],"full_description":"Generic exceptions should never be thrown","help":"<p>This rule raises an issue when a generic exception (such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, or\n<code>Exception</code>) is thrown.</p>\n<h2>Why is this an issue?</h2>\n<p>Throwing generic exceptions such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> will have\na negative impact on any code trying to catch these exceptions.</p>\n<p>From a consumer perspective, it is generally a best practice to only catch exceptions you intend to handle. Other exceptions should ideally be let\nto propagate up the stack trace so that they can be dealt with appropriately. When a generic exception is thrown, it forces consumers to catch\nexceptions they do not intend to handle, which they then have to re-throw.</p>\n<p>Besides, when working with a generic type of exception, the only way to distinguish between multiple exceptions is to check their message, which is\nerror-prone and difficult to maintain. Legitimate exceptions may be unintentionally silenced and errors may be hidden.</p>\n<p>For instance, when a <code>Throwable</code> is caught and not re-thrown, it may mask errors such as <code>OutOfMemoryError</code> and prevent the\nprogram from terminating gracefully.</p>\n<p>When throwing an exception, it is therefore recommended to throw the most specific exception possible so that it can be handled intentionally by\nconsumers.</p>\n<h3>Exceptions</h3>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because an overriding method has to follow the signature of the throw\ndeclaration in the superclass. The issue will be raised on superclass declaration of the method (or won’t be raised at all if superclass is not part\nof the analysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod() throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to throw specific exceptions that are relevant to the context in which they arise. It is recommended to either:</p>\n<ul>\n  <li> Raise a specific exception from the Java standard library when one matches. For example an <code>IllegalArgumentException</code> should be\n  thrown when a method receives an invalid argument. </li>\n  <li> Create a custom exception class deriving from <code>Exception</code> or one of its subclasses. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid checkValue(int value) throws Throwable { // Noncompliant: signature is too broad\n    if (value == 42) {\n        throw new RuntimeException(\"Value is 42\"); // Noncompliant: This will be difficult for consumers to handle\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid checkValue(int value) {\n    if (value == 42) {\n        throw new IllegalArgumentException(\"Value is 42\"); // Compliant\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/397\">CWE-397 Declaration of Throws for Generic Exception</a> </li>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/x/_DdGBQ\">ERR07-J. Do not throw RuntimeException, Exception, or Throwable</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S1181} - Generic exceptions should not be caught </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AZM-kadAOPbsk1GxQJhq-->Define and throw a dedicated exception instead of using a generic one. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AZM-kadAOPbsk1GxQJhq&open=AZM-kadAOPbsk1GxQJhq\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-pdf-generator/src/main/java/fr/dossierfacile/api/pdfgenerator/service/PdfSignatureServiceImpl.java","start_line":85,"end_line":85,"start_column":48,"end_column":57},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/52/instances","dismissal_approved_by":null},{"number":51,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/51","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/51","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"java:S112","severity":"warning","description":"Generic exceptions should never be thrown","name":"java:S112","tags":["cert","cwe","error-handling"],"full_description":"Generic exceptions should never be thrown","help":"<p>This rule raises an issue when a generic exception (such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, or\n<code>Exception</code>) is thrown.</p>\n<h2>Why is this an issue?</h2>\n<p>Throwing generic exceptions such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> will have\na negative impact on any code trying to catch these exceptions.</p>\n<p>From a consumer perspective, it is generally a best practice to only catch exceptions you intend to handle. Other exceptions should ideally be let\nto propagate up the stack trace so that they can be dealt with appropriately. When a generic exception is thrown, it forces consumers to catch\nexceptions they do not intend to handle, which they then have to re-throw.</p>\n<p>Besides, when working with a generic type of exception, the only way to distinguish between multiple exceptions is to check their message, which is\nerror-prone and difficult to maintain. Legitimate exceptions may be unintentionally silenced and errors may be hidden.</p>\n<p>For instance, when a <code>Throwable</code> is caught and not re-thrown, it may mask errors such as <code>OutOfMemoryError</code> and prevent the\nprogram from terminating gracefully.</p>\n<p>When throwing an exception, it is therefore recommended to throw the most specific exception possible so that it can be handled intentionally by\nconsumers.</p>\n<h3>Exceptions</h3>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because an overriding method has to follow the signature of the throw\ndeclaration in the superclass. The issue will be raised on superclass declaration of the method (or won’t be raised at all if superclass is not part\nof the analysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod() throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to throw specific exceptions that are relevant to the context in which they arise. It is recommended to either:</p>\n<ul>\n  <li> Raise a specific exception from the Java standard library when one matches. For example an <code>IllegalArgumentException</code> should be\n  thrown when a method receives an invalid argument. </li>\n  <li> Create a custom exception class deriving from <code>Exception</code> or one of its subclasses. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid checkValue(int value) throws Throwable { // Noncompliant: signature is too broad\n    if (value == 42) {\n        throw new RuntimeException(\"Value is 42\"); // Noncompliant: This will be difficult for consumers to handle\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid checkValue(int value) {\n    if (value == 42) {\n        throw new IllegalArgumentException(\"Value is 42\"); // Compliant\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/397\">CWE-397 Declaration of Throws for Generic Exception</a> </li>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/x/_DdGBQ\">ERR07-J. Do not throw RuntimeException, Exception, or Throwable</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S1181} - Generic exceptions should not be caught </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AZM-kadAOPbsk1GxQJhp-->Define and throw a dedicated exception instead of using a generic one. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AZM-kadAOPbsk1GxQJhp&open=AZM-kadAOPbsk1GxQJhp\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-pdf-generator/src/main/java/fr/dossierfacile/api/pdfgenerator/service/PdfSignatureServiceImpl.java","start_line":78,"end_line":78,"start_column":56,"end_column":65},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/51/instances","dismissal_approved_by":null},{"number":50,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/50","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/50","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"java:S112","severity":"warning","description":"Generic exceptions should never be thrown","name":"java:S112","tags":["cert","cwe","error-handling"],"full_description":"Generic exceptions should never be thrown","help":"<p>This rule raises an issue when a generic exception (such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, or\n<code>Exception</code>) is thrown.</p>\n<h2>Why is this an issue?</h2>\n<p>Throwing generic exceptions such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> will have\na negative impact on any code trying to catch these exceptions.</p>\n<p>From a consumer perspective, it is generally a best practice to only catch exceptions you intend to handle. Other exceptions should ideally be let\nto propagate up the stack trace so that they can be dealt with appropriately. When a generic exception is thrown, it forces consumers to catch\nexceptions they do not intend to handle, which they then have to re-throw.</p>\n<p>Besides, when working with a generic type of exception, the only way to distinguish between multiple exceptions is to check their message, which is\nerror-prone and difficult to maintain. Legitimate exceptions may be unintentionally silenced and errors may be hidden.</p>\n<p>For instance, when a <code>Throwable</code> is caught and not re-thrown, it may mask errors such as <code>OutOfMemoryError</code> and prevent the\nprogram from terminating gracefully.</p>\n<p>When throwing an exception, it is therefore recommended to throw the most specific exception possible so that it can be handled intentionally by\nconsumers.</p>\n<h3>Exceptions</h3>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because an overriding method has to follow the signature of the throw\ndeclaration in the superclass. The issue will be raised on superclass declaration of the method (or won’t be raised at all if superclass is not part\nof the analysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod() throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to throw specific exceptions that are relevant to the context in which they arise. It is recommended to either:</p>\n<ul>\n  <li> Raise a specific exception from the Java standard library when one matches. For example an <code>IllegalArgumentException</code> should be\n  thrown when a method receives an invalid argument. </li>\n  <li> Create a custom exception class deriving from <code>Exception</code> or one of its subclasses. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid checkValue(int value) throws Throwable { // Noncompliant: signature is too broad\n    if (value == 42) {\n        throw new RuntimeException(\"Value is 42\"); // Noncompliant: This will be difficult for consumers to handle\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid checkValue(int value) {\n    if (value == 42) {\n        throw new IllegalArgumentException(\"Value is 42\"); // Compliant\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/397\">CWE-397 Declaration of Throws for Generic Exception</a> </li>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/x/_DdGBQ\">ERR07-J. Do not throw RuntimeException, Exception, or Throwable</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S1181} - Generic exceptions should not be caught </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"f7bfc18db5017df5fa3d9f30541c7ee04f5de015","message":{"text":"<!--SONAR_ISSUE_KEY:AZM-kabTOPbsk1GxQJhm-->Define and throw a dedicated exception instead of using a generic one. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AZM-kabTOPbsk1GxQJhm&open=AZM-kabTOPbsk1GxQJhm\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-pdf-generator/src/main/java/fr/dossierfacile/api/pdfgenerator/service/interfaces/PdfSignatureService.java","start_line":9,"end_line":9,"start_column":78,"end_column":87},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/50/instances","dismissal_approved_by":null}]}]}