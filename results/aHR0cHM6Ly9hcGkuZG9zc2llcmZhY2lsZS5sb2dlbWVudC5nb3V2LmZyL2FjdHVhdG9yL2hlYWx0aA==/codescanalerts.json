{"totalCount":30,"grade":"D","repositories":[{"url":"https://github.com/MTES-MCT/Dossier-Facile-API","grade":"D","alerts":[{"number":94,"created_at":"2025-07-15T14:17:37Z","updated_at":"2025-07-15T14:17:37Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/94","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/94","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S2486","severity":"warning","description":"Exceptions should not be ignored","name":"javascript:S2486","tags":["cwe","error-handling","suspicious"],"full_description":"Exceptions should not be ignored","help":"<h2>Why is this an issue?</h2>\n<p>When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nfunction f() {\n  try {\n    doSomething();\n  } catch (err) {\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nfunction f() {\n  try {\n    doSomething();\n  } catch (err) {\n    console.log(`Exception while doing something: ${err}`);\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\">Top 10 2021 Category A9 - Security Logging and\n  Monitoring Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">Top 10 2017 Category A10 -\n  Insufficient Logging &amp; Monitoring</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/390\">CWE-390 - Detection of Error Condition Without Action</a> </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AZX76oa6Jkv2KAy9dtyl-->Handle this exception or don't catch it at all. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AZX76oa6Jkv2KAy9dtyl&open=AZX76oa6Jkv2KAy9dtyl\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":12867,"end_line":12869,"start_column":7,"end_column":6},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/94/instances","dismissal_approved_by":null},{"number":93,"created_at":"2025-07-15T14:17:37Z","updated_at":"2025-07-15T14:17:37Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/93","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/93","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S2486","severity":"warning","description":"Exceptions should not be ignored","name":"javascript:S2486","tags":["cwe","error-handling","suspicious"],"full_description":"Exceptions should not be ignored","help":"<h2>Why is this an issue?</h2>\n<p>When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nfunction f() {\n  try {\n    doSomething();\n  } catch (err) {\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nfunction f() {\n  try {\n    doSomething();\n  } catch (err) {\n    console.log(`Exception while doing something: ${err}`);\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\">Top 10 2021 Category A9 - Security Logging and\n  Monitoring Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">Top 10 2017 Category A10 -\n  Insufficient Logging &amp; Monitoring</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/390\">CWE-390 - Detection of Error Condition Without Action</a> </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AZX76oa6Jkv2KAy9dtyk-->Handle this exception or don't catch it at all. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AZX76oa6Jkv2KAy9dtyk&open=AZX76oa6Jkv2KAy9dtyk\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":12837,"end_line":12839,"start_column":9,"end_column":8},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/93/instances","dismissal_approved_by":null},{"number":92,"created_at":"2025-07-15T14:17:37Z","updated_at":"2025-07-15T14:17:37Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/92","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/92","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1874","severity":"warning","description":"Deprecated APIs should not be used","name":"javascript:S1874","tags":["cwe","obsolete","type-dependent"],"full_description":"Deprecated APIs should not be used","help":"<h2>Why is this an issue?</h2>\n<p>Code is sometimes annotated as deprecated by developers maintaining libraries or APIs to indicate that the method, class, or other programming\nelement is no longer recommended for use. This is typically due to the introduction of a newer or more effective alternative. For example, when a\nbetter solution has been identified, or when the existing code presents potential errors or security risks.</p>\n<p>Deprecation is a good practice because it helps to phase out obsolete code in a controlled manner, without breaking existing software that may\nstill depend on it. It is a way to warn other developers not to use the deprecated element in new code, and to replace it in existing code when\npossible.</p>\n<p>Deprecated classes, interfaces, and their members should not be used, inherited or extended because they will eventually be removed. The\ndeprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n<p>Check the documentation or the deprecation message to understand why the code was deprecated and what the recommended alternative is.</p>\n<pre>\n/**\n * @deprecated Use newFunction instead.\n */\nfunction oldFunction() {\n  console.log(\"This is the old function.\");\n}\n\nfunction newFunction() {\n  console.log(\"This is the new function.\");\n}\noldFunction(); // Noncompliant: \"oldFunction is deprecated\"\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/477\">CWE-477 - Use of Obsolete Functions</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLag87omYAXogUqi-->'keyCode' is deprecated. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLag87omYAXogUqi&open=AY-HmLag87omYAXogUqi\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":13803,"end_line":13803,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/92/instances","dismissal_approved_by":null},{"number":91,"created_at":"2025-07-15T14:17:37Z","updated_at":"2025-07-15T14:17:37Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/91","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/91","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1874","severity":"warning","description":"Deprecated APIs should not be used","name":"javascript:S1874","tags":["cwe","obsolete","type-dependent"],"full_description":"Deprecated APIs should not be used","help":"<h2>Why is this an issue?</h2>\n<p>Code is sometimes annotated as deprecated by developers maintaining libraries or APIs to indicate that the method, class, or other programming\nelement is no longer recommended for use. This is typically due to the introduction of a newer or more effective alternative. For example, when a\nbetter solution has been identified, or when the existing code presents potential errors or security risks.</p>\n<p>Deprecation is a good practice because it helps to phase out obsolete code in a controlled manner, without breaking existing software that may\nstill depend on it. It is a way to warn other developers not to use the deprecated element in new code, and to replace it in existing code when\npossible.</p>\n<p>Deprecated classes, interfaces, and their members should not be used, inherited or extended because they will eventually be removed. The\ndeprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n<p>Check the documentation or the deprecation message to understand why the code was deprecated and what the recommended alternative is.</p>\n<pre>\n/**\n * @deprecated Use newFunction instead.\n */\nfunction oldFunction() {\n  console.log(\"This is the old function.\");\n}\n\nfunction newFunction() {\n  console.log(\"This is the new function.\");\n}\noldFunction(); // Noncompliant: \"oldFunction is deprecated\"\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/477\">CWE-477 - Use of Obsolete Functions</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLaf87omYAXogUnL-->'platform' is deprecated. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLaf87omYAXogUnL&open=AY-HmLaf87omYAXogUnL\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":7421,"end_line":7421,"start_column":31,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/91/instances","dismissal_approved_by":null},{"number":90,"created_at":"2025-07-15T14:17:37Z","updated_at":"2025-07-15T14:17:37Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/90","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/90","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1874","severity":"warning","description":"Deprecated APIs should not be used","name":"javascript:S1874","tags":["cwe","obsolete","type-dependent"],"full_description":"Deprecated APIs should not be used","help":"<h2>Why is this an issue?</h2>\n<p>Code is sometimes annotated as deprecated by developers maintaining libraries or APIs to indicate that the method, class, or other programming\nelement is no longer recommended for use. This is typically due to the introduction of a newer or more effective alternative. For example, when a\nbetter solution has been identified, or when the existing code presents potential errors or security risks.</p>\n<p>Deprecation is a good practice because it helps to phase out obsolete code in a controlled manner, without breaking existing software that may\nstill depend on it. It is a way to warn other developers not to use the deprecated element in new code, and to replace it in existing code when\npossible.</p>\n<p>Deprecated classes, interfaces, and their members should not be used, inherited or extended because they will eventually be removed. The\ndeprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n<p>Check the documentation or the deprecation message to understand why the code was deprecated and what the recommended alternative is.</p>\n<pre>\n/**\n * @deprecated Use newFunction instead.\n */\nfunction oldFunction() {\n  console.log(\"This is the old function.\");\n}\n\nfunction newFunction() {\n  console.log(\"This is the new function.\");\n}\noldFunction(); // Noncompliant: \"oldFunction is deprecated\"\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/477\">CWE-477 - Use of Obsolete Functions</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLaf87omYAXogUmI-->The signature '(string: string): string' of 'unescape' is deprecated. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLaf87omYAXogUmI&open=AY-HmLaf87omYAXogUmI\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":3661,"end_line":3661,"start_column":49,"end_column":57},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/90/instances","dismissal_approved_by":null},{"number":89,"created_at":"2025-07-15T14:17:37Z","updated_at":"2025-07-15T14:17:37Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/89","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/89","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1874","severity":"warning","description":"Deprecated APIs should not be used","name":"javascript:S1874","tags":["cwe","obsolete","type-dependent"],"full_description":"Deprecated APIs should not be used","help":"<h2>Why is this an issue?</h2>\n<p>Code is sometimes annotated as deprecated by developers maintaining libraries or APIs to indicate that the method, class, or other programming\nelement is no longer recommended for use. This is typically due to the introduction of a newer or more effective alternative. For example, when a\nbetter solution has been identified, or when the existing code presents potential errors or security risks.</p>\n<p>Deprecation is a good practice because it helps to phase out obsolete code in a controlled manner, without breaking existing software that may\nstill depend on it. It is a way to warn other developers not to use the deprecated element in new code, and to replace it in existing code when\npossible.</p>\n<p>Deprecated classes, interfaces, and their members should not be used, inherited or extended because they will eventually be removed. The\ndeprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n<p>Check the documentation or the deprecation message to understand why the code was deprecated and what the recommended alternative is.</p>\n<pre>\n/**\n * @deprecated Use newFunction instead.\n */\nfunction oldFunction() {\n  console.log(\"This is the old function.\");\n}\n\nfunction newFunction() {\n  console.log(\"This is the new function.\");\n}\noldFunction(); // Noncompliant: \"oldFunction is deprecated\"\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/477\">CWE-477 - Use of Obsolete Functions</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLaf87omYAXogUmH-->The signature '(string: string): string' of 'unescape' is deprecated. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLaf87omYAXogUmH&open=AY-HmLaf87omYAXogUmH\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":3650,"end_line":3650,"start_column":14,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/89/instances","dismissal_approved_by":null},{"number":88,"created_at":"2025-07-15T14:17:37Z","updated_at":"2025-07-15T14:17:37Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/88","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/88","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1874","severity":"warning","description":"Deprecated APIs should not be used","name":"javascript:S1874","tags":["cwe","obsolete","type-dependent"],"full_description":"Deprecated APIs should not be used","help":"<h2>Why is this an issue?</h2>\n<p>Code is sometimes annotated as deprecated by developers maintaining libraries or APIs to indicate that the method, class, or other programming\nelement is no longer recommended for use. This is typically due to the introduction of a newer or more effective alternative. For example, when a\nbetter solution has been identified, or when the existing code presents potential errors or security risks.</p>\n<p>Deprecation is a good practice because it helps to phase out obsolete code in a controlled manner, without breaking existing software that may\nstill depend on it. It is a way to warn other developers not to use the deprecated element in new code, and to replace it in existing code when\npossible.</p>\n<p>Deprecated classes, interfaces, and their members should not be used, inherited or extended because they will eventually be removed. The\ndeprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n<p>Check the documentation or the deprecation message to understand why the code was deprecated and what the recommended alternative is.</p>\n<pre>\n/**\n * @deprecated Use newFunction instead.\n */\nfunction oldFunction() {\n  console.log(\"This is the old function.\");\n}\n\nfunction newFunction() {\n  console.log(\"This is the new function.\");\n}\noldFunction(); // Noncompliant: \"oldFunction is deprecated\"\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/477\">CWE-477 - Use of Obsolete Functions</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLaf87omYAXogUmF-->The signature '(string: string): string' of 'escape' is deprecated. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLaf87omYAXogUmF&open=AY-HmLaf87omYAXogUmF\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":3577,"end_line":3577,"start_column":40,"end_column":46},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/88/instances","dismissal_approved_by":null},{"number":87,"created_at":"2025-07-15T14:17:37Z","updated_at":"2025-07-15T14:17:37Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/87","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/87","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1874","severity":"warning","description":"Deprecated APIs should not be used","name":"javascript:S1874","tags":["cwe","obsolete","type-dependent"],"full_description":"Deprecated APIs should not be used","help":"<h2>Why is this an issue?</h2>\n<p>Code is sometimes annotated as deprecated by developers maintaining libraries or APIs to indicate that the method, class, or other programming\nelement is no longer recommended for use. This is typically due to the introduction of a newer or more effective alternative. For example, when a\nbetter solution has been identified, or when the existing code presents potential errors or security risks.</p>\n<p>Deprecation is a good practice because it helps to phase out obsolete code in a controlled manner, without breaking existing software that may\nstill depend on it. It is a way to warn other developers not to use the deprecated element in new code, and to replace it in existing code when\npossible.</p>\n<p>Deprecated classes, interfaces, and their members should not be used, inherited or extended because they will eventually be removed. The\ndeprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n<p>Check the documentation or the deprecation message to understand why the code was deprecated and what the recommended alternative is.</p>\n<pre>\n/**\n * @deprecated Use newFunction instead.\n */\nfunction oldFunction() {\n  console.log(\"This is the old function.\");\n}\n\nfunction newFunction() {\n  console.log(\"This is the new function.\");\n}\noldFunction(); // Noncompliant: \"oldFunction is deprecated\"\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/477\">CWE-477 - Use of Obsolete Functions</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLaf87omYAXogUmE-->The signature '(string: string): string' of 'escape' is deprecated. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLaf87omYAXogUmE&open=AY-HmLaf87omYAXogUmE\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":3572,"end_line":3572,"start_column":40,"end_column":46},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/87/instances","dismissal_approved_by":null},{"number":86,"created_at":"2025-07-15T14:17:37Z","updated_at":"2025-07-15T14:17:37Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/86","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/86","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1874","severity":"warning","description":"Deprecated APIs should not be used","name":"javascript:S1874","tags":["cwe","obsolete","type-dependent"],"full_description":"Deprecated APIs should not be used","help":"<h2>Why is this an issue?</h2>\n<p>Code is sometimes annotated as deprecated by developers maintaining libraries or APIs to indicate that the method, class, or other programming\nelement is no longer recommended for use. This is typically due to the introduction of a newer or more effective alternative. For example, when a\nbetter solution has been identified, or when the existing code presents potential errors or security risks.</p>\n<p>Deprecation is a good practice because it helps to phase out obsolete code in a controlled manner, without breaking existing software that may\nstill depend on it. It is a way to warn other developers not to use the deprecated element in new code, and to replace it in existing code when\npossible.</p>\n<p>Deprecated classes, interfaces, and their members should not be used, inherited or extended because they will eventually be removed. The\ndeprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n<p>Check the documentation or the deprecation message to understand why the code was deprecated and what the recommended alternative is.</p>\n<pre>\n/**\n * @deprecated Use newFunction instead.\n */\nfunction oldFunction() {\n  console.log(\"This is the old function.\");\n}\n\nfunction newFunction() {\n  console.log(\"This is the new function.\");\n}\noldFunction(); // Noncompliant: \"oldFunction is deprecated\"\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/477\">CWE-477 - Use of Obsolete Functions</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLaf87omYAXogUm4-->The signature '(string: string): string' of 'unescape' is deprecated. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLaf87omYAXogUm4&open=AY-HmLaf87omYAXogUm4\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":6272,"end_line":6272,"start_column":18,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/86/instances","dismissal_approved_by":null},{"number":85,"created_at":"2025-07-15T14:17:37Z","updated_at":"2025-07-15T14:17:37Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/85","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/85","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1874","severity":"warning","description":"Deprecated APIs should not be used","name":"javascript:S1874","tags":["cwe","obsolete","type-dependent"],"full_description":"Deprecated APIs should not be used","help":"<h2>Why is this an issue?</h2>\n<p>Code is sometimes annotated as deprecated by developers maintaining libraries or APIs to indicate that the method, class, or other programming\nelement is no longer recommended for use. This is typically due to the introduction of a newer or more effective alternative. For example, when a\nbetter solution has been identified, or when the existing code presents potential errors or security risks.</p>\n<p>Deprecation is a good practice because it helps to phase out obsolete code in a controlled manner, without breaking existing software that may\nstill depend on it. It is a way to warn other developers not to use the deprecated element in new code, and to replace it in existing code when\npossible.</p>\n<p>Deprecated classes, interfaces, and their members should not be used, inherited or extended because they will eventually be removed. The\ndeprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n<p>Check the documentation or the deprecation message to understand why the code was deprecated and what the recommended alternative is.</p>\n<pre>\n/**\n * @deprecated Use newFunction instead.\n */\nfunction oldFunction() {\n  console.log(\"This is the old function.\");\n}\n\nfunction newFunction() {\n  console.log(\"This is the new function.\");\n}\noldFunction(); // Noncompliant: \"oldFunction is deprecated\"\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/477\">CWE-477 - Use of Obsolete Functions</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLaf87omYAXogUl8-->'platform' is deprecated. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLaf87omYAXogUl8&open=AY-HmLaf87omYAXogUl8\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":2992,"end_line":2992,"start_column":30,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/85/instances","dismissal_approved_by":null},{"number":84,"created_at":"2025-07-15T14:17:37Z","updated_at":"2025-07-15T14:17:37Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/84","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/84","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1874","severity":"warning","description":"Deprecated APIs should not be used","name":"javascript:S1874","tags":["cwe","obsolete","type-dependent"],"full_description":"Deprecated APIs should not be used","help":"<h2>Why is this an issue?</h2>\n<p>Code is sometimes annotated as deprecated by developers maintaining libraries or APIs to indicate that the method, class, or other programming\nelement is no longer recommended for use. This is typically due to the introduction of a newer or more effective alternative. For example, when a\nbetter solution has been identified, or when the existing code presents potential errors or security risks.</p>\n<p>Deprecation is a good practice because it helps to phase out obsolete code in a controlled manner, without breaking existing software that may\nstill depend on it. It is a way to warn other developers not to use the deprecated element in new code, and to replace it in existing code when\npossible.</p>\n<p>Deprecated classes, interfaces, and their members should not be used, inherited or extended because they will eventually be removed. The\ndeprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n<p>Check the documentation or the deprecation message to understand why the code was deprecated and what the recommended alternative is.</p>\n<pre>\n/**\n * @deprecated Use newFunction instead.\n */\nfunction oldFunction() {\n  console.log(\"This is the old function.\");\n}\n\nfunction newFunction() {\n  console.log(\"This is the new function.\");\n}\noldFunction(); // Noncompliant: \"oldFunction is deprecated\"\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/477\">CWE-477 - Use of Obsolete Functions</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFmqhQZ29vSfPRR1W-->'name' is deprecated. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AYHeFmqhQZ29vSfPRR1W&open=AYHeFmqhQZ29vSfPRR1W\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/js/main.js","start_line":364,"end_line":364,"start_column":52,"end_column":56},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/84/instances","dismissal_approved_by":null},{"number":83,"created_at":"2025-07-15T14:17:37Z","updated_at":"2025-07-15T14:17:37Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/83","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/83","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S905","severity":"warning","description":"Non-empty statements should change control flow or have at least one side-effect","name":"javascript:S905","tags":["cwe","unused"],"full_description":"Non-empty statements should change control flow or have at least one side-effect","help":"<p>Statements with no side effects and no change of control flow do not contribute to the functionality of the code and can indicate a programming\nerror.</p>\n<h2>Why is this an issue?</h2>\n<p>When writing code, it is important to ensure that each statement serves a purpose and contributes to the overall functionality of the program. When\nthey have no side effects or do not change the control flow, they can either indicate a programming error or be redundant:</p>\n<ol>\n  <li> The code does not behave as intended: The statements are expected to have an effect but they do not. This can be caused by mistyping,\n  copy-and-paste errors, etc. </li>\n  <li> The statements are residual after a refactoring. </li>\n</ol>\n<h3>Exceptions</h3>\n<p>The rule does not raise an issue on statements containing only a semicolon (<code>;</code>).</p>\n<h2>How to fix it</h2>\n<p>Identify statements that do not contribute to the functionality of the code and verify if they are intended to be part of the logic. If they are,\nthere is a bug to be fixed. If they are not, then they are redundant and should be removed.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result == 0; // Noncompliant: no side effect, was an assignment intended?\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nvar msg = \"Hello, \"\n  \"World!\"; // Noncompliant; have we forgotten '+' operator on previous line?\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction getResult() {\n    let result = 42;\n    if (shouldBeZero()) {\n        result = 0; // Compliant\n    }\n    return result;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nvar msg = \"Hello, \" +\n  \"World!\"; // Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/482\">CWE-482 Comparing instead of Assigning</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLaf87omYAXogUme-->Expected an assignment or function call and instead saw an expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLaf87omYAXogUme&open=AY-HmLaf87omYAXogUme\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":4705,"end_line":4705,"start_column":9,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/83/instances","dismissal_approved_by":null},{"number":82,"created_at":"2025-07-15T14:17:37Z","updated_at":"2025-07-15T14:17:37Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/82","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/82","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1854","severity":"warning","description":"Unused assignments should be removed","name":"javascript:S1854","tags":["cwe","unused"],"full_description":"Unused assignments should be removed","help":"<h2>Why is this an issue?</h2>\n<p>Dead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and don’t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program’s correctness, they are - at best - a waste\nof computing resources.</p>\n<h3>Exceptions</h3>\n<p>The rule ignores</p>\n<ul>\n  <li> Initializations to <code>-1</code>, <code>0</code>, <code>1</code>, <code>undefined</code>, <code>[]</code>, <code>{}</code>,\n  <code>true</code>, <code>false</code> and <code>\"\"</code>. </li>\n  <li> Variables that start with an underscore (e.g. <code>_unused</code>) are ignored. </li>\n  <li> Assignment of <code>null</code> is ignored because it is sometimes used to help garbage collection </li>\n  <li> Increment and decrement expressions are ignored because they are often used idiomatically instead of <code>x+1</code> </li>\n  <li> This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object) </li>\n</ul>\n<pre>\nlet {a, b, ...rest} = obj;  // 'a' and 'b' are compliant\ndoSomething(rest);\n\nlet [x1, x2, x3] = arr;     // 'x1' is noncompliant, as omitting syntax can be used: \"let [, x2, x3] = arr;\"\ndoSomething(x2, x3);\n</pre>\n<h2>How to fix it</h2>\n<p>Remove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction foo(y) {\n  let x = 100; // Noncompliant: dead store\n  x = 150;     // Noncompliant: dead store\n  x = 200;\n  return x + y;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction foo(y) {\n  let x = 200; // Compliant: no unnecessary assignment\n  return x + y;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/563\">CWE-563 - Assignment to Variable without Use ('Unused Variable')</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:javascript:S1763} - All code should be reachable </li>\n  <li> {rule:javascript:S2589} - Boolean expressions should not be gratuitous </li>\n  <li> {rule:javascript:S3516} - Function returns should not be invariant </li>\n  <li> {rule:javascript:S3626} - Jump statements should not be redundant </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLag87omYAXogUqy-->Remove this useless assignment to variable \"pdfjsBuild\". <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLag87omYAXogUqy&open=AY-HmLag87omYAXogUqy\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":13935,"end_line":13935,"start_column":7,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/82/instances","dismissal_approved_by":null},{"number":81,"created_at":"2025-07-15T14:17:37Z","updated_at":"2025-07-15T14:17:37Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/81","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/81","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1854","severity":"warning","description":"Unused assignments should be removed","name":"javascript:S1854","tags":["cwe","unused"],"full_description":"Unused assignments should be removed","help":"<h2>Why is this an issue?</h2>\n<p>Dead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and don’t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program’s correctness, they are - at best - a waste\nof computing resources.</p>\n<h3>Exceptions</h3>\n<p>The rule ignores</p>\n<ul>\n  <li> Initializations to <code>-1</code>, <code>0</code>, <code>1</code>, <code>undefined</code>, <code>[]</code>, <code>{}</code>,\n  <code>true</code>, <code>false</code> and <code>\"\"</code>. </li>\n  <li> Variables that start with an underscore (e.g. <code>_unused</code>) are ignored. </li>\n  <li> Assignment of <code>null</code> is ignored because it is sometimes used to help garbage collection </li>\n  <li> Increment and decrement expressions are ignored because they are often used idiomatically instead of <code>x+1</code> </li>\n  <li> This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object) </li>\n</ul>\n<pre>\nlet {a, b, ...rest} = obj;  // 'a' and 'b' are compliant\ndoSomething(rest);\n\nlet [x1, x2, x3] = arr;     // 'x1' is noncompliant, as omitting syntax can be used: \"let [, x2, x3] = arr;\"\ndoSomething(x2, x3);\n</pre>\n<h2>How to fix it</h2>\n<p>Remove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction foo(y) {\n  let x = 100; // Noncompliant: dead store\n  x = 150;     // Noncompliant: dead store\n  x = 200;\n  return x + y;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction foo(y) {\n  let x = 200; // Compliant: no unnecessary assignment\n  return x + y;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/563\">CWE-563 - Assignment to Variable without Use ('Unused Variable')</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:javascript:S1763} - All code should be reachable </li>\n  <li> {rule:javascript:S2589} - Boolean expressions should not be gratuitous </li>\n  <li> {rule:javascript:S3516} - Function returns should not be invariant </li>\n  <li> {rule:javascript:S3626} - Jump statements should not be redundant </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLag87omYAXogUqw-->Remove this useless assignment to variable \"pdfjsVersion\". <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLag87omYAXogUqw&open=AY-HmLag87omYAXogUqw\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":13934,"end_line":13934,"start_column":7,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/81/instances","dismissal_approved_by":null},{"number":80,"created_at":"2025-07-15T14:17:37Z","updated_at":"2025-07-15T14:17:37Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/80","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/80","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1143","severity":"warning","description":"Jump statements should not occur in \"finally\" blocks","name":"javascript:S1143","tags":["cwe","error-handling"],"full_description":"Jump statements should not occur in \"finally\" blocks","help":"<h2>Why is this an issue?</h2>\n<p>The <code>finally</code> block is a part of a <code>try…​catch…​finally</code> statement, which allows you to handle errors and perform cleanup\noperations regardless of whether an exception is thrown or not. The <code>finally</code> block is executed regardless of whether an exception occurs\nor not, and it is placed after the <code>try</code> and <code>catch</code> blocks.</p>\n<p>Having a jump statement, such as <code>return</code>, <code>break</code>, <code>continue</code>, or <code>throw</code>, inside a\n<code>finally</code> block can lead to unexpected and undesirable behavior, making your code difficult to understand and maintain. While it’s not\ninherently forbidden to use jump statements in <code>finally</code> blocks, it is generally discouraged for the following reasons:</p>\n<ul>\n  <li> The primary purpose of the <code>finally</code> block is to ensure cleanup operations and code that must run regardless of the outcome, such as\n  releasing resources or closing connections. If you use a <code>return</code> statement inside the finally block, it will override any previous\n  <code>return</code> statements in the <code>try</code> or <code>catch</code> blocks. This can lead to unexpected values being returned from a\n  function. </li>\n  <li> Jump statements like <code>break</code>, <code>continue</code>, or even another <code>throw</code> inside the <code>finally</code> block can\n  alter the normal control flow of the program. This can make it difficult to reason about the behavior of the code and may introduce subtle bugs that\n  are hard to detect. </li>\n  <li> If a <code>return</code> or <code>throw</code> statement inside the <code>finally</code> block causes a new exception or alters the return\n  value, it can hide or suppress the original exception or return value from the <code>try</code> or <code>catch</code> blocks. This can make it\n  challenging to identify the actual cause of an error. </li>\n  <li> Code that uses jump statements in <code>finally</code> blocks can be hard to read and understand, especially for other developers who might not\n  be familiar with the unusual control flow. Such code can lead to maintenance issues and make it harder to debug and maintain the application in the\n  long run. </li>\n</ul>\n<p>This rule reports on all usages of jump statements from a <code>finally</code> block. Even if it’s guaranteed that no unhandled exception can\nhappen in <code>try</code> or <code>catch</code> blocks, it’s not recommended to use any jump statements inside the <code>finally</code> block to have\nthe logic there limited to the \"cleanup\".</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nasync function foo() {\n    let result, connection;\n    try {\n        connection = await connect();\n        result = connection.send(1);\n    } catch(err) {\n        console.error(err.message);\n    } finally {\n        if (connection) {\n            connection.close();\n        }\n        return result; // Noncompliant: Jump statement 'return' in the 'finally' block\n    }\n}\n</pre>\n<p>While there might be rare cases where using jump statements in a <code>finally</code> block is necessary, it’s generally recommended to avoid it\nwhenever possible. Instead, use the <code>finally</code> block only for cleanup operations and critical tasks that should always be executed,\nregardless of exceptions or return values.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nasync function foo() {\n    let result, connection;\n    try {\n        connection = await connect();\n        result = connection.send(1);\n    } catch(err) {\n        console.error(err.message);\n    } finally {\n        if (connection) {\n            connection.close();\n        }\n    }\n    return result;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> MDN web docs - <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#the_finally_block\">The\n  <code>finally</code> block</a> </li>\n  <li> MDN web docs - <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\"><code>try...catch</code></a>\n  </li>\n  <li> MDN web docs - <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return\"><code>return</code></a> </li>\n  <li> MDN web docs - <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw\"><code>throw</code></a> </li>\n  <li> MDN web docs - <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break\"><code>break</code></a> </li>\n  <li> MDN web docs - <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue\"><code>continue</code></a> </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLag87omYAXogUqh-->Unsafe usage of ReturnStatement. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLag87omYAXogUqh&open=AY-HmLag87omYAXogUqh\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":13764,"end_line":13764,"start_column":7,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/80/instances","dismissal_approved_by":null},{"number":76,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/76","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/76","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLag87omYAXogUoI-->Extract the assignment of \"this.#treeDom\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLag87omYAXogUoI&open=AY-HmLag87omYAXogUoI\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":11212,"end_line":11212,"start_column":26,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/76/instances","dismissal_approved_by":null},{"number":75,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/75","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/75","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLag87omYAXogUns-->Extract the assignment of \"this.#containerTopLeft\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLag87omYAXogUns&open=AY-HmLag87omYAXogUns\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":10006,"end_line":10006,"start_column":35,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/75/instances","dismissal_approved_by":null},{"number":74,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/74","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/74","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLag87omYAXogUnq-->Extract the assignment of \"yArray\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLag87omYAXogUnq&open=AY-HmLag87omYAXogUnq\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":9844,"end_line":9844,"start_column":40,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/74/instances","dismissal_approved_by":null},{"number":73,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/73","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/73","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLaf87omYAXogUnR-->Extract the assignment of \"this.#outerContainerWidth\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLaf87omYAXogUnR&open=AY-HmLaf87omYAXogUnR\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":7968,"end_line":7968,"start_column":38,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/73/instances","dismissal_approved_by":null},{"number":72,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/72","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/72","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLaf87omYAXogUmB-->Extract the assignment of \"externalListeners\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLaf87omYAXogUmB&open=AY-HmLaf87omYAXogUmB\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":3342,"end_line":3342,"start_column":28,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/72/instances","dismissal_approved_by":null},{"number":71,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/71","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/71","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLaf87omYAXogUlW-->Extract the assignment of \"this.store\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLaf87omYAXogUlW&open=AY-HmLaf87omYAXogUlW\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":954,"end_line":954,"start_column":39,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/71/instances","dismissal_approved_by":null},{"number":70,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/70","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/70","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1854","severity":"warning","description":"Unused assignments should be removed","name":"javascript:S1854","tags":["cwe","unused"],"full_description":"Unused assignments should be removed","help":"<h2>Why is this an issue?</h2>\n<p>Dead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and don’t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program’s correctness, they are - at best - a waste\nof computing resources.</p>\n<h3>Exceptions</h3>\n<p>The rule ignores</p>\n<ul>\n  <li> Initializations to <code>-1</code>, <code>0</code>, <code>1</code>, <code>undefined</code>, <code>[]</code>, <code>{}</code>,\n  <code>true</code>, <code>false</code> and <code>\"\"</code>. </li>\n  <li> Variables that start with an underscore (e.g. <code>_unused</code>) are ignored. </li>\n  <li> Assignment of <code>null</code> is ignored because it is sometimes used to help garbage collection </li>\n  <li> Increment and decrement expressions are ignored because they are often used idiomatically instead of <code>x+1</code> </li>\n  <li> This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object) </li>\n</ul>\n<pre>\nlet {a, b, ...rest} = obj;  // 'a' and 'b' are compliant\ndoSomething(rest);\n\nlet [x1, x2, x3] = arr;     // 'x1' is noncompliant, as omitting syntax can be used: \"let [, x2, x3] = arr;\"\ndoSomething(x2, x3);\n</pre>\n<h2>How to fix it</h2>\n<p>Remove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction foo(y) {\n  let x = 100; // Noncompliant: dead store\n  x = 150;     // Noncompliant: dead store\n  x = 200;\n  return x + y;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction foo(y) {\n  let x = 200; // Compliant: no unnecessary assignment\n  return x + y;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/563\">CWE-563 - Assignment to Variable without Use ('Unused Variable')</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:javascript:S1763} - All code should be reachable </li>\n  <li> {rule:javascript:S2589} - Boolean expressions should not be gratuitous </li>\n  <li> {rule:javascript:S3516} - Function returns should not be invariant </li>\n  <li> {rule:javascript:S3626} - Jump statements should not be redundant </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AZMLvUd13VE_dL7GhXh7-->Remove this useless assignment to variable \"id1\". <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AZMLvUd13VE_dL7GhXh7&open=AZMLvUd13VE_dL7GhXh7\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/js/main.js","start_line":207,"end_line":207,"start_column":25,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/70/instances","dismissal_approved_by":null},{"number":69,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/69","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/69","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1854","severity":"warning","description":"Unused assignments should be removed","name":"javascript:S1854","tags":["cwe","unused"],"full_description":"Unused assignments should be removed","help":"<h2>Why is this an issue?</h2>\n<p>Dead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and don’t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program’s correctness, they are - at best - a waste\nof computing resources.</p>\n<h3>Exceptions</h3>\n<p>The rule ignores</p>\n<ul>\n  <li> Initializations to <code>-1</code>, <code>0</code>, <code>1</code>, <code>undefined</code>, <code>[]</code>, <code>{}</code>,\n  <code>true</code>, <code>false</code> and <code>\"\"</code>. </li>\n  <li> Variables that start with an underscore (e.g. <code>_unused</code>) are ignored. </li>\n  <li> Assignment of <code>null</code> is ignored because it is sometimes used to help garbage collection </li>\n  <li> Increment and decrement expressions are ignored because they are often used idiomatically instead of <code>x+1</code> </li>\n  <li> This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object) </li>\n</ul>\n<pre>\nlet {a, b, ...rest} = obj;  // 'a' and 'b' are compliant\ndoSomething(rest);\n\nlet [x1, x2, x3] = arr;     // 'x1' is noncompliant, as omitting syntax can be used: \"let [, x2, x3] = arr;\"\ndoSomething(x2, x3);\n</pre>\n<h2>How to fix it</h2>\n<p>Remove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction foo(y) {\n  let x = 100; // Noncompliant: dead store\n  x = 150;     // Noncompliant: dead store\n  x = 200;\n  return x + y;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction foo(y) {\n  let x = 200; // Compliant: no unnecessary assignment\n  return x + y;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/563\">CWE-563 - Assignment to Variable without Use ('Unused Variable')</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:javascript:S1763} - All code should be reachable </li>\n  <li> {rule:javascript:S2589} - Boolean expressions should not be gratuitous </li>\n  <li> {rule:javascript:S3516} - Function returns should not be invariant </li>\n  <li> {rule:javascript:S3626} - Jump statements should not be redundant </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFmqhQZ29vSfPRR1S-->Remove this useless assignment to variable \"file5\". <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AYHeFmqhQZ29vSfPRR1S&open=AYHeFmqhQZ29vSfPRR1S\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/js/main.js","start_line":315,"end_line":315,"start_column":13,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/69/instances","dismissal_approved_by":null},{"number":68,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/68","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/68","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1854","severity":"warning","description":"Unused assignments should be removed","name":"javascript:S1854","tags":["cwe","unused"],"full_description":"Unused assignments should be removed","help":"<h2>Why is this an issue?</h2>\n<p>Dead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and don’t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program’s correctness, they are - at best - a waste\nof computing resources.</p>\n<h3>Exceptions</h3>\n<p>The rule ignores</p>\n<ul>\n  <li> Initializations to <code>-1</code>, <code>0</code>, <code>1</code>, <code>undefined</code>, <code>[]</code>, <code>{}</code>,\n  <code>true</code>, <code>false</code> and <code>\"\"</code>. </li>\n  <li> Variables that start with an underscore (e.g. <code>_unused</code>) are ignored. </li>\n  <li> Assignment of <code>null</code> is ignored because it is sometimes used to help garbage collection </li>\n  <li> Increment and decrement expressions are ignored because they are often used idiomatically instead of <code>x+1</code> </li>\n  <li> This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object) </li>\n</ul>\n<pre>\nlet {a, b, ...rest} = obj;  // 'a' and 'b' are compliant\ndoSomething(rest);\n\nlet [x1, x2, x3] = arr;     // 'x1' is noncompliant, as omitting syntax can be used: \"let [, x2, x3] = arr;\"\ndoSomething(x2, x3);\n</pre>\n<h2>How to fix it</h2>\n<p>Remove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction foo(y) {\n  let x = 100; // Noncompliant: dead store\n  x = 150;     // Noncompliant: dead store\n  x = 200;\n  return x + y;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction foo(y) {\n  let x = 200; // Compliant: no unnecessary assignment\n  return x + y;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/563\">CWE-563 - Assignment to Variable without Use ('Unused Variable')</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:javascript:S1763} - All code should be reachable </li>\n  <li> {rule:javascript:S2589} - Boolean expressions should not be gratuitous </li>\n  <li> {rule:javascript:S3516} - Function returns should not be invariant </li>\n  <li> {rule:javascript:S3626} - Jump statements should not be redundant </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFmqhQZ29vSfPRR1R-->Remove this useless assignment to variable \"file5\". <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AYHeFmqhQZ29vSfPRR1R&open=AYHeFmqhQZ29vSfPRR1R\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/js/main.js","start_line":312,"end_line":312,"start_column":13,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/68/instances","dismissal_approved_by":null},{"number":67,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/67","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/67","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1854","severity":"warning","description":"Unused assignments should be removed","name":"javascript:S1854","tags":["cwe","unused"],"full_description":"Unused assignments should be removed","help":"<h2>Why is this an issue?</h2>\n<p>Dead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and don’t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program’s correctness, they are - at best - a waste\nof computing resources.</p>\n<h3>Exceptions</h3>\n<p>The rule ignores</p>\n<ul>\n  <li> Initializations to <code>-1</code>, <code>0</code>, <code>1</code>, <code>undefined</code>, <code>[]</code>, <code>{}</code>,\n  <code>true</code>, <code>false</code> and <code>\"\"</code>. </li>\n  <li> Variables that start with an underscore (e.g. <code>_unused</code>) are ignored. </li>\n  <li> Assignment of <code>null</code> is ignored because it is sometimes used to help garbage collection </li>\n  <li> Increment and decrement expressions are ignored because they are often used idiomatically instead of <code>x+1</code> </li>\n  <li> This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object) </li>\n</ul>\n<pre>\nlet {a, b, ...rest} = obj;  // 'a' and 'b' are compliant\ndoSomething(rest);\n\nlet [x1, x2, x3] = arr;     // 'x1' is noncompliant, as omitting syntax can be used: \"let [, x2, x3] = arr;\"\ndoSomething(x2, x3);\n</pre>\n<h2>How to fix it</h2>\n<p>Remove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction foo(y) {\n  let x = 100; // Noncompliant: dead store\n  x = 150;     // Noncompliant: dead store\n  x = 200;\n  return x + y;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction foo(y) {\n  let x = 200; // Compliant: no unnecessary assignment\n  return x + y;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/563\">CWE-563 - Assignment to Variable without Use ('Unused Variable')</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:javascript:S1763} - All code should be reachable </li>\n  <li> {rule:javascript:S2589} - Boolean expressions should not be gratuitous </li>\n  <li> {rule:javascript:S3516} - Function returns should not be invariant </li>\n  <li> {rule:javascript:S3626} - Jump statements should not be redundant </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFmqhQZ29vSfPRR1j-->Remove this useless assignment to variable \"id\". <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AYHeFmqhQZ29vSfPRR1j&open=AYHeFmqhQZ29vSfPRR1j\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/js/main.js","start_line":441,"end_line":441,"start_column":17,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/67/instances","dismissal_approved_by":null},{"number":66,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/66","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/66","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1854","severity":"warning","description":"Unused assignments should be removed","name":"javascript:S1854","tags":["cwe","unused"],"full_description":"Unused assignments should be removed","help":"<h2>Why is this an issue?</h2>\n<p>Dead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and don’t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program’s correctness, they are - at best - a waste\nof computing resources.</p>\n<h3>Exceptions</h3>\n<p>The rule ignores</p>\n<ul>\n  <li> Initializations to <code>-1</code>, <code>0</code>, <code>1</code>, <code>undefined</code>, <code>[]</code>, <code>{}</code>,\n  <code>true</code>, <code>false</code> and <code>\"\"</code>. </li>\n  <li> Variables that start with an underscore (e.g. <code>_unused</code>) are ignored. </li>\n  <li> Assignment of <code>null</code> is ignored because it is sometimes used to help garbage collection </li>\n  <li> Increment and decrement expressions are ignored because they are often used idiomatically instead of <code>x+1</code> </li>\n  <li> This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object) </li>\n</ul>\n<pre>\nlet {a, b, ...rest} = obj;  // 'a' and 'b' are compliant\ndoSomething(rest);\n\nlet [x1, x2, x3] = arr;     // 'x1' is noncompliant, as omitting syntax can be used: \"let [, x2, x3] = arr;\"\ndoSomething(x2, x3);\n</pre>\n<h2>How to fix it</h2>\n<p>Remove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction foo(y) {\n  let x = 100; // Noncompliant: dead store\n  x = 150;     // Noncompliant: dead store\n  x = 200;\n  return x + y;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction foo(y) {\n  let x = 200; // Compliant: no unnecessary assignment\n  return x + y;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/563\">CWE-563 - Assignment to Variable without Use ('Unused Variable')</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:javascript:S1763} - All code should be reachable </li>\n  <li> {rule:javascript:S2589} - Boolean expressions should not be gratuitous </li>\n  <li> {rule:javascript:S3516} - Function returns should not be invariant </li>\n  <li> {rule:javascript:S3626} - Jump statements should not be redundant </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFmqgQZ29vSfPRR0y-->Remove this useless assignment to variable \"idApt\". <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AYHeFmqgQZ29vSfPRR0y&open=AYHeFmqgQZ29vSfPRR0y\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/js/main.js","start_line":178,"end_line":178,"start_column":13,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/66/instances","dismissal_approved_by":null},{"number":65,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/65","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/65","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1854","severity":"warning","description":"Unused assignments should be removed","name":"javascript:S1854","tags":["cwe","unused"],"full_description":"Unused assignments should be removed","help":"<h2>Why is this an issue?</h2>\n<p>Dead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and don’t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program’s correctness, they are - at best - a waste\nof computing resources.</p>\n<h3>Exceptions</h3>\n<p>The rule ignores</p>\n<ul>\n  <li> Initializations to <code>-1</code>, <code>0</code>, <code>1</code>, <code>undefined</code>, <code>[]</code>, <code>{}</code>,\n  <code>true</code>, <code>false</code> and <code>\"\"</code>. </li>\n  <li> Variables that start with an underscore (e.g. <code>_unused</code>) are ignored. </li>\n  <li> Assignment of <code>null</code> is ignored because it is sometimes used to help garbage collection </li>\n  <li> Increment and decrement expressions are ignored because they are often used idiomatically instead of <code>x+1</code> </li>\n  <li> This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object) </li>\n</ul>\n<pre>\nlet {a, b, ...rest} = obj;  // 'a' and 'b' are compliant\ndoSomething(rest);\n\nlet [x1, x2, x3] = arr;     // 'x1' is noncompliant, as omitting syntax can be used: \"let [, x2, x3] = arr;\"\ndoSomething(x2, x3);\n</pre>\n<h2>How to fix it</h2>\n<p>Remove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction foo(y) {\n  let x = 100; // Noncompliant: dead store\n  x = 150;     // Noncompliant: dead store\n  x = 200;\n  return x + y;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction foo(y) {\n  let x = 200; // Compliant: no unnecessary assignment\n  return x + y;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/563\">CWE-563 - Assignment to Variable without Use ('Unused Variable')</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:javascript:S1763} - All code should be reachable </li>\n  <li> {rule:javascript:S2589} - Boolean expressions should not be gratuitous </li>\n  <li> {rule:javascript:S3516} - Function returns should not be invariant </li>\n  <li> {rule:javascript:S3626} - Jump statements should not be redundant </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFmqgQZ29vSfPRR04-->Remove this useless assignment to variable \"idApt\". <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AYHeFmqgQZ29vSfPRR04&open=AYHeFmqgQZ29vSfPRR04\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/js/main.js","start_line":188,"end_line":188,"start_column":13,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/65/instances","dismissal_approved_by":null},{"number":32,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/32","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/32","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S128","severity":"warning","description":"Switch cases should end with an unconditional \"break\" statement","name":"javascript:S128","tags":["cwe","suspicious"],"full_description":"Switch cases should end with an unconditional \"break\" statement","help":"<h2>Why is this an issue?</h2>\n<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h3>Exceptions</h3>\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                               // Ends with comment when fall-through is intentional\n    console.log(\"this case falls through\")\n    // fall through\n  case 4:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 5:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/484\">CWE-484 - Omitted Break Statement in Switch</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLaf87omYAXogUlx-->End this switch case with an unconditional break, continue, return or throw statement. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLaf87omYAXogUlx&open=AY-HmLaf87omYAXogUlx\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":2346,"end_line":2346,"start_column":7,"end_column":11},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/32/instances","dismissal_approved_by":null},{"number":31,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/31","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/31","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S128","severity":"warning","description":"Switch cases should end with an unconditional \"break\" statement","name":"javascript:S128","tags":["cwe","suspicious"],"full_description":"Switch cases should end with an unconditional \"break\" statement","help":"<h2>Why is this an issue?</h2>\n<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h3>Exceptions</h3>\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                               // Ends with comment when fall-through is intentional\n    console.log(\"this case falls through\")\n    // fall through\n  case 4:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 5:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/484\">CWE-484 - Omitted Break Statement in Switch</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLaf87omYAXogUlv-->End this switch case with an unconditional break, continue, return or throw statement. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLaf87omYAXogUlv&open=AY-HmLaf87omYAXogUlv\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":2314,"end_line":2314,"start_column":7,"end_column":11},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/31/instances","dismissal_approved_by":null},{"number":30,"created_at":"2025-07-08T09:27:53Z","updated_at":"2025-07-08T09:27:53Z","url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/30","html_url":"https://github.com/MTES-MCT/dossierfacile-backend/security/code-scanning/30","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S128","severity":"warning","description":"Switch cases should end with an unconditional \"break\" statement","name":"javascript:S128","tags":["cwe","suspicious"],"full_description":"Switch cases should end with an unconditional \"break\" statement","help":"<h2>Why is this an issue?</h2>\n<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h3>Exceptions</h3>\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                               // Ends with comment when fall-through is intentional\n    console.log(\"this case falls through\")\n    // fall through\n  case 4:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 5:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/484\">CWE-484 - Omitted Break Statement in Switch</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/develop","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"9e8147e17f4eaac12f2420d6f89c33171098c819","message":{"text":"<!--SONAR_ISSUE_KEY:AY-HmLaf87omYAXogUl7-->End this switch case with an unconditional break, continue, return or throw statement. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_dossierfacile-backend&issues=AY-HmLaf87omYAXogUl7&open=AY-HmLaf87omYAXogUl7\">SonarQube Cloud</a></p>"},"location":{"path":"dossierfacile-bo/src/main/resources/static/pdf-viewer/pdfjs-dist/web/viewer.js","start_line":2933,"end_line":2933,"start_column":5,"end_column":9},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/dossierfacile-backend/code-scanning/alerts/30/instances","dismissal_approved_by":null}]}]}