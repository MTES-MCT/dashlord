{"totalCount":30,"grade":"D","repositories":[{"url":"https://github.com/MTES-MCT/partaj","grade":"D","alerts":[{"number":76,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/76","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/76","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"typescript:S1874","severity":"warning","description":"Deprecated APIs should not be used","name":"typescript:S1874","tags":["cwe","obsolete","type-dependent"],"full_description":"Deprecated APIs should not be used","help":"<h2>Why is this an issue?</h2>\n<p>Code is sometimes annotated as deprecated by developers maintaining libraries or APIs to indicate that the method, class, or other programming\nelement is no longer recommended for use. This is typically due to the introduction of a newer or more effective alternative. For example, when a\nbetter solution has been identified, or when the existing code presents potential errors or security risks.</p>\n<p>Deprecation is a good practice because it helps to phase out obsolete code in a controlled manner, without breaking existing software that may\nstill depend on it. It is a way to warn other developers not to use the deprecated element in new code, and to replace it in existing code when\npossible.</p>\n<p>Deprecated classes, interfaces, and their members should not be used, inherited or extended because they will eventually be removed. The\ndeprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n<p>Check the documentation or the deprecation message to understand why the code was deprecated and what the recommended alternative is.</p>\n<pre>\n/**\n * @deprecated Use newFunction instead.\n */\nfunction oldFunction() {\n  console.log(\"This is the old function.\");\n}\n\nfunction newFunction() {\n  console.log(\"This is the new function.\");\n}\noldFunction(); // Noncompliant: \"oldFunction is deprecated\"\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/477\">CWE-477 - Use of Obsolete Functions</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYKSQoJ2ECQxcBFz4qa3-->'keyCode' is deprecated. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYKSQoJ2ECQxcBFz4qa3&open=AYKSQoJ2ECQxcBFz4qa3\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/Search/UnitMembershipSearch.tsx","start_line":97,"end_line":97,"start_column":38,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/76/instances","dismissal_approved_by":null},{"number":75,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/75","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/75","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"typescript:S1874","severity":"warning","description":"Deprecated APIs should not be used","name":"typescript:S1874","tags":["cwe","obsolete","type-dependent"],"full_description":"Deprecated APIs should not be used","help":"<h2>Why is this an issue?</h2>\n<p>Code is sometimes annotated as deprecated by developers maintaining libraries or APIs to indicate that the method, class, or other programming\nelement is no longer recommended for use. This is typically due to the introduction of a newer or more effective alternative. For example, when a\nbetter solution has been identified, or when the existing code presents potential errors or security risks.</p>\n<p>Deprecation is a good practice because it helps to phase out obsolete code in a controlled manner, without breaking existing software that may\nstill depend on it. It is a way to warn other developers not to use the deprecated element in new code, and to replace it in existing code when\npossible.</p>\n<p>Deprecated classes, interfaces, and their members should not be used, inherited or extended because they will eventually be removed. The\ndeprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n<p>Check the documentation or the deprecation message to understand why the code was deprecated and what the recommended alternative is.</p>\n<pre>\n/**\n * @deprecated Use newFunction instead.\n */\nfunction oldFunction() {\n  console.log(\"This is the old function.\");\n}\n\nfunction newFunction() {\n  console.log(\"This is the new function.\");\n}\noldFunction(); // Noncompliant: \"oldFunction is deprecated\"\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/477\">CWE-477 - Use of Obsolete Functions</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AZLD8K5VGQ6XEtW-DDQx-->'keyCode' is deprecated. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AZLD8K5VGQ6XEtW-DDQx&open=AZLD8K5VGQ6XEtW-DDQx\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/modals/GenericModal.tsx","start_line":28,"end_line":28,"start_column":36,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/75/instances","dismissal_approved_by":null},{"number":74,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/74","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/74","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"typescript:S1874","severity":"warning","description":"Deprecated APIs should not be used","name":"typescript:S1874","tags":["cwe","obsolete","type-dependent"],"full_description":"Deprecated APIs should not be used","help":"<h2>Why is this an issue?</h2>\n<p>Code is sometimes annotated as deprecated by developers maintaining libraries or APIs to indicate that the method, class, or other programming\nelement is no longer recommended for use. This is typically due to the introduction of a newer or more effective alternative. For example, when a\nbetter solution has been identified, or when the existing code presents potential errors or security risks.</p>\n<p>Deprecation is a good practice because it helps to phase out obsolete code in a controlled manner, without breaking existing software that may\nstill depend on it. It is a way to warn other developers not to use the deprecated element in new code, and to replace it in existing code when\npossible.</p>\n<p>Deprecated classes, interfaces, and their members should not be used, inherited or extended because they will eventually be removed. The\ndeprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n<p>Check the documentation or the deprecation message to understand why the code was deprecated and what the recommended alternative is.</p>\n<pre>\n/**\n * @deprecated Use newFunction instead.\n */\nfunction oldFunction() {\n  console.log(\"This is the old function.\");\n}\n\nfunction newFunction() {\n  console.log(\"This is the new function.\");\n}\noldFunction(); // Noncompliant: \"oldFunction is deprecated\"\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/477\">CWE-477 - Use of Obsolete Functions</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYlzvAO3ZG4AJYUeaoxr-->'keyCode' is deprecated. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYlzvAO3ZG4AJYUeaoxr&open=AYlzvAO3ZG4AJYUeaoxr\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/modals/ValidationModal.tsx","start_line":152,"end_line":152,"start_column":36,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/74/instances","dismissal_approved_by":null},{"number":73,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/73","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/73","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"typescript:S2486","severity":"warning","description":"Exceptions should not be ignored","name":"typescript:S2486","tags":["cwe","error-handling","suspicious"],"full_description":"Exceptions should not be ignored","help":"<h2>Why is this an issue?</h2>\n<p>When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nfunction f() {\n  try {\n    doSomething();\n  } catch (err) {\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nfunction f() {\n  try {\n    doSomething();\n  } catch (err) {\n    console.log(`Exception while doing something: ${err}`);\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\">Top 10 2021 Category A9 - Security Logging and\n  Monitoring Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">Top 10 2017 Category A10 -\n  Insufficient Logging &amp; Monitoring</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/390\">CWE-390 - Detection of Error Condition Without Action</a> </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AZY-Af1k6XMnbUIYITt0-->Handle this exception or don't catch it at all. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AZY-Af1k6XMnbUIYITt0&open=AZY-Af1k6XMnbUIYITt0\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/RichText/view.tsx","start_line":124,"end_line":126,"start_column":5,"end_column":4},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/73/instances","dismissal_approved_by":null},{"number":72,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/72","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/72","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"typescript:S1874","severity":"warning","description":"Deprecated APIs should not be used","name":"typescript:S1874","tags":["cwe","obsolete","type-dependent"],"full_description":"Deprecated APIs should not be used","help":"<h2>Why is this an issue?</h2>\n<p>Code is sometimes annotated as deprecated by developers maintaining libraries or APIs to indicate that the method, class, or other programming\nelement is no longer recommended for use. This is typically due to the introduction of a newer or more effective alternative. For example, when a\nbetter solution has been identified, or when the existing code presents potential errors or security risks.</p>\n<p>Deprecation is a good practice because it helps to phase out obsolete code in a controlled manner, without breaking existing software that may\nstill depend on it. It is a way to warn other developers not to use the deprecated element in new code, and to replace it in existing code when\npossible.</p>\n<p>Deprecated classes, interfaces, and their members should not be used, inherited or extended because they will eventually be removed. The\ndeprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n<p>Check the documentation or the deprecation message to understand why the code was deprecated and what the recommended alternative is.</p>\n<pre>\n/**\n * @deprecated Use newFunction instead.\n */\nfunction oldFunction() {\n  console.log(\"This is the old function.\");\n}\n\nfunction newFunction() {\n  console.log(\"This is the new function.\");\n}\noldFunction(); // Noncompliant: \"oldFunction is deprecated\"\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/477\">CWE-477 - Use of Obsolete Functions</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AZanqbkUKH7eFK5CJ2EW-->'keyCode' is deprecated. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AZanqbkUKH7eFK5CJ2EW&open=AZanqbkUKH7eFK5CJ2EW\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/modals/APIModal.tsx","start_line":31,"end_line":31,"start_column":36,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/72/instances","dismissal_approved_by":null},{"number":71,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/71","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/71","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"typescript:S1874","severity":"warning","description":"Deprecated APIs should not be used","name":"typescript:S1874","tags":["cwe","obsolete","type-dependent"],"full_description":"Deprecated APIs should not be used","help":"<h2>Why is this an issue?</h2>\n<p>Code is sometimes annotated as deprecated by developers maintaining libraries or APIs to indicate that the method, class, or other programming\nelement is no longer recommended for use. This is typically due to the introduction of a newer or more effective alternative. For example, when a\nbetter solution has been identified, or when the existing code presents potential errors or security risks.</p>\n<p>Deprecation is a good practice because it helps to phase out obsolete code in a controlled manner, without breaking existing software that may\nstill depend on it. It is a way to warn other developers not to use the deprecated element in new code, and to replace it in existing code when\npossible.</p>\n<p>Deprecated classes, interfaces, and their members should not be used, inherited or extended because they will eventually be removed. The\ndeprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n<p>Check the documentation or the deprecation message to understand why the code was deprecated and what the recommended alternative is.</p>\n<pre>\n/**\n * @deprecated Use newFunction instead.\n */\nfunction oldFunction() {\n  console.log(\"This is the old function.\");\n}\n\nfunction newFunction() {\n  console.log(\"This is the new function.\");\n}\noldFunction(); // Noncompliant: \"oldFunction is deprecated\"\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/477\">CWE-477 - Use of Obsolete Functions</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYnBk4Jku4zRHudQtVnr-->'keyCode' is deprecated. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYnBk4Jku4zRHudQtVnr&open=AYnBk4Jku4zRHudQtVnr\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/modals/BaseModal.tsx","start_line":47,"end_line":47,"start_column":36,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/71/instances","dismissal_approved_by":null},{"number":70,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/70","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/70","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"typescript:S1874","severity":"warning","description":"Deprecated APIs should not be used","name":"typescript:S1874","tags":["cwe","obsolete","type-dependent"],"full_description":"Deprecated APIs should not be used","help":"<h2>Why is this an issue?</h2>\n<p>Code is sometimes annotated as deprecated by developers maintaining libraries or APIs to indicate that the method, class, or other programming\nelement is no longer recommended for use. This is typically due to the introduction of a newer or more effective alternative. For example, when a\nbetter solution has been identified, or when the existing code presents potential errors or security risks.</p>\n<p>Deprecation is a good practice because it helps to phase out obsolete code in a controlled manner, without breaking existing software that may\nstill depend on it. It is a way to warn other developers not to use the deprecated element in new code, and to replace it in existing code when\npossible.</p>\n<p>Deprecated classes, interfaces, and their members should not be used, inherited or extended because they will eventually be removed. The\ndeprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n<p>Check the documentation or the deprecation message to understand why the code was deprecated and what the recommended alternative is.</p>\n<pre>\n/**\n * @deprecated Use newFunction instead.\n */\nfunction oldFunction() {\n  console.log(\"This is the old function.\");\n}\n\nfunction newFunction() {\n  console.log(\"This is the new function.\");\n}\noldFunction(); // Noncompliant: \"oldFunction is deprecated\"\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/477\">CWE-477 - Use of Obsolete Functions</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYYru9VYTlC5F8A3yqB0-->'keyCode' is deprecated. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYYru9VYTlC5F8A3yqB0&open=AYYru9VYTlC5F8A3yqB0\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/ReferralUsers/ReferralUsersModal/ReferralUsersModal.tsx","start_line":37,"end_line":37,"start_column":36,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/70/instances","dismissal_approved_by":null},{"number":69,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/69","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/69","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"typescript:S1874","severity":"warning","description":"Deprecated APIs should not be used","name":"typescript:S1874","tags":["cwe","obsolete","type-dependent"],"full_description":"Deprecated APIs should not be used","help":"<h2>Why is this an issue?</h2>\n<p>Code is sometimes annotated as deprecated by developers maintaining libraries or APIs to indicate that the method, class, or other programming\nelement is no longer recommended for use. This is typically due to the introduction of a newer or more effective alternative. For example, when a\nbetter solution has been identified, or when the existing code presents potential errors or security risks.</p>\n<p>Deprecation is a good practice because it helps to phase out obsolete code in a controlled manner, without breaking existing software that may\nstill depend on it. It is a way to warn other developers not to use the deprecated element in new code, and to replace it in existing code when\npossible.</p>\n<p>Deprecated classes, interfaces, and their members should not be used, inherited or extended because they will eventually be removed. The\ndeprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n<p>Check the documentation or the deprecation message to understand why the code was deprecated and what the recommended alternative is.</p>\n<pre>\n/**\n * @deprecated Use newFunction instead.\n */\nfunction oldFunction() {\n  console.log(\"This is the old function.\");\n}\n\nfunction newFunction() {\n  console.log(\"This is the new function.\");\n}\noldFunction(); // Noncompliant: \"oldFunction is deprecated\"\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/477\">CWE-477 - Use of Obsolete Functions</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYrXT-EkWM-qsuDodQnd-->'keyCode' is deprecated. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYrXT-EkWM-qsuDodQnd&open=AYrXT-EkWM-qsuDodQnd\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/modals/WarningModal.tsx","start_line":50,"end_line":50,"start_column":36,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/69/instances","dismissal_approved_by":null},{"number":68,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/68","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/68","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"typescript:S1854","severity":"warning","description":"Unused assignments should be removed","name":"typescript:S1854","tags":["cwe","unused"],"full_description":"Unused assignments should be removed","help":"<h2>Why is this an issue?</h2>\n<p>Dead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and don’t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program’s correctness, they are - at best - a waste\nof computing resources.</p>\n<h3>Exceptions</h3>\n<p>The rule ignores</p>\n<ul>\n  <li> Initializations to <code>-1</code>, <code>0</code>, <code>1</code>, <code>undefined</code>, <code>[]</code>, <code>{}</code>,\n  <code>true</code>, <code>false</code> and <code>\"\"</code>. </li>\n  <li> Variables that start with an underscore (e.g. <code>_unused</code>) are ignored. </li>\n  <li> Assignment of <code>null</code> is ignored because it is sometimes used to help garbage collection </li>\n  <li> Increment and decrement expressions are ignored because they are often used idiomatically instead of <code>x+1</code> </li>\n  <li> This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object) </li>\n</ul>\n<pre>\nlet {a, b, ...rest} = obj;  // 'a' and 'b' are compliant\ndoSomething(rest);\n\nlet [x1, x2, x3] = arr;     // 'x1' is noncompliant, as omitting syntax can be used: \"let [, x2, x3] = arr;\"\ndoSomething(x2, x3);\n</pre>\n<h2>How to fix it</h2>\n<p>Remove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfunction foo(y) {\n  let x = 100; // Noncompliant: dead store\n  x = 150;     // Noncompliant: dead store\n  x = 200;\n  return x + y;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfunction foo(y) {\n  let x = 200; // Compliant: no unnecessary assignment\n  return x + y;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/563\">CWE-563 - Assignment to Variable without Use ('Unused Variable')</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:javascript:S1763} - All code should be reachable </li>\n  <li> {rule:javascript:S2589} - Boolean expressions should not be gratuitous </li>\n  <li> {rule:javascript:S3516} - Function returns should not be invariant </li>\n  <li> {rule:javascript:S3626} - Jump statements should not be redundant </li>\n</ul>","security_severity_level":"low"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYnBk4N6u4zRHudQtVns-->Remove this useless assignment to variable \"errorMessage\". <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYnBk4N6u4zRHudQtVns&open=AYnBk4N6u4zRHudQtVns\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/modals/RequestChangeModal.tsx","start_line":53,"end_line":53,"start_column":10,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/68/instances","dismissal_approved_by":null},{"number":67,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/67","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/67","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFeQGmeRHdhtCi1yp-->Extract the assignment of \"type\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYHeFeQGmeRHdhtCi1yp&open=AYHeFeQGmeRHdhtCi1yp\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/RichText/example-setup/inputrules.js","start_line":59,"end_line":59,"start_column":13,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/67/instances","dismissal_approved_by":null},{"number":66,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/66","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/66","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFeQGmeRHdhtCi1yo-->Extract the assignment of \"type\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYHeFeQGmeRHdhtCi1yo&open=AYHeFeQGmeRHdhtCi1yo\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/RichText/example-setup/inputrules.js","start_line":58,"end_line":58,"start_column":13,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/66/instances","dismissal_approved_by":null},{"number":65,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/65","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/65","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFeQGmeRHdhtCi1yn-->Extract the assignment of \"type\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYHeFeQGmeRHdhtCi1yn&open=AYHeFeQGmeRHdhtCi1yn\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/RichText/example-setup/inputrules.js","start_line":57,"end_line":57,"start_column":13,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/65/instances","dismissal_approved_by":null},{"number":64,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/64","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/64","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFeQGmeRHdhtCi1ym-->Extract the assignment of \"type\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYHeFeQGmeRHdhtCi1ym&open=AYHeFeQGmeRHdhtCi1ym\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/RichText/example-setup/inputrules.js","start_line":56,"end_line":56,"start_column":13,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/64/instances","dismissal_approved_by":null},{"number":63,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/63","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/63","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFePwmeRHdhtCi1yZ-->Extract the assignment of \"type\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYHeFePwmeRHdhtCi1yZ&open=AYHeFePwmeRHdhtCi1yZ\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/RichText/example-setup/keymap.js","start_line":81,"end_line":81,"start_column":13,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/63/instances","dismissal_approved_by":null},{"number":62,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/62","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/62","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFePwmeRHdhtCi1yY-->Extract the assignment of \"type\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYHeFePwmeRHdhtCi1yY&open=AYHeFePwmeRHdhtCi1yY\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/RichText/example-setup/keymap.js","start_line":76,"end_line":76,"start_column":13,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/62/instances","dismissal_approved_by":null},{"number":61,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/61","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/61","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFePwmeRHdhtCi1yX-->Extract the assignment of \"type\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYHeFePwmeRHdhtCi1yX&open=AYHeFePwmeRHdhtCi1yX\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/RichText/example-setup/keymap.js","start_line":72,"end_line":72,"start_column":13,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/61/instances","dismissal_approved_by":null},{"number":60,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/60","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/60","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFePwmeRHdhtCi1yf-->Extract the assignment of \"type\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYHeFePwmeRHdhtCi1yf&open=AYHeFePwmeRHdhtCi1yf\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/RichText/example-setup/keymap.js","start_line":101,"end_line":101,"start_column":13,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/60/instances","dismissal_approved_by":null},{"number":59,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/59","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/59","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFePwmeRHdhtCi1ye-->Extract the assignment of \"type\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYHeFePwmeRHdhtCi1ye&open=AYHeFePwmeRHdhtCi1ye\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/RichText/example-setup/keymap.js","start_line":100,"end_line":100,"start_column":13,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/59/instances","dismissal_approved_by":null},{"number":58,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/58","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/58","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFePwmeRHdhtCi1yd-->Extract the assignment of \"type\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYHeFePwmeRHdhtCi1yd&open=AYHeFePwmeRHdhtCi1yd\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/RichText/example-setup/keymap.js","start_line":95,"end_line":95,"start_column":13,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/58/instances","dismissal_approved_by":null},{"number":57,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/57","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/57","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFePwmeRHdhtCi1yc-->Extract the assignment of \"type\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYHeFePwmeRHdhtCi1yc&open=AYHeFePwmeRHdhtCi1yc\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/RichText/example-setup/keymap.js","start_line":85,"end_line":85,"start_column":13,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/57/instances","dismissal_approved_by":null},{"number":56,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/56","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/56","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFePwmeRHdhtCi1yb-->Extract the assignment of \"type\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYHeFePwmeRHdhtCi1yb&open=AYHeFePwmeRHdhtCi1yb\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/RichText/example-setup/keymap.js","start_line":84,"end_line":84,"start_column":13,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/56/instances","dismissal_approved_by":null},{"number":55,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/55","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/55","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"javascript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"javascript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYHeFePwmeRHdhtCi1ya-->Extract the assignment of \"type\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYHeFePwmeRHdhtCi1ya&open=AYHeFePwmeRHdhtCi1ya\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/RichText/example-setup/keymap.js","start_line":82,"end_line":82,"start_column":13,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/55/instances","dismissal_approved_by":null},{"number":54,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/54","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/54","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"typescript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"typescript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYd-pr0Hw2MCY1jpOIzZ-->Extract the assignment of \"itemName\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYd-pr0Hw2MCY1jpOIzZ&open=AYd-pr0Hw2MCY1jpOIzZ\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/ReferralActivityIndicator/index.tsx","start_line":266,"end_line":266,"start_column":21,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/54/instances","dismissal_approved_by":null},{"number":53,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/53","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/53","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"typescript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"typescript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYd-pr0Hw2MCY1jpOIzY-->Extract the assignment of \"itemName\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYd-pr0Hw2MCY1jpOIzY&open=AYd-pr0Hw2MCY1jpOIzY\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/ReferralActivityIndicator/index.tsx","start_line":265,"end_line":265,"start_column":21,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/53/instances","dismissal_approved_by":null},{"number":52,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/52","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/52","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"typescript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"typescript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYd-pr0Hw2MCY1jpOIzX-->Extract the assignment of \"itemName\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYd-pr0Hw2MCY1jpOIzX&open=AYd-pr0Hw2MCY1jpOIzX\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/ReferralActivityIndicator/index.tsx","start_line":239,"end_line":239,"start_column":21,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/52/instances","dismissal_approved_by":null},{"number":51,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/51","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/51","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"typescript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"typescript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYd-pr0Hw2MCY1jpOIzW-->Extract the assignment of \"itemName\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYd-pr0Hw2MCY1jpOIzW&open=AYd-pr0Hw2MCY1jpOIzW\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/ReferralActivityIndicator/index.tsx","start_line":238,"end_line":238,"start_column":21,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/51/instances","dismissal_approved_by":null},{"number":50,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/50","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/50","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"typescript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"typescript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYd-pr0Hw2MCY1jpOIzd-->Extract the assignment of \"itemName\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYd-pr0Hw2MCY1jpOIzd&open=AYd-pr0Hw2MCY1jpOIzd\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/ReferralActivityIndicator/index.tsx","start_line":300,"end_line":300,"start_column":21,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/50/instances","dismissal_approved_by":null},{"number":49,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/49","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/49","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"typescript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"typescript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYd-pr0Hw2MCY1jpOIzc-->Extract the assignment of \"itemName\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYd-pr0Hw2MCY1jpOIzc&open=AYd-pr0Hw2MCY1jpOIzc\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/ReferralActivityIndicator/index.tsx","start_line":299,"end_line":299,"start_column":21,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/49/instances","dismissal_approved_by":null},{"number":48,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/48","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/48","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"typescript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"typescript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYd-pr0Hw2MCY1jpOIzb-->Extract the assignment of \"itemName\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYd-pr0Hw2MCY1jpOIzb&open=AYd-pr0Hw2MCY1jpOIzb\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/ReferralActivityIndicator/index.tsx","start_line":284,"end_line":284,"start_column":21,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/48/instances","dismissal_approved_by":null},{"number":47,"created_at":"2025-07-15T13:52:42Z","updated_at":"2025-07-15T13:52:42Z","url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/47","html_url":"https://github.com/MTES-MCT/partaj/security/code-scanning/47","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"typescript:S1121","severity":"warning","description":"Assignments should not be made from within sub-expressions","name":"typescript:S1121","tags":["cwe","suspicious"],"full_description":"Assignments should not be made from within sub-expressions","help":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Moreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: <code>let x = y = 1;</code>. If <code>y</code> is not declared, it will be hoisted as global.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise issues for the following patterns:</p>\n<ul>\n  <li> chained assignments: <code>a = b = c = 0;</code> </li>\n  <li> relational assignments: <code>(a = 0) != b</code> </li>\n  <li> sequential assignments: <code>a = 0, b = 1, c = 2</code> </li>\n  <li> assignments in lambda body: <code>() =&gt; a = 0</code> </li>\n  <li> conditional assignment idiom: <code>a || (a = 0)</code> </li>\n  <li> assignments in (do-)while conditions: <code>while (a = 0);</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (val = value() &amp;&amp; check()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nval = value();\nif (val &amp;&amp; check()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n</ul>","security_severity_level":"medium"},"tool":{"name":"SonarCloud","guid":null,"version":null},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"(default)","environment":"{}","category":"","state":"open","commit_sha":"da85836decb3b7e73a6dd07a5f07c3b5126a6999","message":{"text":"<!--SONAR_ISSUE_KEY:AYd-pr0Hw2MCY1jpOIza-->Extract the assignment of \"itemName\" from this expression. <p>See more on <a href=\"https://sonarcloud.io/project/issues?id=MTES-MCT_partaj&issues=AYd-pr0Hw2MCY1jpOIza&open=AYd-pr0Hw2MCY1jpOIza\">SonarQube Cloud</a></p>"},"location":{"path":"src/frontend/js/components/ReferralActivityIndicator/index.tsx","start_line":283,"end_line":283,"start_column":21,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/partaj/code-scanning/alerts/47/instances","dismissal_approved_by":null}]}]}