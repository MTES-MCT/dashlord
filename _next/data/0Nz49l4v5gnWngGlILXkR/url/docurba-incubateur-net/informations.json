{"pageProps":{"selectedTab":"informations","url":"https://docurba.incubateur.net","report":{"404":[],"url":"https://docurba.incubateur.net","category":"amenagement","betaId":"docurba","repositories":["MTES-MCT/docurba"],"http":{"error":"The site seems to be down."},"updownio":null,"nmap":{"host":"docurba.incubateur.net","protocol":"tcp","closed_ports":"998","open_ports":[{"service":{"name":"http","product":"Google httpd","id":"80","vulnerabilities":[]}},{"service":{"name":"https","id":"443","vulnerabilities":[]}}],"grade":"A"},"dependabot":{"totalCount":53,"grade":"D","repositories":[{"url":"https://github.com/MTES-MCT/Docurba","vulnerabilityAlerts":{"totalCount":53,"nodes":[{"dismissedAt":null,"createdAt":"2025-02-02T11:32:56Z","securityVulnerability":{"severity":"MODERATE","package":{"name":"xml2js"},"advisory":{"identifiers":[{"type":"GHSA","value":"GHSA-776f-qx25-q3cc"},{"type":"CVE","value":"CVE-2023-0842"}],"references":[{"url":"https://nvd.nist.gov/vuln/detail/CVE-2023-0842"},{"url":"https://github.com/Leonidas-from-XIV/node-xml2js/issues/663"},{"url":"https://github.com/Leonidas-from-XIV/node-xml2js/pull/603/commits/581b19a62d88f8a3c068b5a45f4542c2d6a495a5"},{"url":"https://fluidattacks.com/advisories/myers"},{"url":"https://github.com/Leonidas-from-XIV/node-xml2js"},{"url":"https://lists.debian.org/debian-lts-announce/2024/03/msg00013.html"},{"url":"https://github.com/advisories/GHSA-776f-qx25-q3cc"}]}}},{"dismissedAt":null,"createdAt":"2025-02-02T11:32:56Z","securityVulnerability":{"severity":"MODERATE","package":{"name":"postcss"},"advisory":{"identifiers":[{"type":"GHSA","value":"GHSA-7fh5-64p2-3v2j"},{"type":"CVE","value":"CVE-2023-44270"}],"references":[{"url":"https://nvd.nist.gov/vuln/detail/CVE-2023-44270"},{"url":"https://github.com/postcss/postcss/commit/58cc860b4c1707510c9cd1bc1fa30b423a9ad6c5"},{"url":"https://github.com/postcss/postcss/blob/main/lib/tokenize.js#L25"},{"url":"https://github.com/postcss/postcss/releases/tag/8.4.31"},{"url":"https://github.com/github/advisory-database/issues/2820"},{"url":"https://github.com/advisories/GHSA-7fh5-64p2-3v2j"}]}}},{"dismissedAt":null,"createdAt":"2025-02-02T11:32:56Z","securityVulnerability":{"severity":"LOW","package":{"name":"ip"},"advisory":{"identifiers":[{"type":"GHSA","value":"GHSA-78xj-cgh5-2h22"},{"type":"CVE","value":"CVE-2023-42282"}],"references":[{"url":"https://nvd.nist.gov/vuln/detail/CVE-2023-42282"},{"url":"https://cosmosofcyberspace.github.io/npm_ip_cve/npm_ip_cve.html"},{"url":"https://github.com/JoshGlazebrook/socks/issues/93#issue-2128357447"},{"url":"https://github.com/github/advisory-database/pull/3504#issuecomment-1937179999"},{"url":"https://github.com/indutny/node-ip/pull/138"},{"url":"https://github.com/indutny/node-ip/commit/32f468f1245574785ec080705737a579be1223aa"},{"url":"https://github.com/indutny/node-ip/commit/6a3ada9b471b09d5f0f5be264911ab564bf67894"},{"url":"https://github.com/advisories/GHSA-78xj-cgh5-2h22"}]}}},{"dismissedAt":null,"createdAt":"2025-02-02T11:32:56Z","securityVulnerability":{"severity":"MODERATE","package":{"name":"axios"},"advisory":{"identifiers":[{"type":"GHSA","value":"GHSA-wf5p-g6vw-rhxx"},{"type":"CVE","value":"CVE-2023-45857"}],"references":[{"url":"https://nvd.nist.gov/vuln/detail/CVE-2023-45857"},{"url":"https://github.com/axios/axios/issues/6006"},{"url":"https://github.com/axios/axios/issues/6022"},{"url":"https://github.com/axios/axios/pull/6028"},{"url":"https://github.com/axios/axios/commit/96ee232bd3ee4de2e657333d4d2191cd389e14d0"},{"url":"https://github.com/axios/axios/releases/tag/v1.6.0"},{"url":"https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459"},{"url":"https://github.com/axios/axios/pull/6091"},{"url":"https://github.com/axios/axios/commit/2755df562b9c194fba6d8b609a383443f6a6e967"},{"url":"https://github.com/axios/axios/releases/tag/v0.28.0"},{"url":"https://security.netapp.com/advisory/ntap-20240621-0006"},{"url":"https://github.com/advisories/GHSA-wf5p-g6vw-rhxx"}]}}},{"dismissedAt":null,"createdAt":"2025-02-02T11:32:56Z","securityVulnerability":{"severity":"LOW","package":{"name":"es5-ext"},"advisory":{"identifiers":[{"type":"GHSA","value":"GHSA-4gmj-3p3h-gm8h"},{"type":"CVE","value":"CVE-2024-27088"}],"references":[{"url":"https://github.com/medikoo/es5-ext/security/advisories/GHSA-4gmj-3p3h-gm8h"},{"url":"https://nvd.nist.gov/vuln/detail/CVE-2024-27088"},{"url":"https://github.com/medikoo/es5-ext/issues/201"},{"url":"https://github.com/medikoo/es5-ext/commit/3551cdd7b2db08b1632841f819d008757d28e8e2"},{"url":"https://github.com/medikoo/es5-ext/commit/a52e95736690ad1d465ebcd9791d54570e294602"},{"url":"https://github.com/advisories/GHSA-4gmj-3p3h-gm8h"}]}}},{"dismissedAt":null,"createdAt":"2025-02-02T11:32:56Z","securityVulnerability":{"severity":"MODERATE","package":{"name":"follow-redirects"},"advisory":{"identifiers":[{"type":"GHSA","value":"GHSA-cxjh-pqwp-8mfp"},{"type":"CVE","value":"CVE-2024-28849"}],"references":[{"url":"https://github.com/follow-redirects/follow-redirects/security/advisories/GHSA-cxjh-pqwp-8mfp"},{"url":"https://github.com/follow-redirects/follow-redirects/commit/c4f847f85176991f95ab9c88af63b1294de8649b"},{"url":"https://fetch.spec.whatwg.org/#authentication-entries"},{"url":"https://nvd.nist.gov/vuln/detail/CVE-2024-28849"},{"url":"https://github.com/psf/requests/issues/1885"},{"url":"https://hackerone.com/reports/2390009"},{"url":"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VOIF4EPQUCKDBEVTGRQDZ3CGTYQHPO7Z"},{"url":"https://github.com/advisories/GHSA-cxjh-pqwp-8mfp"}]}}},{"dismissedAt":null,"createdAt":"2025-02-02T11:32:56Z","securityVulnerability":{"severity":"HIGH","package":{"name":"webpack-dev-middleware"},"advisory":{"identifiers":[{"type":"GHSA","value":"GHSA-wr3j-pwj9-hqq6"},{"type":"CVE","value":"CVE-2024-29180"}],"references":[{"url":"https://github.com/webpack/webpack-dev-middleware/security/advisories/GHSA-wr3j-pwj9-hqq6"},{"url":"https://nvd.nist.gov/vuln/detail/CVE-2024-29180"},{"url":"https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132"},{"url":"https://github.com/webpack/webpack-dev-middleware/commit/9670b3495da518fe667ff3428c5e4cb9f2f3d353"},{"url":"https://github.com/webpack/webpack-dev-middleware/commit/e10008c762e4d5821ed6990348dabf0d4d93a10e"},{"url":"https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82"},{"url":"https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21"},{"url":"https://github.com/webpack/webpack-dev-middleware/releases/tag/v5.3.4"},{"url":"https://github.com/webpack/webpack-dev-middleware/releases/tag/v6.1.2"},{"url":"https://github.com/webpack/webpack-dev-middleware/releases/tag/v7.1.0"},{"url":"https://github.com/advisories/GHSA-wr3j-pwj9-hqq6"}]}}},{"dismissedAt":null,"createdAt":"2025-02-02T11:32:56Z","securityVulnerability":{"severity":"MODERATE","package":{"name":"express"},"advisory":{"identifiers":[{"type":"GHSA","value":"GHSA-rv95-896h-c2vc"},{"type":"CVE","value":"CVE-2024-29041"}],"references":[{"url":"https://github.com/expressjs/express/security/advisories/GHSA-rv95-896h-c2vc"},{"url":"https://github.com/koajs/koa/issues/1800"},{"url":"https://github.com/expressjs/express/pull/5539"},{"url":"https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd"},{"url":"https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94"},{"url":"https://expressjs.com/en/4x/api.html#res.location"},{"url":"https://nvd.nist.gov/vuln/detail/CVE-2024-29041"},{"url":"https://github.com/advisories/GHSA-rv95-896h-c2vc"}]}}},{"dismissedAt":null,"createdAt":"2025-02-02T11:32:57Z","securityVulnerability":{"severity":"MODERATE","package":{"name":"tar"},"advisory":{"identifiers":[{"type":"GHSA","value":"GHSA-f5x3-32g6-xq36"},{"type":"CVE","value":"CVE-2024-28863"}],"references":[{"url":"https://github.com/isaacs/node-tar/security/advisories/GHSA-f5x3-32g6-xq36"},{"url":"https://nvd.nist.gov/vuln/detail/CVE-2024-28863"},{"url":"https://github.com/isaacs/node-tar/commit/fe8cd57da5686f8695415414bda49206a545f7f7"},{"url":"https://security.netapp.com/advisory/ntap-20240524-0005"},{"url":"https://github.com/advisories/GHSA-f5x3-32g6-xq36"}]}}},{"dismissedAt":null,"createdAt":"2025-02-02T11:32:57Z","securityVulnerability":{"severity":"HIGH","package":{"name":"lodash.template"},"advisory":{"identifiers":[{"type":"GHSA","value":"GHSA-35jh-r3h4-6jhm"},{"type":"CVE","value":"CVE-2021-23337"}],"references":[{"url":"https://nvd.nist.gov/vuln/detail/CVE-2021-23337"},{"url":"https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"},{"url":"https://snyk.io/vuln/SNYK-JS-LODASH-1040724"},{"url":"https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851"},{"url":"https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"},{"url":"https://snyk.io/vuln/SNYK-JAVA-ORGFUJIONWEBJARS-1074932"},{"url":"https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARS-1074930"},{"url":"https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-1074928"},{"url":"https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWERGITHUBLODASH-1074931"},{"url":"https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1074929"},{"url":"https://www.oracle.com//security-alerts/cpujul2021.html"},{"url":"https://www.oracle.com/security-alerts/cpuoct2021.html"},{"url":"https://www.oracle.com/security-alerts/cpujan2022.html"},{"url":"https://www.oracle.com/security-alerts/cpujul2022.html"},{"url":"https://cert-portal.siemens.com/productcert/pdf/ssa-637483.pdf"},{"url":"https://security.netapp.com/advisory/ntap-20210312-0006"},{"url":"https://github.com/advisories/GHSA-35jh-r3h4-6jhm"}]}}},{"dismissedAt":null,"createdAt":"2025-02-02T11:32:57Z","securityVulnerability":{"severity":"HIGH","package":{"name":"html-minifier"},"advisory":{"identifiers":[{"type":"GHSA","value":"GHSA-pfq8-rq6v-vf5m"},{"type":"CVE","value":"CVE-2022-37620"}],"references":[{"url":"https://nvd.nist.gov/vuln/detail/CVE-2022-37620"},{"url":"https://github.com/kangax/html-minifier/issues/1135"},{"url":"https://github.com/kangax/html-minifier/blob/51ce10f4daedb1de483ffbcccecc41be1c873da2/src/htmlminifier.js#L1338"},{"url":"https://github.com/kangax/html-minifier/blob/51ce10f4daedb1de483ffbcccecc41be1c873da2/src/htmlminifier.js#L294"},{"url":"https://github.com/advisories/GHSA-pfq8-rq6v-vf5m"}]}}},{"dismissedAt":null,"createdAt":"2025-02-02T11:32:57Z","securityVulnerability":{"severity":"HIGH","package":{"name":"ip"},"advisory":{"identifiers":[{"type":"GHSA","value":"GHSA-2p57-rm9w-gvfp"},{"type":"CVE","value":"CVE-2024-29415"}],"references":[{"url":"https://nvd.nist.gov/vuln/detail/CVE-2024-29415"},{"url":"https://github.com/indutny/node-ip/issues/150"},{"url":"https://github.com/indutny/node-ip/pull/143"},{"url":"https://github.com/indutny/node-ip/pull/144"},{"url":"https://security.netapp.com/advisory/ntap-20250117-0010"},{"url":"https://github.com/advisories/GHSA-2p57-rm9w-gvfp"}]}}},{"dismissedAt":null,"createdAt":"2025-02-02T11:32:57Z","securityVulnerability":{"severity":"HIGH","package":{"name":"braces"},"advisory":{"identifiers":[{"type":"GHSA","value":"GHSA-grv7-fg5c-xmjg"},{"type":"CVE","value":"CVE-2024-4068"}],"references":[{"url":"https://nvd.nist.gov/vuln/detail/CVE-2024-4068"},{"url":"https://github.com/micromatch/braces/issues/35"},{"url":"https://devhub.checkmarx.com/cve-details/CVE-2024-4068"},{"url":"https://github.com/micromatch/braces/blob/98414f9f1fabe021736e26836d8306d5de747e0d/lib/parse.js#L308"},{"url":"https://github.com/micromatch/braces/pull/37"},{"url":"https://github.com/micromatch/braces/pull/40"},{"url":"https://github.com/micromatch/braces/commit/415d660c3002d1ab7e63dbf490c9851da80596ff"},{"url":"https://github.com/advisories/GHSA-grv7-fg5c-xmjg"}]}}},{"dismissedAt":null,"createdAt":"2025-02-02T11:32:57Z","securityVulnerability":{"severity":"HIGH","package":{"name":"ws"},"advisory":{"identifiers":[{"type":"GHSA","value":"GHSA-3h5v-q93c-6h6q"},{"type":"CVE","value":"CVE-2024-37890"}],"references":[{"url":"https://github.com/websockets/ws/security/advisories/GHSA-3h5v-q93c-6h6q"},{"url":"https://github.com/websockets/ws/issues/2230"},{"url":"https://github.com/websockets/ws/pull/2231"},{"url":"https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f"},{"url":"https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e"},{"url":"https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c"},{"url":"https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63"},{"url":"https://github.com/advisories/GHSA-3h5v-q93c-6h6q"}]}}},{"dismissedAt":null,"createdAt":"2025-02-02T11:32:57Z","securityVulnerability":{"severity":"MODERATE","package":{"name":"vue-template-compiler"},"advisory":{"identifiers":[{"type":"GHSA","value":"GHSA-g3ch-rx76-35fx"},{"type":"CVE","value":"CVE-2024-6783"}],"references":[{"url":"https://nvd.nist.gov/vuln/detail/CVE-2024-6783"},{"url":"https://www.herodevs.com/vulnerability-directory/cve-2024-6783"},{"url":"https://github.com/advisories/GHSA-g3ch-rx76-35fx"}]}}},{"dismissedAt":null,"createdAt":"2025-02-02T11:32:58Z","securityVulnerability":{"severity":"LOW","package":{"name":"elliptic"},"advisory":{"identifiers":[{"type":"GHSA","value":"GHSA-f7q4-pwc6-w24p"},{"type":"CVE","value":"CVE-2024-42459"}],"references":[{"url":"https://nvd.nist.gov/vuln/detail/CVE-2024-42459"},{"url":"https://github.com/indutny/elliptic/pull/317"},{"url":"https://github.com/indutny/elliptic/commit/c0690b36be043ee73c1780ae4b7df48632b11cf9"},{"url":"https://github.com/indutny/elliptic/commit/accb61e9c1a005e5c8ff96a8b33893100bb42d11"},{"url":"https://github.com/advisories/GHSA-f7q4-pwc6-w24p"}]}}},{"dismissedAt":null,"createdAt":"2025-02-02T11:32:58Z","securityVulnerability":{"severity":"LOW","package":{"name":"elliptic"},"advisory":{"identifiers":[{"type":"GHSA","value":"GHSA-977x-g7h5-7qgw"},{"type":"CVE","value":"CVE-2024-42460"}],"references":[{"url":"https://nvd.nist.gov/vuln/detail/CVE-2024-42460"},{"url":"https://github.com/indutny/elliptic/pull/317"},{"url":"https://github.com/indutny/elliptic/commit/b6ff1758d9a6d1a7aec177ff6df9f586492a6315"},{"url":"https://github.com/indutny/elliptic/commit/accb61e9c1a005e5c8ff96a8b33893100bb42d11"},{"url":"https://github.com/advisories/GHSA-977x-g7h5-7qgw"}]}}},{"dismissedAt":null,"createdAt":"2025-02-02T11:32:58Z","securityVulnerability":{"severity":"LOW","package":{"name":"elliptic"},"advisory":{"identifiers":[{"type":"GHSA","value":"GHSA-49q7-c7j4-3p7m"},{"type":"CVE","value":"CVE-2024-42461"}],"references":[{"url":"https://nvd.nist.gov/vuln/detail/CVE-2024-42461"},{"url":"https://github.com/indutny/elliptic/pull/317"},{"url":"https://github.com/indutny/elliptic/commit/accb61e9c1a005e5c8ff96a8b33893100bb42d11"},{"url":"https://github.com/advisories/GHSA-49q7-c7j4-3p7m"}]}}},{"dismissedAt":null,"createdAt":"2025-02-02T11:32:58Z","securityVulnerability":{"severity":"MODERATE","package":{"name":"nuxt"},"advisory":{"identifiers":[{"type":"GHSA","value":"GHSA-vf6r-87q4-2vjf"},{"type":"CVE","value":"CVE-2024-34343"}],"references":[{"url":"https://github.com/nuxt/nuxt/security/advisories/GHSA-vf6r-87q4-2vjf"},{"url":"https://nvd.nist.gov/vuln/detail/CVE-2024-34343"},{"url":"https://github.com/advisories/GHSA-vf6r-87q4-2vjf"}]}}},{"dismissedAt":null,"createdAt":"2025-02-02T11:32:58Z","securityVulnerability":{"severity":"HIGH","package":{"name":"axios"},"advisory":{"identifiers":[{"type":"GHSA","value":"GHSA-8hc4-vh64-cxmj"},{"type":"CVE","value":"CVE-2024-39338"}],"references":[{"url":"https://nvd.nist.gov/vuln/detail/CVE-2024-39338"},{"url":"https://github.com/axios/axios/releases"},{"url":"https://jeffhacks.com/advisories/2024/06/24/CVE-2024-39338.html"},{"url":"https://github.com/axios/axios/issues/6463"},{"url":"https://github.com/axios/axios/pull/6539"},{"url":"https://github.com/axios/axios/pull/6543"},{"url":"https://github.com/axios/axios/commit/6b6b605eaf73852fb2dae033f1e786155959de3a"},{"url":"https://github.com/axios/axios/releases/tag/v1.7.4"},{"url":"https://github.com/advisories/GHSA-8hc4-vh64-cxmj"}]}}}]},"grade":"D"}]},"codescan":{"totalCount":18,"grade":"F","repositories":[{"url":"https://github.com/MTES-MCT/docurba","grade":"F","alerts":[{"number":53,"created_at":"2025-02-02T11:32:22Z","updated_at":"2025-02-02T11:34:19Z","url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/53","html_url":"https://github.com/MTES-MCT/Docurba/security/code-scanning/53","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-url-substring-sanitization","severity":"warning","description":"Incomplete URL substring sanitization","name":"js/incomplete-url-substring-sanitization","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.","help":"# Incomplete URL substring sanitization\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains, and not some malicious site.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\");\n    // BAD: the host of `url` may be controlled by an attacker\n    if (url.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThe substring check is, however, easy to bypass. For example by embedding `example.com` in the path component: `http://evil-example.net/example.com`, or in the query string component: `http://evil-example.net/?x=example.com`. Address these shortcomings by checking the host of the parsed URL instead:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\"),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    if (host.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThis is still not a sufficient check as the following URLs bypass it: `http://evil-example.com` `http://example.com.evil-example.net`. Instead, use an explicit whitelist of allowed hosts to make the redirect secure:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // GOOD: the host of `url` can not be controlled by an attacker\n    let allowedHosts = [\n        'example.com',\n        'beta.example.com',\n        'www.example.com'\n    ];\n    if (allowedHosts.includes(host)) {\n        res.redirect(url);\n    }\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.5"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"23648bbf5ecdd4f14fb1e70223ff618368597b05","message":{"text":"'incubateur.net' can be anywhere in the URL, and arbitrary hosts may come before or after it."},"location":{"path":"nuxt/server-middleware/redirects.js","start_line":16,"end_line":16,"start_column":7,"end_column":46},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/53/instances","dismissal_approved_by":null},{"number":52,"created_at":"2025-02-02T11:32:22Z","updated_at":"2025-02-02T11:34:19Z","url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/52","html_url":"https://github.com/MTES-MCT/Docurba/security/code-scanning/52","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-url-substring-sanitization","severity":"warning","description":"Incomplete URL substring sanitization","name":"js/incomplete-url-substring-sanitization","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.","help":"# Incomplete URL substring sanitization\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains, and not some malicious site.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\");\n    // BAD: the host of `url` may be controlled by an attacker\n    if (url.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThe substring check is, however, easy to bypass. For example by embedding `example.com` in the path component: `http://evil-example.net/example.com`, or in the query string component: `http://evil-example.net/?x=example.com`. Address these shortcomings by checking the host of the parsed URL instead:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\"),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    if (host.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThis is still not a sufficient check as the following URLs bypass it: `http://evil-example.com` `http://example.com.evil-example.net`. Instead, use an explicit whitelist of allowed hosts to make the redirect secure:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // GOOD: the host of `url` can not be controlled by an attacker\n    let allowedHosts = [\n        'example.com',\n        'beta.example.com',\n        'www.example.com'\n    ];\n    if (allowedHosts.includes(host)) {\n        res.redirect(url);\n    }\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.5"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"23648bbf5ecdd4f14fb1e70223ff618368597b05","message":{"text":"'https://docurba.beta.gouv.fr' may be followed by an arbitrary host name."},"location":{"path":"nuxt/plugins/pdfMake.js","start_line":277,"end_line":277,"start_column":25,"end_column":85},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/52/instances","dismissal_approved_by":null},{"number":51,"created_at":"2025-02-02T11:32:22Z","updated_at":"2025-02-02T11:34:19Z","url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/51","html_url":"https://github.com/MTES-MCT/Docurba/security/code-scanning/51","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/request-forgery","severity":"error","description":"Server-side request forgery","name":"js/request-forgery","tags":["external/cwe/cwe-918","security"],"full_description":"Making a network request with user-controlled data in the URL allows for request forgery attacks.","help":"# Server-side request forgery\nDirectly incorporating user input in the URL of an outgoing HTTP request can enable a request forgery attack, in which the request is altered to target an unintended API endpoint or resource. If the server performing the request is connected to an internal network, this can give an attacker the means to bypass the network boundary and make requests against internal services. A forged request may perform an unintended action on behalf of the attacker, or cause information leak if redirected to an external server or if the request response is fed back to the user. It may also compromise the server making the request, if the request response is handled in an unsafe way.\n\n\n## Recommendation\nRestrict user inputs in the URL of an outgoing request, in particular:\n\n* Avoid user input in the hostname of the URL. Pick the hostname from an allow-list instead of constructing it directly from user input.\n* Take care when user input is part of the pathname of the URL. Restrict the input so that path traversal (\"`../`\") cannot be used to redirect the request to an unintended endpoint.\n\n## Example\nThe following example shows an HTTP request parameter being used directly in the URL of a request without validating the input, which facilitates an SSRF attack. The request `http.get(...)` is vulnerable since attackers can choose the value of `target` to be anything they want. For instance, the attacker can choose `\"internal.example.com/#\"` as the target, causing the URL used in the request to be `\"https://internal.example.com/#.example.com/data\"`.\n\nA request to `https://internal.example.com` may be problematic if that server is not meant to be directly accessible from the attacker's machine.\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    // BAD: `target` is controlled by the attacker\n    http.get('https://' + target + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\nOne way to remedy the problem is to use the user input to select a known fixed string before performing the request:\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    let subdomain;\n    if (target === 'EU') {\n        subdomain = \"europe\"\n    } else {\n        subdomain = \"world\"\n    }\n\n    // GOOD: `subdomain` is controlled by the server\n    http.get('https://' + subdomain + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* Common Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.5"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"23648bbf5ecdd4f14fb1e70223ff618368597b05","message":{"text":"The URL of this request depends on a user-provided value."},"location":{"path":"nuxt/server-middleware/slack.js","start_line":213,"end_line":219,"start_column":9,"end_column":11},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/51/instances","dismissal_approved_by":null},{"number":50,"created_at":"2025-02-02T11:32:22Z","updated_at":"2025-02-02T11:34:19Z","url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/50","html_url":"https://github.com/MTES-MCT/Docurba/security/code-scanning/50","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/request-forgery","severity":"error","description":"Server-side request forgery","name":"js/request-forgery","tags":["external/cwe/cwe-918","security"],"full_description":"Making a network request with user-controlled data in the URL allows for request forgery attacks.","help":"# Server-side request forgery\nDirectly incorporating user input in the URL of an outgoing HTTP request can enable a request forgery attack, in which the request is altered to target an unintended API endpoint or resource. If the server performing the request is connected to an internal network, this can give an attacker the means to bypass the network boundary and make requests against internal services. A forged request may perform an unintended action on behalf of the attacker, or cause information leak if redirected to an external server or if the request response is fed back to the user. It may also compromise the server making the request, if the request response is handled in an unsafe way.\n\n\n## Recommendation\nRestrict user inputs in the URL of an outgoing request, in particular:\n\n* Avoid user input in the hostname of the URL. Pick the hostname from an allow-list instead of constructing it directly from user input.\n* Take care when user input is part of the pathname of the URL. Restrict the input so that path traversal (\"`../`\") cannot be used to redirect the request to an unintended endpoint.\n\n## Example\nThe following example shows an HTTP request parameter being used directly in the URL of a request without validating the input, which facilitates an SSRF attack. The request `http.get(...)` is vulnerable since attackers can choose the value of `target` to be anything they want. For instance, the attacker can choose `\"internal.example.com/#\"` as the target, causing the URL used in the request to be `\"https://internal.example.com/#.example.com/data\"`.\n\nA request to `https://internal.example.com` may be problematic if that server is not meant to be directly accessible from the attacker's machine.\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    // BAD: `target` is controlled by the attacker\n    http.get('https://' + target + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\nOne way to remedy the problem is to use the user input to select a known fixed string before performing the request:\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    let subdomain;\n    if (target === 'EU') {\n        subdomain = \"europe\"\n    } else {\n        subdomain = \"world\"\n    }\n\n    // GOOD: `subdomain` is controlled by the server\n    http.get('https://' + subdomain + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* Common Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.5"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"23648bbf5ecdd4f14fb1e70223ff618368597b05","message":{"text":"The URL of this request depends on a user-provided value."},"location":{"path":"nuxt/server-middleware/slack.js","start_line":157,"end_line":164,"start_column":5,"end_column":7},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/50/instances","dismissal_approved_by":null},{"number":49,"created_at":"2025-02-02T11:32:22Z","updated_at":"2025-02-02T11:34:19Z","url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/49","html_url":"https://github.com/MTES-MCT/Docurba/security/code-scanning/49","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/request-forgery","severity":"error","description":"Server-side request forgery","name":"js/request-forgery","tags":["external/cwe/cwe-918","security"],"full_description":"Making a network request with user-controlled data in the URL allows for request forgery attacks.","help":"# Server-side request forgery\nDirectly incorporating user input in the URL of an outgoing HTTP request can enable a request forgery attack, in which the request is altered to target an unintended API endpoint or resource. If the server performing the request is connected to an internal network, this can give an attacker the means to bypass the network boundary and make requests against internal services. A forged request may perform an unintended action on behalf of the attacker, or cause information leak if redirected to an external server or if the request response is fed back to the user. It may also compromise the server making the request, if the request response is handled in an unsafe way.\n\n\n## Recommendation\nRestrict user inputs in the URL of an outgoing request, in particular:\n\n* Avoid user input in the hostname of the URL. Pick the hostname from an allow-list instead of constructing it directly from user input.\n* Take care when user input is part of the pathname of the URL. Restrict the input so that path traversal (\"`../`\") cannot be used to redirect the request to an unintended endpoint.\n\n## Example\nThe following example shows an HTTP request parameter being used directly in the URL of a request without validating the input, which facilitates an SSRF attack. The request `http.get(...)` is vulnerable since attackers can choose the value of `target` to be anything they want. For instance, the attacker can choose `\"internal.example.com/#\"` as the target, causing the URL used in the request to be `\"https://internal.example.com/#.example.com/data\"`.\n\nA request to `https://internal.example.com` may be problematic if that server is not meant to be directly accessible from the attacker's machine.\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    // BAD: `target` is controlled by the attacker\n    http.get('https://' + target + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\nOne way to remedy the problem is to use the user input to select a known fixed string before performing the request:\n\n\n```javascript\nimport http from 'http';\n\nconst server = http.createServer(function(req, res) {\n    const target = new URL(req.url, \"http://example.com\").searchParams.get(\"target\");\n\n    let subdomain;\n    if (target === 'EU') {\n        subdomain = \"europe\"\n    } else {\n        subdomain = \"world\"\n    }\n\n    // GOOD: `subdomain` is controlled by the server\n    http.get('https://' + subdomain + \".example.com/data/\", res => {\n        // process request response ...\n    });\n\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* Common Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.5"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"23648bbf5ecdd4f14fb1e70223ff618368597b05","message":{"text":"The URL of this request depends on a user-provided value."},"location":{"path":"nuxt/server-middleware/modules/csw.js","start_line":145,"end_line":147,"start_column":30,"end_column":6},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/49/instances","dismissal_approved_by":null},{"number":48,"created_at":"2025-02-02T11:32:22Z","updated_at":"2025-02-02T11:34:19Z","url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/48","html_url":"https://github.com/MTES-MCT/Docurba/security/code-scanning/48","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/type-confusion-through-parameter-tampering","severity":"error","description":"Type confusion through parameter tampering","name":"js/type-confusion-through-parameter-tampering","tags":["external/cwe/cwe-843","security"],"full_description":"Sanitizing an HTTP request parameter may be ineffective if the user controls its type.","help":"# Type confusion through parameter tampering\nSanitizing untrusted HTTP request parameters is a common technique for preventing injection attacks such as SQL injection or path traversal. This is sometimes done by checking if the request parameters contain blacklisted substrings.\n\nHowever, sanitizing request parameters assuming they have type `String` and using the builtin string methods such as `String.prototype.indexOf` is susceptible to type confusion attacks. In a type confusion attack, an attacker tampers with an HTTP request parameter such that it has a value of type `Array` instead of the expected type `String`. Furthermore, the content of the array has been crafted to bypass sanitizers by exploiting that some identically named methods of strings and arrays behave differently.\n\n\n## Recommendation\nCheck the runtime type of sanitizer inputs if the input type is user-controlled.\n\nAn even safer alternative is to design the application so that sanitization is not needed, for instance by using prepared statements for SQL queries.\n\n\n## Example\nFor example, Node.js server frameworks usually present request parameters as strings. But if an attacker sends multiple request parameters with the same name, then the request parameter is represented as an array instead.\n\nIn the following example, a sanitizer checks that a path does not contain the `\"..\"` string, which would allow an attacker to access content outside a user-accessible directory.\n\n\n```javascript\nvar app = require(\"express\")(),\n  path = require(\"path\");\n\napp.get(\"/user-files\", function(req, res) {\n  var file = req.param(\"file\");\n  if (file.indexOf(\"..\") !== -1) {\n    // BAD\n    // we forbid relative paths that contain ..\n    // as these could leave the public directory\n    res.status(400).send(\"Bad request\");\n  } else {\n    var absolute = path.resolve(\"/public/\" + file);\n    console.log(\"Sending file: %s\", absolute);\n    res.sendFile(absolute);\n  }\n});\n\n```\nAs written, this sanitizer is ineffective: an array like `[\"../\", \"/../secret.txt\"]` will bypass the sanitizer. The array does not contain `\"..\"` as an element, so the call to `indexOf` returns `-1` . This is problematic since the value of the `absolute` variable then ends up being `\"/secret.txt\"`. This happens since the concatenation of `\"/public/\"` and the array results in `\"/public/../,/../secret.txt\"`, which the `resolve`-call converts to `\"/secret.txt\"`.\n\nTo fix the sanitizer, check that the request parameter is a string, and not an array:\n\n\n```javascript\nvar app = require(\"express\")(),\n  path = require(\"path\");\n\napp.get(\"/user-files\", function(req, res) {\n  var file = req.param(\"file\");\n  if (typeof file !== 'string' || file.indexOf(\"..\") !== -1) {\n    // GOOD\n    // we forbid relative paths that contain ..\n    // as these could leave the public directory\n    res.status(400).send(\"Bad request\");\n  } else {\n    var absolute = path.resolve(\"/public/\" + file);\n    console.log(\"Sending file: %s\", absolute);\n    res.sendFile(absolute);\n  }\n});\n\n```\n\n## References\n* Node.js API: [querystring](https://nodejs.org/api/querystring.html).\n* Common Weakness Enumeration: [CWE-843](https://cwe.mitre.org/data/definitions/843.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.5"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"23648bbf5ecdd4f14fb1e70223ff618368597b05","message":{"text":"Potential type confusion as this HTTP request parameter may be either an array or a string.\nPotential type confusion as this HTTP request parameter may be either an array or a string."},"location":{"path":"nuxt/server-middleware/modules/geo.js","start_line":102,"end_line":102,"start_column":16,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/48/instances","dismissal_approved_by":null},{"number":47,"created_at":"2025-02-02T11:32:22Z","updated_at":"2025-02-02T11:34:19Z","url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/47","html_url":"https://github.com/MTES-MCT/Docurba/security/code-scanning/47","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/type-confusion-through-parameter-tampering","severity":"error","description":"Type confusion through parameter tampering","name":"js/type-confusion-through-parameter-tampering","tags":["external/cwe/cwe-843","security"],"full_description":"Sanitizing an HTTP request parameter may be ineffective if the user controls its type.","help":"# Type confusion through parameter tampering\nSanitizing untrusted HTTP request parameters is a common technique for preventing injection attacks such as SQL injection or path traversal. This is sometimes done by checking if the request parameters contain blacklisted substrings.\n\nHowever, sanitizing request parameters assuming they have type `String` and using the builtin string methods such as `String.prototype.indexOf` is susceptible to type confusion attacks. In a type confusion attack, an attacker tampers with an HTTP request parameter such that it has a value of type `Array` instead of the expected type `String`. Furthermore, the content of the array has been crafted to bypass sanitizers by exploiting that some identically named methods of strings and arrays behave differently.\n\n\n## Recommendation\nCheck the runtime type of sanitizer inputs if the input type is user-controlled.\n\nAn even safer alternative is to design the application so that sanitization is not needed, for instance by using prepared statements for SQL queries.\n\n\n## Example\nFor example, Node.js server frameworks usually present request parameters as strings. But if an attacker sends multiple request parameters with the same name, then the request parameter is represented as an array instead.\n\nIn the following example, a sanitizer checks that a path does not contain the `\"..\"` string, which would allow an attacker to access content outside a user-accessible directory.\n\n\n```javascript\nvar app = require(\"express\")(),\n  path = require(\"path\");\n\napp.get(\"/user-files\", function(req, res) {\n  var file = req.param(\"file\");\n  if (file.indexOf(\"..\") !== -1) {\n    // BAD\n    // we forbid relative paths that contain ..\n    // as these could leave the public directory\n    res.status(400).send(\"Bad request\");\n  } else {\n    var absolute = path.resolve(\"/public/\" + file);\n    console.log(\"Sending file: %s\", absolute);\n    res.sendFile(absolute);\n  }\n});\n\n```\nAs written, this sanitizer is ineffective: an array like `[\"../\", \"/../secret.txt\"]` will bypass the sanitizer. The array does not contain `\"..\"` as an element, so the call to `indexOf` returns `-1` . This is problematic since the value of the `absolute` variable then ends up being `\"/secret.txt\"`. This happens since the concatenation of `\"/public/\"` and the array results in `\"/public/../,/../secret.txt\"`, which the `resolve`-call converts to `\"/secret.txt\"`.\n\nTo fix the sanitizer, check that the request parameter is a string, and not an array:\n\n\n```javascript\nvar app = require(\"express\")(),\n  path = require(\"path\");\n\napp.get(\"/user-files\", function(req, res) {\n  var file = req.param(\"file\");\n  if (typeof file !== 'string' || file.indexOf(\"..\") !== -1) {\n    // GOOD\n    // we forbid relative paths that contain ..\n    // as these could leave the public directory\n    res.status(400).send(\"Bad request\");\n  } else {\n    var absolute = path.resolve(\"/public/\" + file);\n    console.log(\"Sending file: %s\", absolute);\n    res.sendFile(absolute);\n  }\n});\n\n```\n\n## References\n* Node.js API: [querystring](https://nodejs.org/api/querystring.html).\n* Common Weakness Enumeration: [CWE-843](https://cwe.mitre.org/data/definitions/843.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.5"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"23648bbf5ecdd4f14fb1e70223ff618368597b05","message":{"text":"Potential type confusion as this HTTP request parameter may be either an array or a string.\nPotential type confusion as this HTTP request parameter may be either an array or a string."},"location":{"path":"nuxt/server-middleware/modules/geo.js","start_line":63,"end_line":63,"start_column":16,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/47/instances","dismissal_approved_by":null},{"number":46,"created_at":"2025-02-02T11:32:22Z","updated_at":"2025-02-02T11:34:19Z","url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/46","html_url":"https://github.com/MTES-MCT/Docurba/security/code-scanning/46","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/type-confusion-through-parameter-tampering","severity":"error","description":"Type confusion through parameter tampering","name":"js/type-confusion-through-parameter-tampering","tags":["external/cwe/cwe-843","security"],"full_description":"Sanitizing an HTTP request parameter may be ineffective if the user controls its type.","help":"# Type confusion through parameter tampering\nSanitizing untrusted HTTP request parameters is a common technique for preventing injection attacks such as SQL injection or path traversal. This is sometimes done by checking if the request parameters contain blacklisted substrings.\n\nHowever, sanitizing request parameters assuming they have type `String` and using the builtin string methods such as `String.prototype.indexOf` is susceptible to type confusion attacks. In a type confusion attack, an attacker tampers with an HTTP request parameter such that it has a value of type `Array` instead of the expected type `String`. Furthermore, the content of the array has been crafted to bypass sanitizers by exploiting that some identically named methods of strings and arrays behave differently.\n\n\n## Recommendation\nCheck the runtime type of sanitizer inputs if the input type is user-controlled.\n\nAn even safer alternative is to design the application so that sanitization is not needed, for instance by using prepared statements for SQL queries.\n\n\n## Example\nFor example, Node.js server frameworks usually present request parameters as strings. But if an attacker sends multiple request parameters with the same name, then the request parameter is represented as an array instead.\n\nIn the following example, a sanitizer checks that a path does not contain the `\"..\"` string, which would allow an attacker to access content outside a user-accessible directory.\n\n\n```javascript\nvar app = require(\"express\")(),\n  path = require(\"path\");\n\napp.get(\"/user-files\", function(req, res) {\n  var file = req.param(\"file\");\n  if (file.indexOf(\"..\") !== -1) {\n    // BAD\n    // we forbid relative paths that contain ..\n    // as these could leave the public directory\n    res.status(400).send(\"Bad request\");\n  } else {\n    var absolute = path.resolve(\"/public/\" + file);\n    console.log(\"Sending file: %s\", absolute);\n    res.sendFile(absolute);\n  }\n});\n\n```\nAs written, this sanitizer is ineffective: an array like `[\"../\", \"/../secret.txt\"]` will bypass the sanitizer. The array does not contain `\"..\"` as an element, so the call to `indexOf` returns `-1` . This is problematic since the value of the `absolute` variable then ends up being `\"/secret.txt\"`. This happens since the concatenation of `\"/public/\"` and the array results in `\"/public/../,/../secret.txt\"`, which the `resolve`-call converts to `\"/secret.txt\"`.\n\nTo fix the sanitizer, check that the request parameter is a string, and not an array:\n\n\n```javascript\nvar app = require(\"express\")(),\n  path = require(\"path\");\n\napp.get(\"/user-files\", function(req, res) {\n  var file = req.param(\"file\");\n  if (typeof file !== 'string' || file.indexOf(\"..\") !== -1) {\n    // GOOD\n    // we forbid relative paths that contain ..\n    // as these could leave the public directory\n    res.status(400).send(\"Bad request\");\n  } else {\n    var absolute = path.resolve(\"/public/\" + file);\n    console.log(\"Sending file: %s\", absolute);\n    res.sendFile(absolute);\n  }\n});\n\n```\n\n## References\n* Node.js API: [querystring](https://nodejs.org/api/querystring.html).\n* Common Weakness Enumeration: [CWE-843](https://cwe.mitre.org/data/definitions/843.html).\n","security_severity_level":"critical"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.5"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"23648bbf5ecdd4f14fb1e70223ff618368597b05","message":{"text":"Potential type confusion as this HTTP request parameter may be either an array or a string."},"location":{"path":"nuxt/server-middleware/communes.js","start_line":21,"end_line":21,"start_column":31,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/46/instances","dismissal_approved_by":null},{"number":45,"created_at":"2025-02-02T11:32:22Z","updated_at":"2025-02-02T11:34:19Z","url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/45","html_url":"https://github.com/MTES-MCT/Docurba/security/code-scanning/45","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/xss-through-exception","severity":"warning","description":"Exception text reinterpreted as HTML","name":"js/xss-through-exception","tags":["external/cwe/cwe-079","external/cwe/cwe-116","security"],"full_description":"Reinterpreting text from an exception as HTML can lead to a cross-site scripting vulnerability.","help":"# Exception text reinterpreted as HTML\nDirectly writing error messages to a webpage without sanitization allows for a cross-site scripting vulnerability if parts of the error message can be influenced by a user.\n\n\n## Recommendation\nTo guard against cross-site scripting, consider using contextual output encoding/escaping before writing user input to the page, or one of the other solutions that are mentioned in the references.\n\n\n## Example\nThe following example shows an exception being written directly to the document, and this exception can potentially be influenced by the page URL, leaving the website vulnerable to cross-site scripting.\n\n\n```javascript\nfunction setLanguageOptions() {\n    var href = document.location.href,\n        deflt = href.substring(href.indexOf(\"default=\")+8);\n    \n    try {\n        var parsed = unknownParseFunction(deflt); \n    } catch(e) {\n        document.write(\"Had an error: \" + e + \".\");\n    }\n}\n\n```\n\n## Example\nThis second example shows an input being validated using the JSON schema validator `ajv`, and in case of an error, the error message is sent directly back in the response.\n\n\n```javascript\nimport express from 'express';\nimport Ajv from 'ajv';\n\nlet app = express();\nlet ajv = new Ajv();\n\najv.addSchema({type: 'object', additionalProperties: {type: 'number'}}, 'pollData');\n\napp.post('/polldata', (req, res) => {\n    if (!ajv.validate('pollData', req.body)) {\n        res.send(ajv.errorsText());\n    }\n});\n\n```\nThis is unsafe, because the error message can contain parts of the input. For example, the input `{'<img src=x onerror=alert(1)>': 'foo'}` will generate the error `data/<img src=x onerror=alert(1)> should be number`, causing reflected XSS.\n\n\n## References\n* OWASP: [DOM based XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html).\n* OWASP: [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html).\n* OWASP [DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS).\n* OWASP [Types of Cross-Site Scripting](https://www.owasp.org/index.php/Types_of_Cross-Site_Scripting).\n* Wikipedia: [Cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.5"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"23648bbf5ecdd4f14fb1e70223ff618368597b05","message":{"text":"Exception text is reinterpreted as HTML without escaping meta-characters."},"location":{"path":"nuxt/server-middleware/slack.js","start_line":146,"end_line":146,"start_column":26,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/45/instances","dismissal_approved_by":null},{"number":44,"created_at":"2025-02-02T11:32:22Z","updated_at":"2025-02-02T11:34:19Z","url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/44","html_url":"https://github.com/MTES-MCT/Docurba/security/code-scanning/44","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/xss-through-exception","severity":"warning","description":"Exception text reinterpreted as HTML","name":"js/xss-through-exception","tags":["external/cwe/cwe-079","external/cwe/cwe-116","security"],"full_description":"Reinterpreting text from an exception as HTML can lead to a cross-site scripting vulnerability.","help":"# Exception text reinterpreted as HTML\nDirectly writing error messages to a webpage without sanitization allows for a cross-site scripting vulnerability if parts of the error message can be influenced by a user.\n\n\n## Recommendation\nTo guard against cross-site scripting, consider using contextual output encoding/escaping before writing user input to the page, or one of the other solutions that are mentioned in the references.\n\n\n## Example\nThe following example shows an exception being written directly to the document, and this exception can potentially be influenced by the page URL, leaving the website vulnerable to cross-site scripting.\n\n\n```javascript\nfunction setLanguageOptions() {\n    var href = document.location.href,\n        deflt = href.substring(href.indexOf(\"default=\")+8);\n    \n    try {\n        var parsed = unknownParseFunction(deflt); \n    } catch(e) {\n        document.write(\"Had an error: \" + e + \".\");\n    }\n}\n\n```\n\n## Example\nThis second example shows an input being validated using the JSON schema validator `ajv`, and in case of an error, the error message is sent directly back in the response.\n\n\n```javascript\nimport express from 'express';\nimport Ajv from 'ajv';\n\nlet app = express();\nlet ajv = new Ajv();\n\najv.addSchema({type: 'object', additionalProperties: {type: 'number'}}, 'pollData');\n\napp.post('/polldata', (req, res) => {\n    if (!ajv.validate('pollData', req.body)) {\n        res.send(ajv.errorsText());\n    }\n});\n\n```\nThis is unsafe, because the error message can contain parts of the input. For example, the input `{'<img src=x onerror=alert(1)>': 'foo'}` will generate the error `data/<img src=x onerror=alert(1)> should be number`, causing reflected XSS.\n\n\n## References\n* OWASP: [DOM based XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html).\n* OWASP: [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html).\n* OWASP [DOM Based XSS](https://www.owasp.org/index.php/DOM_Based_XSS).\n* OWASP [Types of Cross-Site Scripting](https://www.owasp.org/index.php/Types_of_Cross-Site_Scripting).\n* Wikipedia: [Cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.5"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"23648bbf5ecdd4f14fb1e70223ff618368597b05","message":{"text":"Exception text is reinterpreted as HTML without escaping meta-characters.\nException text is reinterpreted as HTML without escaping meta-characters."},"location":{"path":"nuxt/server-middleware/trames.js","start_line":165,"end_line":165,"start_column":26,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/44/instances","dismissal_approved_by":null},{"number":43,"created_at":"2025-02-02T11:32:22Z","updated_at":"2025-02-02T11:34:19Z","url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/43","html_url":"https://github.com/MTES-MCT/Docurba/security/code-scanning/43","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/server-side-unvalidated-url-redirection","severity":"warning","description":"Server-side URL redirect","name":"js/server-side-unvalidated-url-redirection","tags":["external/cwe/cwe-601","security"],"full_description":"Server-side URL redirection based on unvalidated user input may cause redirection to malicious web sites.","help":"# Server-side URL redirect\nDirectly incorporating user input into a URL redirect request without validating the input can facilitate phishing attacks. In these attacks, unsuspecting users can be redirected to a malicious site that looks very similar to the real site they intend to visit, but which is controlled by the attacker.\n\n\n## Recommendation\nTo guard against untrusted URL redirection, it is advisable to avoid putting user input directly into a redirect URL. Instead, maintain a list of authorized redirects on the server; then choose from that list based on the user input provided.\n\nIf this is not possible, then the user input should be validated in some other way, for example, by verifying that the target URL is on the same host as the current page.\n\n\n## Example\nThe following example shows an HTTP request parameter being used directly in a URL redirect without validating the input, which facilitates phishing attacks:\n\n\n```javascript\nconst app = require(\"express\")();\n\napp.get(\"/redirect\", function (req, res) {\n  // BAD: a request parameter is incorporated without validation into a URL redirect\n  res.redirect(req.query[\"target\"]);\n});\n\n```\nOne way to remedy the problem is to validate the user input against a known fixed string before doing the redirection:\n\n\n```javascript\nconst app = require(\"express\")();\n\nconst VALID_REDIRECT = \"http://cwe.mitre.org/data/definitions/601.html\";\n\napp.get(\"/redirect\", function (req, res) {\n  // GOOD: the request parameter is validated against a known fixed string\n  let target = req.query[\"target\"];\n  if (VALID_REDIRECT === target) {\n    res.redirect(target);\n  } else {\n    res.redirect(\"/\");\n  }\n});\n\n```\nAlternatively, we can check that the target URL does not redirect to a different host by parsing it relative to a base URL with a known host and verifying that the host stays the same:\n\n\n```javascript\nconst app = require(\"express\")();\n\nfunction isLocalUrl(path) {\n  try {\n    return (\n      // TODO: consider substituting your own domain for example.com\n      new URL(path, \"https://example.com\").origin === \"https://example.com\"\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\napp.get(\"/redirect\", function (req, res) {\n  // GOOD: check that we don't redirect to a different host\n  let target = req.query[\"target\"];\n  if (isLocalUrl(target)) {\n    res.redirect(target);\n  } else {\n    res.redirect(\"/\");\n  }\n});\n\n```\nNote that as written, the above code will allow redirects to URLs on `example.com`, which is harmless but perhaps not intended. You can substitute your own domain (if known) for `example.com` to prevent this.\n\n\n## References\n* OWASP: [ XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-601](https://cwe.mitre.org/data/definitions/601.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.5"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"23648bbf5ecdd4f14fb1e70223ff618368597b05","message":{"text":"Untrusted URL redirection depends on a user-provided value."},"location":{"path":"nuxt/server-middleware/redirects.js","start_line":17,"end_line":17,"start_column":23,"end_column":71},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/43/instances","dismissal_approved_by":null},{"number":42,"created_at":"2025-02-02T11:32:22Z","updated_at":"2025-02-02T11:34:19Z","url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/42","html_url":"https://github.com/MTES-MCT/Docurba/security/code-scanning/42","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/stack-trace-exposure","severity":"warning","description":"Information exposure through a stack trace","name":"js/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Propagating stack trace information to an external user can unintentionally reveal implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through a stack trace\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of function names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is caught and its stack trace is sent back to the remote user as part of the HTTP response. As such, the user is able to see a detailed stack trace, which may contain sensitive information.\n\n\n```javascript\nvar http = require('http');\n\nhttp.createServer(function onRequest(req, res) {\n  var body;\n  try {\n    body = handleRequest(req);\n  }\n  catch (err) {\n    res.statusCode = 500;\n    res.setHeader(\"Content-Type\", \"text/plain\");\n    res.end(err.stack); // NOT OK\n    return;\n  }\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.setHeader(\"Content-Length\", body.length);\n  res.end(body);\n}).listen(3000);\n\n```\nInstead, the stack trace should be logged only on the server. That way, the developers can still access and use the error log, but remote users will not see the information:\n\n\n```javascript\nvar http = require('http');\n\nhttp.createServer(function onRequest(req, res) {\n  var body;\n  try {\n    body = handleRequest(req);\n  }\n  catch (err) {\n    res.statusCode = 500;\n    res.setHeader(\"Content-Type\", \"text/plain\");\n    log(\"Exception occurred\", err.stack);\n    res.end(\"An exception occurred\"); // OK\n    return;\n  }\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.setHeader(\"Content-Length\", body.length);\n  res.end(body);\n}).listen(3000);\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.5"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"23648bbf5ecdd4f14fb1e70223ff618368597b05","message":{"text":"This information exposed to the user depends on stack trace information."},"location":{"path":"nuxt/server-middleware/trames.js","start_line":165,"end_line":165,"start_column":26,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/42/instances","dismissal_approved_by":null},{"number":41,"created_at":"2025-02-02T11:32:22Z","updated_at":"2025-02-02T11:34:19Z","url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/41","html_url":"https://github.com/MTES-MCT/Docurba/security/code-scanning/41","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/stack-trace-exposure","severity":"warning","description":"Information exposure through a stack trace","name":"js/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Propagating stack trace information to an external user can unintentionally reveal implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through a stack trace\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of function names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is caught and its stack trace is sent back to the remote user as part of the HTTP response. As such, the user is able to see a detailed stack trace, which may contain sensitive information.\n\n\n```javascript\nvar http = require('http');\n\nhttp.createServer(function onRequest(req, res) {\n  var body;\n  try {\n    body = handleRequest(req);\n  }\n  catch (err) {\n    res.statusCode = 500;\n    res.setHeader(\"Content-Type\", \"text/plain\");\n    res.end(err.stack); // NOT OK\n    return;\n  }\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.setHeader(\"Content-Length\", body.length);\n  res.end(body);\n}).listen(3000);\n\n```\nInstead, the stack trace should be logged only on the server. That way, the developers can still access and use the error log, but remote users will not see the information:\n\n\n```javascript\nvar http = require('http');\n\nhttp.createServer(function onRequest(req, res) {\n  var body;\n  try {\n    body = handleRequest(req);\n  }\n  catch (err) {\n    res.statusCode = 500;\n    res.setHeader(\"Content-Type\", \"text/plain\");\n    log(\"Exception occurred\", err.stack);\n    res.end(\"An exception occurred\"); // OK\n    return;\n  }\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.setHeader(\"Content-Length\", body.length);\n  res.end(body);\n}).listen(3000);\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.5"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"23648bbf5ecdd4f14fb1e70223ff618368597b05","message":{"text":"This information exposed to the user depends on stack trace information."},"location":{"path":"nuxt/server-middleware/trames.js","start_line":155,"end_line":155,"start_column":26,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/41/instances","dismissal_approved_by":null},{"number":40,"created_at":"2025-02-02T11:32:22Z","updated_at":"2025-02-02T11:34:19Z","url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/40","html_url":"https://github.com/MTES-MCT/Docurba/security/code-scanning/40","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/stack-trace-exposure","severity":"warning","description":"Information exposure through a stack trace","name":"js/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Propagating stack trace information to an external user can unintentionally reveal implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through a stack trace\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of function names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is caught and its stack trace is sent back to the remote user as part of the HTTP response. As such, the user is able to see a detailed stack trace, which may contain sensitive information.\n\n\n```javascript\nvar http = require('http');\n\nhttp.createServer(function onRequest(req, res) {\n  var body;\n  try {\n    body = handleRequest(req);\n  }\n  catch (err) {\n    res.statusCode = 500;\n    res.setHeader(\"Content-Type\", \"text/plain\");\n    res.end(err.stack); // NOT OK\n    return;\n  }\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.setHeader(\"Content-Length\", body.length);\n  res.end(body);\n}).listen(3000);\n\n```\nInstead, the stack trace should be logged only on the server. That way, the developers can still access and use the error log, but remote users will not see the information:\n\n\n```javascript\nvar http = require('http');\n\nhttp.createServer(function onRequest(req, res) {\n  var body;\n  try {\n    body = handleRequest(req);\n  }\n  catch (err) {\n    res.statusCode = 500;\n    res.setHeader(\"Content-Type\", \"text/plain\");\n    log(\"Exception occurred\", err.stack);\n    res.end(\"An exception occurred\"); // OK\n    return;\n  }\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.setHeader(\"Content-Length\", body.length);\n  res.end(body);\n}).listen(3000);\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.5"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"23648bbf5ecdd4f14fb1e70223ff618368597b05","message":{"text":"This information exposed to the user depends on stack trace information."},"location":{"path":"nuxt/server-middleware/trames.js","start_line":140,"end_line":140,"start_column":26,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/40/instances","dismissal_approved_by":null},{"number":39,"created_at":"2025-02-02T11:32:22Z","updated_at":"2025-02-02T11:34:19Z","url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/39","html_url":"https://github.com/MTES-MCT/Docurba/security/code-scanning/39","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/stack-trace-exposure","severity":"warning","description":"Information exposure through a stack trace","name":"js/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Propagating stack trace information to an external user can unintentionally reveal implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through a stack trace\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of function names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is caught and its stack trace is sent back to the remote user as part of the HTTP response. As such, the user is able to see a detailed stack trace, which may contain sensitive information.\n\n\n```javascript\nvar http = require('http');\n\nhttp.createServer(function onRequest(req, res) {\n  var body;\n  try {\n    body = handleRequest(req);\n  }\n  catch (err) {\n    res.statusCode = 500;\n    res.setHeader(\"Content-Type\", \"text/plain\");\n    res.end(err.stack); // NOT OK\n    return;\n  }\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.setHeader(\"Content-Length\", body.length);\n  res.end(body);\n}).listen(3000);\n\n```\nInstead, the stack trace should be logged only on the server. That way, the developers can still access and use the error log, but remote users will not see the information:\n\n\n```javascript\nvar http = require('http');\n\nhttp.createServer(function onRequest(req, res) {\n  var body;\n  try {\n    body = handleRequest(req);\n  }\n  catch (err) {\n    res.statusCode = 500;\n    res.setHeader(\"Content-Type\", \"text/plain\");\n    log(\"Exception occurred\", err.stack);\n    res.end(\"An exception occurred\"); // OK\n    return;\n  }\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.setHeader(\"Content-Length\", body.length);\n  res.end(body);\n}).listen(3000);\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.5"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"23648bbf5ecdd4f14fb1e70223ff618368597b05","message":{"text":"This information exposed to the user depends on stack trace information."},"location":{"path":"nuxt/server-middleware/trames.js","start_line":35,"end_line":35,"start_column":26,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/39/instances","dismissal_approved_by":null},{"number":38,"created_at":"2025-02-02T11:32:22Z","updated_at":"2025-02-02T11:34:19Z","url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/38","html_url":"https://github.com/MTES-MCT/Docurba/security/code-scanning/38","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/stack-trace-exposure","severity":"warning","description":"Information exposure through a stack trace","name":"js/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Propagating stack trace information to an external user can unintentionally reveal implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through a stack trace\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of function names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is caught and its stack trace is sent back to the remote user as part of the HTTP response. As such, the user is able to see a detailed stack trace, which may contain sensitive information.\n\n\n```javascript\nvar http = require('http');\n\nhttp.createServer(function onRequest(req, res) {\n  var body;\n  try {\n    body = handleRequest(req);\n  }\n  catch (err) {\n    res.statusCode = 500;\n    res.setHeader(\"Content-Type\", \"text/plain\");\n    res.end(err.stack); // NOT OK\n    return;\n  }\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.setHeader(\"Content-Length\", body.length);\n  res.end(body);\n}).listen(3000);\n\n```\nInstead, the stack trace should be logged only on the server. That way, the developers can still access and use the error log, but remote users will not see the information:\n\n\n```javascript\nvar http = require('http');\n\nhttp.createServer(function onRequest(req, res) {\n  var body;\n  try {\n    body = handleRequest(req);\n  }\n  catch (err) {\n    res.statusCode = 500;\n    res.setHeader(\"Content-Type\", \"text/plain\");\n    log(\"Exception occurred\", err.stack);\n    res.end(\"An exception occurred\"); // OK\n    return;\n  }\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.setHeader(\"Content-Length\", body.length);\n  res.end(body);\n}).listen(3000);\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.5"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"23648bbf5ecdd4f14fb1e70223ff618368597b05","message":{"text":"This information exposed to the user depends on stack trace information."},"location":{"path":"nuxt/server-middleware/pipedrive.js","start_line":125,"end_line":125,"start_column":28,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/38/instances","dismissal_approved_by":null},{"number":37,"created_at":"2025-02-02T11:32:22Z","updated_at":"2025-02-02T11:34:19Z","url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/37","html_url":"https://github.com/MTES-MCT/Docurba/security/code-scanning/37","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/stack-trace-exposure","severity":"warning","description":"Information exposure through a stack trace","name":"js/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Propagating stack trace information to an external user can unintentionally reveal implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through a stack trace\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of function names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is caught and its stack trace is sent back to the remote user as part of the HTTP response. As such, the user is able to see a detailed stack trace, which may contain sensitive information.\n\n\n```javascript\nvar http = require('http');\n\nhttp.createServer(function onRequest(req, res) {\n  var body;\n  try {\n    body = handleRequest(req);\n  }\n  catch (err) {\n    res.statusCode = 500;\n    res.setHeader(\"Content-Type\", \"text/plain\");\n    res.end(err.stack); // NOT OK\n    return;\n  }\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.setHeader(\"Content-Length\", body.length);\n  res.end(body);\n}).listen(3000);\n\n```\nInstead, the stack trace should be logged only on the server. That way, the developers can still access and use the error log, but remote users will not see the information:\n\n\n```javascript\nvar http = require('http');\n\nhttp.createServer(function onRequest(req, res) {\n  var body;\n  try {\n    body = handleRequest(req);\n  }\n  catch (err) {\n    res.statusCode = 500;\n    res.setHeader(\"Content-Type\", \"text/plain\");\n    log(\"Exception occurred\", err.stack);\n    res.end(\"An exception occurred\"); // OK\n    return;\n  }\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.setHeader(\"Content-Length\", body.length);\n  res.end(body);\n}).listen(3000);\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.5"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"23648bbf5ecdd4f14fb1e70223ff618368597b05","message":{"text":"This information exposed to the user depends on stack trace information."},"location":{"path":"nuxt/server-middleware/georisques.js","start_line":46,"end_line":46,"start_column":26,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/37/instances","dismissal_approved_by":null},{"number":36,"created_at":"2025-02-02T11:32:22Z","updated_at":"2025-02-02T11:34:19Z","url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/36","html_url":"https://github.com/MTES-MCT/Docurba/security/code-scanning/36","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/stack-trace-exposure","severity":"warning","description":"Information exposure through a stack trace","name":"js/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Propagating stack trace information to an external user can unintentionally reveal implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through a stack trace\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of function names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is caught and its stack trace is sent back to the remote user as part of the HTTP response. As such, the user is able to see a detailed stack trace, which may contain sensitive information.\n\n\n```javascript\nvar http = require('http');\n\nhttp.createServer(function onRequest(req, res) {\n  var body;\n  try {\n    body = handleRequest(req);\n  }\n  catch (err) {\n    res.statusCode = 500;\n    res.setHeader(\"Content-Type\", \"text/plain\");\n    res.end(err.stack); // NOT OK\n    return;\n  }\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.setHeader(\"Content-Length\", body.length);\n  res.end(body);\n}).listen(3000);\n\n```\nInstead, the stack trace should be logged only on the server. That way, the developers can still access and use the error log, but remote users will not see the information:\n\n\n```javascript\nvar http = require('http');\n\nhttp.createServer(function onRequest(req, res) {\n  var body;\n  try {\n    body = handleRequest(req);\n  }\n  catch (err) {\n    res.statusCode = 500;\n    res.setHeader(\"Content-Type\", \"text/plain\");\n    log(\"Exception occurred\", err.stack);\n    res.end(\"An exception occurred\"); // OK\n    return;\n  }\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.setHeader(\"Content-Length\", body.length);\n  res.end(body);\n}).listen(3000);\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.20.5"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-22.04\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"23648bbf5ecdd4f14fb1e70223ff618368597b05","message":{"text":"This information exposed to the user depends on stack trace information."},"location":{"path":"nuxt/server-middleware/geoide.js","start_line":42,"end_line":42,"start_column":26,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/MTES-MCT/Docurba/code-scanning/alerts/36/instances","dismissal_approved_by":null}]}]},"testssl":[{"id":"scanProblem","ip":"docurba.incubateur.net/","port":"443","severity":"FATAL","finding":"No IPv4/IPv6 address(es) for 'docurba.incubateur.net' available"},{"id":"scanTime","ip":"docurba.incubateur.net/","port":"443","severity":"WARN","finding":"Scan interrupted"}],"thirdparties":{"trackers":null,"cookies":null,"headers":null},"wappalyzer":{"urls":{"https://docurba.incubateur.net/":{"status":0,"error":"Hostname could not be resolved (docurba.incubateur.net)"}},"technologies":[]},"zap":null,"nuclei":[{"template":"dns/caa-fingerprint.yaml","template-url":"https://templates.nuclei.sh/public/caa-fingerprint","template-id":"caa-fingerprint","template-path":"/home/runner/nuclei-templates/dns/caa-fingerprint.yaml","info":{"name":"CAA Record","author":["pdteam"],"tags":["dns","caa"],"description":"A CAA record was discovered. A CAA record is used to specify which certificate authorities (CAs) are allowed to issue certificates for a domain.","reference":["https://support.dnsimple.com/articles/caa-record/#whats-a-caa-record"],"severity":"info","metadata":{"max-request":1},"classification":{"cve-id":null,"cwe-id":["cwe-200"]}},"type":"dns","host":"docurba.incubateur.net.","matched-at":"docurba.incubateur.net","timestamp":"2025-05-11T03:44:33.605215526Z","matcher-status":true},{"template":"dns/dmarc-detect.yaml","template-url":"https://templates.nuclei.sh/public/dmarc-detect","template-id":"dmarc-detect","template-path":"/home/runner/nuclei-templates/dns/dmarc-detect.yaml","info":{"name":"DNS DMARC - Detect","author":["juliosmelo"],"tags":["dns","dmarc"],"description":"DNS DMARC information was detected.\n","reference":["https://dmarc.org/","https://dmarc.org/wiki/faq#why_is_dmarc_important.3f"],"severity":"info","metadata":{"max-request":1},"classification":{"cve-id":null,"cwe-id":["cwe-200"],"cvss-metrics":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N"}},"type":"dns","host":"docurba.incubateur.net.","matched-at":"_dmarc.docurba.incubateur.net","extracted-results":["\"v=DMARC1;p=none;\""],"timestamp":"2025-05-11T03:44:33.606589071Z","matcher-status":true},{"template":"dns/spf-record-detect.yaml","template-url":"https://templates.nuclei.sh/public/spf-record-detect","template-id":"spf-record-detect","template-path":"/home/runner/nuclei-templates/dns/spf-record-detect.yaml","info":{"name":"SPF Record - Detection","author":["rxerium"],"tags":["dns","spf"],"description":"An SPF TXT record was detected\n","reference":["https://www.mimecast.com/content/how-to-create-an-spf-txt-record"],"severity":"info","metadata":{"max-request":1}},"type":"dns","host":"docurba.incubateur.net.","matched-at":"docurba.incubateur.net","extracted-results":["v=spf1 include:_spf.alwaysdata.com ~all\""],"timestamp":"2025-05-11T03:44:33.607139267Z","matcher-status":true},{"template":"dns/txt-fingerprint.yaml","template-url":"https://templates.nuclei.sh/public/txt-fingerprint","template-id":"txt-fingerprint","template-path":"/home/runner/nuclei-templates/dns/txt-fingerprint.yaml","info":{"name":"DNS TXT Record Detected","author":["pdteam"],"tags":["dns","txt"],"description":"A DNS TXT record was detected. The TXT record lets a domain admin leave notes on a DNS server.","reference":["https://www.netspi.com/blog/technical/network-penetration-testing/analyzing-dns-txt-records-to-fingerprint-service-providers/"],"severity":"info","metadata":{"max-request":1},"classification":{"cve-id":null,"cwe-id":["cwe-200"]}},"type":"dns","host":"docurba.incubateur.net.","matched-at":"docurba.incubateur.net","extracted-results":["\"google-site-verification=4K6tD3XkDDfbiCAtmNfS1CjOz11Q6csnxj02q-rwI_E\"","\"v=spf1 include:_spf.alwaysdata.com ~all\""],"timestamp":"2025-05-11T03:44:33.607204659Z","matcher-status":true},{"template":"dns/nameserver-fingerprint.yaml","template-url":"https://templates.nuclei.sh/public/nameserver-fingerprint","template-id":"nameserver-fingerprint","template-path":"/home/runner/nuclei-templates/dns/nameserver-fingerprint.yaml","info":{"name":"NS Record Detection","author":["pdteam"],"tags":["dns","ns"],"description":"An NS record was detected. An NS record delegates a subdomain to a set of name servers.","severity":"info","metadata":{"max-request":1},"classification":{"cve-id":null,"cwe-id":["cwe-200"]}},"type":"dns","host":"docurba.incubateur.net.","matched-at":"docurba.incubateur.net","extracted-results":["dns1.alwaysdata.com.","dns2.alwaysdata.com."],"timestamp":"2025-05-11T03:44:33.609857072Z","matcher-status":true},{"template":"dns/mx-fingerprint.yaml","template-url":"https://templates.nuclei.sh/public/mx-fingerprint","template-id":"mx-fingerprint","template-path":"/home/runner/nuclei-templates/dns/mx-fingerprint.yaml","info":{"name":"MX Record Detection","author":["pdteam"],"tags":["dns","mx"],"description":"An MX record was detected. MX records direct emails to a mail exchange server.","reference":["https://www.cloudflare.com/learning/dns/dns-records/dns-mx-record/","https://mxtoolbox.com/"],"severity":"info","metadata":{"max-request":1},"classification":{"cve-id":null,"cwe-id":["cwe-200"]}},"type":"dns","host":"docurba.incubateur.net.","matched-at":"docurba.incubateur.net","extracted-results":["10 mx1.alwaysdata.com.","20 mx2.alwaysdata.com."],"timestamp":"2025-05-11T03:44:33.763922673Z","matcher-status":true}],"lhr":[{"requestedUrl":"https://docurba.incubateur.net/","finalUrl":"https://docurba.beta.gouv.fr/","fetchTime":"2024-12-08T03:44:04.319Z","runWarnings":["The page may not be loading as expected because your test URL (https://docurba.incubateur.net/) was redirected to https://docurba.beta.gouv.fr/. Try testing the second URL directly."],"categories":{"performance":{"title":"Performance","supportedModes":["navigation","timespan","snapshot"],"id":"performance","score":0.66},"accessibility":{"title":"Accessibility","description":"These checks highlight opportunities to [improve the accessibility of your web app](https://developers.google.com/web/fundamentals/accessibility). Only a subset of accessibility issues can be automatically detected so manual testing is also encouraged.","manualDescription":"These items address areas which an automated testing tool cannot cover. Learn more in our guide on [conducting an accessibility review](https://developers.google.com/web/fundamentals/accessibility/how-to-review).","supportedModes":["navigation","snapshot"],"id":"accessibility","score":0.89},"best-practices":{"title":"Best Practices","supportedModes":["navigation","timespan","snapshot"],"id":"best-practices","score":1},"seo":{"title":"SEO","description":"These checks ensure that your page is following basic search engine optimization advice. There are many additional factors Lighthouse does not score here that may affect your search ranking, including performance on [Core Web Vitals](https://web.dev/learn-web-vitals/). [Learn more](https://support.google.com/webmasters/answer/35769).","manualDescription":"Run these additional validators on your site to check additional SEO best practices.","supportedModes":["navigation","snapshot"],"id":"seo","score":0.79},"pwa":{"title":"PWA","description":"These checks validate the aspects of a Progressive Web App. [Learn more](https://developers.google.com/web/progressive-web-apps/checklist).","manualDescription":"These checks are required by the baseline [PWA Checklist](https://developers.google.com/web/progressive-web-apps/checklist) but are not automatically checked by Lighthouse. They do not affect your score but it's important that you verify them manually.","supportedModes":["navigation"],"id":"pwa","score":0.8}},"audits":{"metrics":{"id":"metrics","title":"Metrics","description":"Collects all available metrics.","score":null,"scoreDisplayMode":"informative","numericValue":10476,"numericUnit":"millisecond","details":{"type":"debugdata","items":[{"firstContentfulPaint":2322,"firstMeaningfulPaint":9021,"largestContentfulPaint":2779,"interactive":10476,"speedIndex":4417,"totalBlockingTime":677,"maxPotentialFID":490,"cumulativeLayoutShift":0.0059869791666666665,"cumulativeLayoutShiftMainFrame":0.0059869791666666665,"totalCumulativeLayoutShift":0.0059869791666666665,"observedTimeOrigin":0,"observedTimeOriginTs":439648502,"observedNavigationStart":0,"observedNavigationStartTs":439648502,"observedFirstPaint":813,"observedFirstPaintTs":440461019,"observedFirstContentfulPaint":813,"observedFirstContentfulPaintTs":440461019,"observedFirstContentfulPaintAllFrames":813,"observedFirstContentfulPaintAllFramesTs":440461019,"observedFirstMeaningfulPaint":1422,"observedFirstMeaningfulPaintTs":441070536,"observedLargestContentfulPaint":845,"observedLargestContentfulPaintTs":440493945,"observedLargestContentfulPaintAllFrames":845,"observedLargestContentfulPaintAllFramesTs":440493945,"observedTraceEnd":4808,"observedTraceEndTs":444456689,"observedLoad":2089,"observedLoadTs":441737232,"observedDomContentLoaded":1407,"observedDomContentLoadedTs":441055750,"observedCumulativeLayoutShift":0.0059869791666666665,"observedCumulativeLayoutShiftMainFrame":0.0059869791666666665,"observedTotalCumulativeLayoutShift":0.0059869791666666665,"observedFirstVisualChange":817,"observedFirstVisualChangeTs":440465502,"observedLastVisualChange":3133,"observedLastVisualChangeTs":442781502,"observedSpeedIndex":920,"observedSpeedIndexTs":440568543},{"lcpInvalidated":false}]}},"diagnostics":{"id":"diagnostics","title":"Diagnostics","description":"Collection of useful page vitals.","score":null,"scoreDisplayMode":"informative","details":{"type":"debugdata","items":[{"numRequests":26,"numScripts":11,"numStylesheets":0,"numFonts":3,"numTasks":927,"numTasksOver10ms":5,"numTasksOver25ms":3,"numTasksOver50ms":3,"numTasksOver100ms":1,"numTasksOver500ms":0,"rtt":0,"throughput":12421040.391193537,"maxRtt":137.81199999999998,"maxServerLatency":164.367,"totalByteWeight":2323526,"totalTaskTime":478.8369999999986,"mainDocumentTransferSize":64200}]}}}}],"screenshot":true,"stats":{"grade":"A"},"github_repository":{"grade":"A"},"budget_page":{"grade":"A"},"declaration-a11y":{"mention":null},"declaration-rgpd":[{"slug":"ml","mention":null,"maxScore":0,"score":0,"missingWords":[],"missingTrackers":[]},{"slug":"pc","mention":null,"maxScore":0,"score":0,"missingWords":[],"missingTrackers":[]}],"betagouv":{"id":"docurba","type":"startup","attributes":{"name":"Docurba","pitch":"Faciliter l'élaboration et le suivi des documents d'urbanisme en améliorant les échanges entre les collectivités et l'État","stats_url":"https://docurba.beta.gouv.fr/stats","budget_url":"https://pad.numerique.gouv.fr/rHMnemklQm6Sww5yVCI9ow?view","link":"https://docurba.beta.gouv.fr/","repository":"https://github.com/MTES-MCT/Docurba","contact":"contact@docurba.beta.gouv.fr","content_url_encoded_markdown":"%2A%2APlus%20de%2010%20000%20collectivit%C3%A9s%20devront%20d%C3%A9cliner%20la%20trajectoire%20d%E2%80%99artificialisation%20des%20sols%20pr%C3%A9vue%20par%20la%20loi%20Climat%20et%20R%C3%A9silience%20d%E2%80%99ici%202028%20dans%20leurs%20documents%20d%E2%80%99urbanisme%2C%20lesquels%20s%E2%80%99imposent%20aux%201%2C5%20million%20de%20demandes%20d%E2%80%99autorisation%20d%E2%80%99urbanisme.%2A%2A%20Or%20l%E2%80%99%C3%A9laboration%20de%20ces%20documents%20est%20longue%20et%20risqu%C3%A9e.%20Les%20collectivit%C3%A9s%20mettent%20entre%203%20et%205%20ans%20%C3%A0%20%C3%A9laborer%20leur%20document%20d%E2%80%99urbanisme%2C%20et%20lors%20de%20l%E2%80%99approbation%20la%20majorit%C3%A9%20des%20avis%20de%20l%E2%80%99Etat%20pr%C3%A9sentent%20des%20r%C3%A9serves%20sur%20la%20prise%20en%20compte%20des%20enjeux%20environnementaux.%20%C3%80%20ce%20titre%2C%20la%20consommation%20d%E2%80%99espace%2C%20l%E2%80%99assainissement%20ou%20l%E2%80%99eau%20potable%20sont%20insuffisamment%20%C3%A9valu%C3%A9s%20dans%20ces%20projets%20de%20planification%20urbaine.%0A%0A%0A%0A%23%23%20Les%20probl%C3%A8mes%20rencontr%C3%A9s%0A%0A%0AEn%20ce%20qui%20concerne%20la%20relation%20%C3%89tat%2Fcollectivit%C3%A9%2C%20le%20d%C3%A9but%20de%20la%20proc%C3%A9dure%20est%20formalis%C3%A9%20par%20le%20%2APorter%20%C3%A0%20Connaissance%2A%20%28PAC%29%20et%20par%20la%20%2Anote%20d%E2%80%99enjeux%2A%2C%20documents%20d%C3%A9livr%C3%A9s%20par%20la%20DDT%28M%29%2FDEAL.%20La%20fin%20de%20la%20proc%C3%A9dure%20est%2C%20quant%20%C3%A0%20elle%2C%20formalis%C3%A9e%20par%20l%E2%80%99%2Aavis%20de%20l%E2%80%99%C3%89tat%2A.%20Entre%20les%20deux%2C%20%2A%2Al%E2%80%99accompagnement%20de%20la%20collectivit%C3%A9%20par%20les%20services%20de%20l%E2%80%99%C3%89tat%20n%E2%80%99est%20pas%20encadr%C3%A9%2C%20ce%20qui%20ne%20permet%20pas%20d%E2%80%99assurer%20la%20bonne%20prise%20en%20compte%20des%20enjeux%20environnementaux%20sur%20le%20territoire.%2A%2A%0A%0ACe%20manque%20d%E2%80%99outillage%20dans%20l%E2%80%99accompagnement%20de%20la%20collectivit%C3%A9%20engendre%20diff%C3%A9rentes%20contraintes%20%3A%0A%0A%2A%20Pour%20les%20DDT%28M%29%2FDEAL%2C%20%2A%2Ale%20manque%20de%20visibilit%C3%A9%20sur%20le%20calendrier%20des%20collectivit%C3%A9s%20complexifie%20l%E2%80%99accompagnement%20et%20ne%20leur%20permet%20pas%20d%E2%80%99orienter%20les%20collectivit%C3%A9s%20aux%20moments%20opportuns%2C%2A%2A%20et%20ainsi%20anticiper%20les%20diff%C3%A9rents%20risques%20tout%20au%20long%20de%20la%20proc%C3%A9dure.%20De%20plus%2C%20la%20r%C3%A9glementation%20en%20pleine%20%C3%A9volution%20%28exemple%20avec%20la%20loi%20Elan%20en%202018%20et%20de%20la%20loi%20Climat%20et%20R%C3%A9silience%20en%202021%29%20ralentit%20la%20mise%20%C3%A0%20disposition%20du%20PAC%20par%20la%20DDT%28M%29%2FDEAL.%0A%0A%2A%20%2A%2ACes%20difficult%C3%A9s%20en%20DDT%28M%29%2FDEAL%20se%20r%C3%A9percutent%20sur%20les%20collectivit%C3%A9s%20car%20les%20%C3%A9l%C3%A9ments%20alors%20transmis%20arrivent%20souvent%20trop%20tard%20dans%20la%20proc%C3%A9dure%2C%20et%20ne%20sont%20pas%20syst%C3%A9matiquement%20pr%C3%A9sent%C3%A9s%20ou%20expliqu%C3%A9s.%2A%2A%20Par%20cons%C3%A9quent%2C%20les%20collectivit%C3%A9s%2C%20et%20leurs%20bureaux%20d%E2%80%99%C3%A9tudes%2C%20doivent%20trouver%20certaines%20donn%C3%A9es%20ailleurs%2C%20sans%20garantie%20de%20validit%C3%A9%2C%20et%20per%C3%A7oivent%20les%20informations%20de%20l%E2%80%99%C3%89tat%20comme%20des%20contraintes%20%C3%A0%20traiter%20plut%C3%B4t%20que%20de%20potentiels%20atouts%20pour%20leur%20projet%20de%20territoire.%0A%0A%0A%0A%23%23%20La%20solution%20%3A%20%20outiller%20la%C2%A0collaboration%20entre%20services%20de%20l%E2%80%99%C3%89tat%20et%20collectivit%C3%A9s%20pour%20faciliter%20l%E2%80%99%C3%A9laboration%20et%20le%20suivi%20des%20documents%20d%E2%80%99urbanisme%2C%20afin%20que%20les%20enjeux%C2%A0environnementaux%20soient%20plus%20rapidement%20et%20mieux%20pris%20en%20compte%20sur%20le%20territoire.%0A%0A%0APour%20cela%2C%20Docurba%20met%20%C3%A0%20disposition%20%3A%0A%0A%2A%20%2A%2AUn%20socle%20d%E2%80%99informations%20utiles%20%C3%A0%20la%20collectivit%C3%A9%20et%20consultables%20d%C3%A8s%20le%20d%C3%A9but%20et%20tout%20au%20long%20de%20l%E2%80%99%C3%A9laboration%20de%20son%20document%20d%E2%80%99urbanisme.%2A%2A%20Il%20s%27agit%20des%20premiers%20%C3%A9l%C3%A9ments%20constitutifs%20du%20PAC%2C%20avec%20des%20%C3%A9l%C3%A9ments%20de%20niveau%20national%20et%20r%C3%A9gional%2C%20harmonis%C3%A9s%20et%20mis%20%C3%A0%20jour%20r%C3%A9guli%C3%A8rement%2C%20ainsi%20que%20des%20ressources%20pr%C3%A9-s%C3%A9lectionn%C3%A9es%20et%20des%20donn%C3%A9es%20sp%C3%A9cifiques%20au%20territoire%2C%0A%0A%2A%20%2A%2AUn%20tableau%20de%20bord%20et%20une%20feuille%20de%20route%20partag%C3%A9e%20pour%20suivre%20et%20partager%20les%20%C3%A9tapes%20clefs%20de%20chaque%20proc%C3%A9dure.%2A%2A%20Accessible%20%C3%A0%20toutes%20les%20personnes%20impliqu%C3%A9es%20dans%20la%20proc%C3%A9dure%2C%20la%20Feuille%20de%20Route%20permet%20notamment%20d%27y%20joindre%20des%20documents%20clefs%20%28sans%20limite%20de%20taille%29%20pour%20apporter%20transparence%20et%20fluidit%C3%A9%20dans%20la%20collaboration%20entre%20%C3%89tat%20et%20territoires.%0A%0A%2A%20%2A%2AUn%20outil%20collaboratif%20en%20DDT%28M%29%2FDEAL%20pour%20l%E2%80%99%C3%A9laboration%20des%20PAC%2A%2A.%20Chaque%20DDT%28M%29%2FDEAL%20dispose%20d%E2%80%99une%20trame%20de%20PAC%20d%C3%A9partementale%20personnalisable%20avec%20des%20%C3%A9l%C3%A9ments%20pr%C3%A9-remplis%20au%20niveau%20national%20et%20r%C3%A9gional.%20De%20cette%20mani%C3%A8re%2C%20les%20services%20de%20l%E2%80%99%C3%89tat%20peuvent%20consacrer%20plus%20de%20temps%20sur%20l%E2%80%99application%20locale%20et%20ainsi%20aider%20la%20collectivit%C3%A9%20%C3%A0%20mieux%20prendre%20en%20compte%20les%20enjeux%20de%20son%20territoire.%0A%0A%0A%2A%2ADocurba%20est%20un%20outil%20central%2C%20direct%20et%20collaboratif%2A%2A%20con%C3%A7u%20pour%20fluidifier%20les%20%C3%A9changes%20entre%20toutes%20les%20parties%20prenantes%20de%20l%E2%80%99%C3%A9laboration%20des%20documents%20d%E2%80%99urbanisme%2C%20de%20la%20prescription%20%C3%A0%20l%E2%80%99opposabilit%C3%A9%20du%20document.%0A%0ASe%20rendre%20sur%20Docurba%20%3A%20%5Bhttp%3A%2F%2Fdocurba.beta.gouv.fr%2F%5D%28http%3A%2F%2Fdocurba.beta.gouv.fr%2F%29%0A%0A%0A%0A%23%23%20Impact%0A%0A%0A%2A%2ADocurba%20a%20pour%20mission%20de%20faciliter%20l%E2%80%99%C3%A9laboration%20et%20le%20suivi%20des%20documents%20d%E2%80%99urbanisme%20afin%20de%20plus%20rapidement%20et%20mieux%20prendre%20en%20compte%20les%20enjeux%20environnementaux.%2A%2A%0A%0ANotre%20objectif%20est%20de%20devenir%20la%20plateforme%20de%20r%C3%A9f%C3%A9rence%20pour%20accompagner%20%C3%A0%20grande%20%C3%A9chelle%20la%20territorialisation%20de%20la%20planification%20%C3%A9cologique%20dans%20les%20documents%20d%E2%80%99urbanisme.%0A%0A%2A%2AEn%20octobre%202024%2C%2050%25%20des%20DDT%28M%29%2FDEAL%20utilisent%20Docurba%20quotidiennement%2C%20et%20359%20territoires%20y%20suivent%20leurs%20proc%C3%A9dures%20de%20documents%20d%27urbanisme.%2A%2A%0A%0ANos%20statistiques%20via%20ce%20lien%20%3A%20%5BStatistiques%20de%20Docurba%5D%28https%3A%2F%2Fdocurba.beta.gouv.fr%2Fstats%29%0A%0A%0A%0A%0A%0A%5C%2Asource%C2%A0%20https%3A%2F%2Fwww.cohesion-territoires.gouv.fr%2Fsites%2Fdefault%2Ffiles%2F2020-07%2FPre%25CC%2581sentation%2520du%2520programme%2520De%25CC%2581mat.ADS_.pdf","events":[{"name":"fast","date":"2024-01-01","comment":"Montant de 250000€ pour la promotion 13"}],"phases":[{"name":"investigation","start":"2020-03-12","end":"2021-04-12"},{"name":"construction","start":"2021-04-12","end":""},{"name":"acceleration","start":"2023-09-14","end":""}],"sponsors":["dgaln"],"thematiques":["Écologie"],"dashlord_url":"https://dashlord.mte.incubateur.net/dashlord/url/docurba-incubateur-net/","accessibility_status":"non conforme"},"relationships":{"incubator":{"data":{"type":"incubator","id":"mtes"}}}},"ecoindex":[{"width":1920,"height":1080,"url":"https://docurba.incubateur.net","size":3540.103,"nodes":236,"requests":25,"grade":"B","score":71,"ges":1.58,"water":2.37,"ecoindex_version":"5.4.2","date":"2024-12-08 03:41:03.588105","page_type":"website"}],"sonarcloud":[],"dsfr":{"detected":false},"summary":{"404":"A+","nmapGrade":"A","nmapOpenPortsCount":2,"nmapOpenPortsGrade":"A","dependabotGrade":"D","dependabotCount":53,"codescanCount":18,"codescanGrade":"F","cookiesGrade":null,"cookiesCount":null,"trackersGrade":null,"trackersCount":null,"lighthouse_performance":0.66,"lighthouse_performanceGrade":"C","lighthouse_accessibility":0.89,"lighthouse_accessibilityGrade":"A","lighthouse_best-practices":1,"lighthouse_best-practicesGrade":"A","lighthouse_seo":0.79,"lighthouse_seoGrade":"B","lighthouse_pwa":0.8,"lighthouse_pwaGrade":"B","statsGrade":"A","githubRepositoryGrade":"A","budgetPageGrade":"A","declaration-a11y":"F","declaration-rgpd-ml":"F","declaration-rgpd-pc":"F","ecoindexGrade":"B","dsfrGrade":"F"}}},"__N_SSG":true}